{"ast":null,"code":"/**\n * @module ol/geom/Point\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { containsXY, createOrUpdateFromCoordinate } from '../extent.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\n\nclass Point extends SimpleGeometry {\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    this.setCoordinates(coordinates, layout);\n  }\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   */\n\n\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  }\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(x, y, flatCoordinates[0], flatCoordinates[1]);\n\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   */\n\n\n  getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n\n\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n\n\n  getType() {\n    return 'Point';\n  }\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n\n\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 0);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n\n}\n\nexport default Point;","map":{"version":3,"names":["SimpleGeometry","containsXY","createOrUpdateFromCoordinate","deflateCoordinate","squaredDistance","squaredDx","Point","constructor","coordinates","layout","setCoordinates","clone","point","flatCoordinates","slice","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","stride","i","length","getCoordinates","computeExtent","extent","getType","intersectsExtent","setLayout","changed"],"sources":["D:/Work/Learning/demo/node_modules/ol/geom/Point.js"],"sourcesContent":["/**\n * @module ol/geom/Point\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    this.setCoordinates(coordinates, layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[0],\n      flatCoordinates[1]\n    );\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Point';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default Point;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,cAAP,MAA2B,qBAA3B;AACA,SAAQC,UAAR,EAAoBC,4BAApB,QAAuD,cAAvD;AACA,SAAQC,iBAAR,QAAgC,mBAAhC;AACA,SAAQC,eAAe,IAAIC,SAA3B,QAA2C,YAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAN,SAAoBN,cAApB,CAAmC;EACjC;AACF;AACA;AACA;EACEO,WAAW,CAACC,WAAD,EAAcC,MAAd,EAAsB;IAC/B;IACA,KAAKC,cAAL,CAAoBF,WAApB,EAAiCC,MAAjC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,KAAK,GAAG;IACN,MAAMC,KAAK,GAAG,IAAIN,KAAJ,CAAU,KAAKO,eAAL,CAAqBC,KAArB,EAAV,EAAwC,KAAKL,MAA7C,CAAd;IACAG,KAAK,CAACG,eAAN,CAAsB,IAAtB;IACA,OAAOH,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEI,cAAc,CAACC,CAAD,EAAIC,CAAJ,EAAOC,YAAP,EAAqBC,kBAArB,EAAyC;IACrD,MAAMP,eAAe,GAAG,KAAKA,eAA7B;IACA,MAAMT,eAAe,GAAGC,SAAS,CAC/BY,CAD+B,EAE/BC,CAF+B,EAG/BL,eAAe,CAAC,CAAD,CAHgB,EAI/BA,eAAe,CAAC,CAAD,CAJgB,CAAjC;;IAMA,IAAIT,eAAe,GAAGgB,kBAAtB,EAA0C;MACxC,MAAMC,MAAM,GAAG,KAAKA,MAApB;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4B,EAAEC,CAA9B,EAAiC;QAC/BH,YAAY,CAACG,CAAD,CAAZ,GAAkBT,eAAe,CAACS,CAAD,CAAjC;MACD;;MACDH,YAAY,CAACI,MAAb,GAAsBF,MAAtB;MACA,OAAOjB,eAAP;IACD,CAPD,MAOO;MACL,OAAOgB,kBAAP;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEI,cAAc,GAAG;IACf,OAAO,CAAC,KAAKX,eAAN,GAAwB,EAAxB,GAA6B,KAAKA,eAAL,CAAqBC,KAArB,EAApC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEW,aAAa,CAACC,MAAD,EAAS;IACpB,OAAOxB,4BAA4B,CAAC,KAAKW,eAAN,EAAuBa,MAAvB,CAAnC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,OAAO,GAAG;IACR,OAAO,OAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEC,gBAAgB,CAACF,MAAD,EAAS;IACvB,OAAOzB,UAAU,CAACyB,MAAD,EAAS,KAAKb,eAAL,CAAqB,CAArB,CAAT,EAAkC,KAAKA,eAAL,CAAqB,CAArB,CAAlC,CAAjB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEH,cAAc,CAACF,WAAD,EAAcC,MAAd,EAAsB;IAClC,KAAKoB,SAAL,CAAepB,MAAf,EAAuBD,WAAvB,EAAoC,CAApC;;IACA,IAAI,CAAC,KAAKK,eAAV,EAA2B;MACzB,KAAKA,eAAL,GAAuB,EAAvB;IACD;;IACD,KAAKA,eAAL,CAAqBU,MAArB,GAA8BpB,iBAAiB,CAC7C,KAAKU,eADwC,EAE7C,CAF6C,EAG7CL,WAH6C,EAI7C,KAAKa,MAJwC,CAA/C;IAMA,KAAKS,OAAL;EACD;;AAtGgC;;AAyGnC,eAAexB,KAAf"},"metadata":{},"sourceType":"module"}