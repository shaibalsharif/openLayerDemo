{"ast":null,"code":"/**\n * @module ol/centerconstraint\n */\nimport { clamp } from './math.js';\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\n\nexport function createExtent(extent, onlyCenter, smooth) {\n  return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number|undefined} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, isMoving, centerShift) {\n      if (!center) {\n        return undefined;\n      }\n\n      if (!resolution && !onlyCenter) {\n        return center;\n      }\n\n      const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n      const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n      const shiftX = centerShift ? centerShift[0] : 0;\n      const shiftY = centerShift ? centerShift[1] : 0;\n      let minX = extent[0] + viewWidth / 2 + shiftX;\n      let maxX = extent[2] - viewWidth / 2 + shiftX;\n      let minY = extent[1] + viewHeight / 2 + shiftY;\n      let maxY = extent[3] - viewHeight / 2 + shiftY; // note: when zooming out of bounds, min and max values for x and y may\n      // end up inverted (min > max); this has to be accounted for\n\n      if (minX > maxX) {\n        minX = (maxX + minX) / 2;\n        maxX = minX;\n      }\n\n      if (minY > maxY) {\n        minY = (maxY + minY) / 2;\n        maxY = minY;\n      }\n\n      let x = clamp(center[0], minX, maxX);\n      let y = clamp(center[1], minY, maxY); // during an interaction, allow some overscroll\n\n      if (isMoving && smooth && resolution) {\n        const ratio = 30 * resolution;\n        x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) + ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n        y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) + ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n      }\n\n      return [x, y];\n    }\n  );\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\n\nexport function none(center) {\n  return center;\n}","map":{"version":3,"names":["clamp","createExtent","extent","onlyCenter","smooth","center","resolution","size","isMoving","centerShift","undefined","viewWidth","viewHeight","shiftX","shiftY","minX","maxX","minY","maxY","x","y","ratio","Math","log","max","none"],"sources":["D:/Work/Learning/demo/node_modules/ol/centerconstraint.js"],"sourcesContent":["/**\n * @module ol/centerconstraint\n */\nimport {clamp} from './math.js';\n\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\nexport function createExtent(extent, onlyCenter, smooth) {\n  return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number|undefined} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, isMoving, centerShift) {\n      if (!center) {\n        return undefined;\n      }\n      if (!resolution && !onlyCenter) {\n        return center;\n      }\n      const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n      const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n      const shiftX = centerShift ? centerShift[0] : 0;\n      const shiftY = centerShift ? centerShift[1] : 0;\n      let minX = extent[0] + viewWidth / 2 + shiftX;\n      let maxX = extent[2] - viewWidth / 2 + shiftX;\n      let minY = extent[1] + viewHeight / 2 + shiftY;\n      let maxY = extent[3] - viewHeight / 2 + shiftY;\n\n      // note: when zooming out of bounds, min and max values for x and y may\n      // end up inverted (min > max); this has to be accounted for\n      if (minX > maxX) {\n        minX = (maxX + minX) / 2;\n        maxX = minX;\n      }\n      if (minY > maxY) {\n        minY = (maxY + minY) / 2;\n        maxY = minY;\n      }\n\n      let x = clamp(center[0], minX, maxX);\n      let y = clamp(center[1], minY, maxY);\n\n      // during an interaction, allow some overscroll\n      if (isMoving && smooth && resolution) {\n        const ratio = 30 * resolution;\n        x +=\n          -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +\n          ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n        y +=\n          -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +\n          ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n      }\n\n      return [x, y];\n    }\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\nexport function none(center) {\n  return center;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}