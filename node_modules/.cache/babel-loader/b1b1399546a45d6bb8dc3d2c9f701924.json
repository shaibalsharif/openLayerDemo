{"ast":null,"code":"/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\nimport { getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\n/**\n * @type {Array<HTMLCanvasElement>}\n */\n\nexport const canvasPool = [];\n/**\n * @type {CanvasRenderingContext2D}\n */\n\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  const canvas = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  pixelContext = canvas.getContext('2d');\n}\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\n\n\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n    this.container = null;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.renderedResolution;\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.tempTransform = createTransform();\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.pixelTransform = createTransform();\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.inversePixelTransform = createTransform();\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n\n    this.context = null;\n    /**\n     * @type {boolean}\n     */\n\n    this.containerReused = false;\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n\n    this.pixelContext_ = null;\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n\n    this.frameState = null;\n  }\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n\n\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n\n    pixelContext.clearRect(0, 0, 1, 1);\n    let data;\n\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n\n    return data;\n  }\n  /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n\n\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n\n    return background || undefined;\n  }\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */\n\n\n  useContainer(target, transform, backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n\n    if (target && target.className === layerClassName && (!backgroundColor || target && target.style.backgroundColor && equals(asArray(target.style.backgroundColor), asArray(backgroundColor)))) {\n      const canvas = target.firstElementChild;\n\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n\n    if (!this.containerReused && backgroundColor && !this.container.style.backgroundColor) {\n      this.container.style.backgroundColor = backgroundColor;\n    }\n  }\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n\n\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n      layer.dispatchEvent(event);\n    }\n  }\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  preRender(context, frameState) {\n    this.frameState = frameState;\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n\n\n  getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n  }\n  /**\n   * Clean up.\n   */\n\n\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n\n}\n\nexport default CanvasLayerRenderer;","map":{"version":3,"names":["LayerRenderer","RenderEvent","RenderEventType","apply","applyTransform","compose","composeTransform","create","createTransform","asArray","createCanvasContext2D","equals","getBottomLeft","getBottomRight","getTopLeft","getTopRight","canvasPool","pixelContext","createPixelContext","canvas","document","createElement","width","height","getContext","CanvasLayerRenderer","constructor","layer","container","renderedResolution","tempTransform","pixelTransform","inversePixelTransform","context","containerReused","pixelContext_","frameState","getImageData","image","col","row","clearRect","data","drawImage","err","getBackground","getLayer","background","viewState","resolution","undefined","useContainer","target","transform","backgroundColor","layerClassName","getClassName","className","style","firstElementChild","HTMLCanvasElement","position","appendChild","left","transformOrigin","clipUnrotated","extent","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","inverted","save","beginPath","moveTo","Math","round","lineTo","clip","dispatchRenderEvent_","type","hasListener","event","dispatchEvent","preRender","PRERENDER","postRender","POSTRENDER","getRenderTransform","center","rotation","pixelRatio","offsetX","dx1","dy1","sx","sy","dx2","dy2","disposeInternal"],"sources":["D:/Work/Learning/demo/node_modules/ol/renderer/canvas/Layer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {asArray} from '../../color.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {equals} from '../../array.js';\nimport {\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../../extent.js';\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  const canvas = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  pixelContext = canvas.getContext('2d');\n}\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.pixelContext_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    let data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */\n  useContainer(target, transform, backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.className === layerClassName &&\n      (!backgroundColor ||\n        (target &&\n          target.style.backgroundColor &&\n          equals(\n            asArray(target.style.backgroundColor),\n            asArray(backgroundColor)\n          )))\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n    if (\n      !this.containerReused &&\n      backgroundColor &&\n      !this.container.style.backgroundColor\n    ) {\n      this.container.style.backgroundColor = backgroundColor;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.frameState = frameState;\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2\n    );\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n}\n\nexport default CanvasLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}