{"ast":null,"code":"/**\n * @module ol/reproj/Tile\n */\nimport { ERROR_THRESHOLD } from './common.js';\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport Triangulation from './Triangulation.js';\nimport { calculateSourceExtentResolution, canvasPool, render as renderReprojected } from '../reproj.js';\nimport { clamp } from '../math.js';\nimport { getArea, getIntersection } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { releaseCanvas } from '../dom.js';\n/**\n * @typedef {function(number, number, number, number) : import(\"../Tile.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link module:ol/source/TileImage~TileImage}.\n *\n */\n\nclass ReprojTile extends Tile {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} gutter Gutter of the source tiles.\n   * @param {FunctionType} getTileFunction\n   *     Function returning source tiles (z, x, y, pixelRatio).\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\n   * @param {boolean} [renderEdges] Render reprojection edges.\n   * @param {boolean} [interpolate] Use linear interpolation when resampling.\n   */\n  constructor(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, errorThreshold, renderEdges, interpolate) {\n    super(tileCoord, TileState.IDLE, {\n      interpolate: !!interpolate\n    });\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.pixelRatio_ = pixelRatio;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.gutter_ = gutter;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.canvas_ = null;\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n\n    this.sourceTileGrid_ = sourceTileGrid;\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n\n    this.targetTileGrid_ = targetTileGrid;\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n    /**\n     * @private\n     * @type {!Array<import(\"../Tile.js\").default>}\n     */\n\n    this.sourceTiles_ = [];\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n\n    this.sourcesListenerKeys_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.sourceZ_ = 0;\n    const targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\n    const limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const sourceProjExtent = sourceProj.getExtent();\n\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n\n    const targetResolution = targetTileGrid.getResolution(this.wrappedTileCoord_[0]);\n    const sourceResolution = calculateSourceExtentResolution(sourceProj, targetProj, limitedTargetExtent, targetResolution);\n\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const errorThresholdInPixels = errorThreshold !== undefined ? errorThreshold : ERROR_THRESHOLD;\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n\n    this.triangulation_ = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);\n\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\n\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);\n        sourceExtent[3] = clamp(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(sourceExtent, this.sourceZ_);\n\n      for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n        for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n          const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n\n          if (tile) {\n            this.sourceTiles_.push(tile);\n          }\n        }\n      }\n\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n  /**\n   * Get the HTML Canvas element for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n\n\n  getImage() {\n    return this.canvas_;\n  }\n  /**\n   * @private\n   */\n\n\n  reproject_() {\n    const sources = [];\n    this.sourceTiles_.forEach(function (tile, i, arr) {\n      if (tile && tile.getState() == TileState.LOADED) {\n        sources.push({\n          extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),\n          image: tile.getImage()\n        });\n      }\n    }.bind(this));\n    this.sourceTiles_.length = 0;\n\n    if (sources.length === 0) {\n      this.state = TileState.ERROR;\n    } else {\n      const z = this.wrappedTileCoord_[0];\n      const size = this.targetTileGrid_.getTileSize(z);\n      const width = typeof size === 'number' ? size : size[0];\n      const height = typeof size === 'number' ? size : size[1];\n      const targetResolution = this.targetTileGrid_.getResolution(z);\n      const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);\n      this.canvas_ = renderReprojected(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_, this.interpolate);\n      this.state = TileState.LOADED;\n    }\n\n    this.changed();\n  }\n  /**\n   * Load not yet loaded URI.\n   */\n\n\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n      let leftToLoad = 0;\n      this.sourcesListenerKeys_ = [];\n      this.sourceTiles_.forEach(function (tile, i, arr) {\n        const state = tile.getState();\n\n        if (state == TileState.IDLE || state == TileState.LOADING) {\n          leftToLoad++;\n          const sourceListenKey = listen(tile, EventType.CHANGE, function (e) {\n            const state = tile.getState();\n\n            if (state == TileState.LOADED || state == TileState.ERROR || state == TileState.EMPTY) {\n              unlistenByKey(sourceListenKey);\n              leftToLoad--;\n\n              if (leftToLoad === 0) {\n                this.unlistenSources_();\n                this.reproject_();\n              }\n            }\n          }, this);\n          this.sourcesListenerKeys_.push(sourceListenKey);\n        }\n      }.bind(this));\n\n      if (leftToLoad === 0) {\n        setTimeout(this.reproject_.bind(this), 0);\n      } else {\n        this.sourceTiles_.forEach(function (tile, i, arr) {\n          const state = tile.getState();\n\n          if (state == TileState.IDLE) {\n            tile.load();\n          }\n        });\n      }\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  }\n  /**\n   * Remove from the cache due to expiry\n   */\n\n\n  release() {\n    if (this.canvas_) {\n      releaseCanvas(this.canvas_.getContext('2d'));\n      canvasPool.push(this.canvas_);\n      this.canvas_ = null;\n    }\n\n    super.release();\n  }\n\n}\n\nexport default ReprojTile;","map":{"version":3,"names":["ERROR_THRESHOLD","EventType","Tile","TileState","Triangulation","calculateSourceExtentResolution","canvasPool","render","renderReprojected","clamp","getArea","getIntersection","listen","unlistenByKey","releaseCanvas","ReprojTile","constructor","sourceProj","sourceTileGrid","targetProj","targetTileGrid","tileCoord","wrappedTileCoord","pixelRatio","gutter","getTileFunction","errorThreshold","renderEdges","interpolate","IDLE","renderEdges_","undefined","pixelRatio_","gutter_","canvas_","sourceTileGrid_","targetTileGrid_","wrappedTileCoord_","sourceTiles_","sourcesListenerKeys_","sourceZ_","targetExtent","getTileCoordExtent","maxTargetExtent","getExtent","maxSourceExtent","limitedTargetExtent","state","EMPTY","sourceProjExtent","targetResolution","getResolution","sourceResolution","isFinite","errorThresholdInPixels","triangulation_","getTriangles","length","getZForResolution","sourceExtent","calculateSourceExtent","canWrapX","sourceRange","getTileRangeForExtentAndZ","srcX","minX","maxX","srcY","minY","maxY","tile","push","getImage","reproject_","sources","forEach","i","arr","getState","LOADED","extent","image","bind","ERROR","z","size","getTileSize","width","height","changed","load","LOADING","leftToLoad","sourceListenKey","CHANGE","e","unlistenSources_","setTimeout","release","getContext"],"sources":["D:/Work/Learning/demo/node_modules/ol/reproj/Tile.js"],"sourcesContent":["/**\n * @module ol/reproj/Tile\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport Triangulation from './Triangulation.js';\nimport {\n  calculateSourceExtentResolution,\n  canvasPool,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {clamp} from '../math.js';\nimport {getArea, getIntersection} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {releaseCanvas} from '../dom.js';\n\n/**\n * @typedef {function(number, number, number, number) : import(\"../Tile.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link module:ol/source/TileImage~TileImage}.\n *\n */\nclass ReprojTile extends Tile {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} gutter Gutter of the source tiles.\n   * @param {FunctionType} getTileFunction\n   *     Function returning source tiles (z, x, y, pixelRatio).\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\n   * @param {boolean} [renderEdges] Render reprojection edges.\n   * @param {boolean} [interpolate] Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    sourceTileGrid,\n    targetProj,\n    targetTileGrid,\n    tileCoord,\n    wrappedTileCoord,\n    pixelRatio,\n    gutter,\n    getTileFunction,\n    errorThreshold,\n    renderEdges,\n    interpolate\n  ) {\n    super(tileCoord, TileState.IDLE, {interpolate: !!interpolate});\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = gutter;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.sourceTileGrid_ = sourceTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.targetTileGrid_ = targetTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n\n    /**\n     * @private\n     * @type {!Array<import(\"../Tile.js\").default>}\n     */\n    this.sourceTiles_ = [];\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.sourcesListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourceZ_ = 0;\n\n    const targetExtent = targetTileGrid.getTileCoordExtent(\n      this.wrappedTileCoord_\n    );\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const sourceProjExtent = sourceProj.getExtent();\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n\n    const targetResolution = targetTileGrid.getResolution(\n      this.wrappedTileCoord_[0]\n    );\n\n    const sourceResolution = calculateSourceExtentResolution(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      targetResolution\n    );\n\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const errorThresholdInPixels =\n      errorThreshold !== undefined ? errorThreshold : ERROR_THRESHOLD;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution\n    );\n\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\n\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(\n          sourceExtent[1],\n          maxSourceExtent[1],\n          maxSourceExtent[3]\n        );\n        sourceExtent[3] = clamp(\n          sourceExtent[3],\n          maxSourceExtent[1],\n          maxSourceExtent[3]\n        );\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(\n        sourceExtent,\n        this.sourceZ_\n      );\n\n      for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n        for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n          const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n          if (tile) {\n            this.sourceTiles_.push(tile);\n          }\n        }\n      }\n\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n\n  /**\n   * Get the HTML Canvas element for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sources = [];\n    this.sourceTiles_.forEach(\n      function (tile, i, arr) {\n        if (tile && tile.getState() == TileState.LOADED) {\n          sources.push({\n            extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),\n            image: tile.getImage(),\n          });\n        }\n      }.bind(this)\n    );\n    this.sourceTiles_.length = 0;\n\n    if (sources.length === 0) {\n      this.state = TileState.ERROR;\n    } else {\n      const z = this.wrappedTileCoord_[0];\n      const size = this.targetTileGrid_.getTileSize(z);\n      const width = typeof size === 'number' ? size : size[0];\n      const height = typeof size === 'number' ? size : size[1];\n      const targetResolution = this.targetTileGrid_.getResolution(z);\n      const sourceResolution = this.sourceTileGrid_.getResolution(\n        this.sourceZ_\n      );\n\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(\n        this.wrappedTileCoord_\n      );\n\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.pixelRatio_,\n        sourceResolution,\n        this.sourceTileGrid_.getExtent(),\n        targetResolution,\n        targetExtent,\n        this.triangulation_,\n        sources,\n        this.gutter_,\n        this.renderEdges_,\n        this.interpolate\n      );\n\n      this.state = TileState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n\n      let leftToLoad = 0;\n\n      this.sourcesListenerKeys_ = [];\n      this.sourceTiles_.forEach(\n        function (tile, i, arr) {\n          const state = tile.getState();\n          if (state == TileState.IDLE || state == TileState.LOADING) {\n            leftToLoad++;\n\n            const sourceListenKey = listen(\n              tile,\n              EventType.CHANGE,\n              function (e) {\n                const state = tile.getState();\n                if (\n                  state == TileState.LOADED ||\n                  state == TileState.ERROR ||\n                  state == TileState.EMPTY\n                ) {\n                  unlistenByKey(sourceListenKey);\n                  leftToLoad--;\n                  if (leftToLoad === 0) {\n                    this.unlistenSources_();\n                    this.reproject_();\n                  }\n                }\n              },\n              this\n            );\n            this.sourcesListenerKeys_.push(sourceListenKey);\n          }\n        }.bind(this)\n      );\n\n      if (leftToLoad === 0) {\n        setTimeout(this.reproject_.bind(this), 0);\n      } else {\n        this.sourceTiles_.forEach(function (tile, i, arr) {\n          const state = tile.getState();\n          if (state == TileState.IDLE) {\n            tile.load();\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  }\n\n  /**\n   * Remove from the cache due to expiry\n   */\n  release() {\n    if (this.canvas_) {\n      releaseCanvas(this.canvas_.getContext('2d'));\n      canvasPool.push(this.canvas_);\n      this.canvas_ = null;\n    }\n    super.release();\n  }\n}\n\nexport default ReprojTile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}