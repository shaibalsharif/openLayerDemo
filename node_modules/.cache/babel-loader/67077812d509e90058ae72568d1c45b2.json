{"ast":null,"code":"/**\n * @module ol/extent\n */\nimport Relationship from './extent/Relationship.js';\nimport { assert } from './asserts.js';\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Extent corner.\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\n\nexport function boundingExtent(coordinates) {\n  const extent = createEmpty();\n\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n\n  return extent;\n}\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\n\nfunction _boundingExtentXYs(xs, ys, dest) {\n  const minX = Math.min.apply(null, xs);\n  const minY = Math.min.apply(null, ys);\n  const maxX = Math.max.apply(null, xs);\n  const maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, dest);\n}\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n * @api\n */\n\n\nexport function buffer(extent, value, dest) {\n  if (dest) {\n    dest[0] = extent[0] - value;\n    dest[1] = extent[1] - value;\n    dest[2] = extent[2] + value;\n    dest[3] = extent[3] + value;\n    return dest;\n  } else {\n    return [extent[0] - value, extent[1] - value, extent[2] + value, extent[3] + value];\n  }\n}\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [dest] Extent.\n * @return {Extent} The clone.\n */\n\nexport function clone(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  } else {\n    return extent.slice();\n  }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\n\nexport function closestSquaredDistanceXY(extent, x, y) {\n  let dx, dy;\n\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n\n  return dx * dx + dy * dy;\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\n\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\n\nexport function containsExtent(extent1, extent2) {\n  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\n\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\n\nexport function coordinateRelationship(extent, coordinate) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let relationship = Relationship.UNKNOWN;\n\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n\n  return relationship;\n}\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\n\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\n\nexport function createOrUpdate(minX, minY, maxX, maxY, dest) {\n  if (dest) {\n    dest[0] = minX;\n    dest[1] = minY;\n    dest[2] = maxX;\n    dest[3] = maxY;\n    return dest;\n  } else {\n    return [minX, minY, maxX, maxY];\n  }\n}\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\n\nexport function createOrUpdateEmpty(dest) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\n\nexport function createOrUpdateFromCoordinate(coordinate, dest) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  return createOrUpdate(x, y, x, y, dest);\n}\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\n\nexport function createOrUpdateFromCoordinates(coordinates, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendCoordinates(extent, coordinates);\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\n\nexport function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\n\nexport function createOrUpdateFromRings(rings, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendRings(extent, rings);\n}\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\n\nexport function equals(extent1, extent2) {\n  return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];\n}\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\n\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n  return Math.abs(extent1[0] - extent2[0]) < tolerance && Math.abs(extent1[2] - extent2[2]) < tolerance && Math.abs(extent1[1] - extent2[1]) < tolerance && Math.abs(extent1[3] - extent2[3]) < tolerance;\n}\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\n\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n\n  return extent1;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\n\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\n\nexport function extendCoordinates(extent, coordinates) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n\n  return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\n\nexport function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n\n  return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\n\nexport function extendRings(extent, rings) {\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n\n  return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\n\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\n\nexport function forEachCorner(extent, callback) {\n  let val;\n  val = callback(getBottomLeft(extent));\n\n  if (val) {\n    return val;\n  }\n\n  val = callback(getBottomRight(extent));\n\n  if (val) {\n    return val;\n  }\n\n  val = callback(getTopRight(extent));\n\n  if (val) {\n    return val;\n  }\n\n  val = callback(getTopLeft(extent));\n\n  if (val) {\n    return val;\n  }\n\n  return false;\n}\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\n\nexport function getArea(extent) {\n  let area = 0;\n\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n\n  return area;\n}\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\n\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\n\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\n\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\n\nexport function getCorner(extent, corner) {\n  let coordinate;\n\n  if (corner === 'bottom-left') {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === 'bottom-right') {\n    coordinate = getBottomRight(extent);\n  } else if (corner === 'top-left') {\n    coordinate = getTopLeft(extent);\n  } else if (corner === 'top-right') {\n    coordinate = getTopRight(extent);\n  } else {\n    assert(false, 13); // Invalid corner\n  }\n\n  return coordinate;\n}\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\n\nexport function getEnlargedArea(extent1, extent2) {\n  const minX = Math.min(extent1[0], extent2[0]);\n  const minY = Math.min(extent1[1], extent2[1]);\n  const maxX = Math.max(extent1[2], extent2[2]);\n  const maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\n\nexport function getForViewAndSize(center, resolution, rotation, size, dest) {\n  const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(center, resolution, rotation, size);\n  return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), dest);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @return {Array<number>} Linear ring representing the viewport.\n */\n\nexport function getRotatedViewport(center, resolution, rotation, size) {\n  const dx = resolution * size[0] / 2;\n  const dy = resolution * size[1] / 2;\n  const cosRotation = Math.cos(rotation);\n  const sinRotation = Math.sin(rotation);\n  const xCos = dx * cosRotation;\n  const xSin = dx * sinRotation;\n  const yCos = dy * cosRotation;\n  const ySin = dy * sinRotation;\n  const x = center[0];\n  const y = center[1];\n  return [x - xCos + ySin, y - xSin - yCos, x - xCos - ySin, y - xSin + yCos, x + xCos - ySin, y + xSin + yCos, x + xCos + ySin, y + xSin - yCos, x - xCos + ySin, y - xSin - yCos];\n}\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\n\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\n\nexport function getIntersectionArea(extent1, extent2) {\n  const intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [dest] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\n\nexport function getIntersection(extent1, extent2, dest) {\n  const intersection = dest ? dest : createEmpty();\n\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n\n  return intersection;\n}\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\n\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\n\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\n\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\n\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\n\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\n\nexport function intersects(extent1, extent2) {\n  return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];\n}\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\n\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\n\nexport function returnOrUpdate(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  } else {\n    return extent;\n  }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\n\nexport function scaleFromCenter(extent, value) {\n  const deltaX = (extent[2] - extent[0]) / 2 * (value - 1);\n  const deltaY = (extent[3] - extent[1]) / 2 * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\n\nexport function intersectsSegment(extent, start, end) {\n  let intersects = false;\n  const startRel = coordinateRelationship(extent, start);\n  const endRel = coordinateRelationship(extent, end);\n\n  if (startRel === Relationship.INTERSECTING || endRel === Relationship.INTERSECTING) {\n    intersects = true;\n  } else {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const startX = start[0];\n    const startY = start[1];\n    const endX = end[0];\n    const endY = end[1];\n    const slope = (endY - startY) / (endX - startX);\n    let x, y;\n\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n\n    if (!intersects && !!(endRel & Relationship.RIGHT) && !(startRel & Relationship.RIGHT)) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n\n    if (!intersects && !!(endRel & Relationship.BELOW) && !(startRel & Relationship.BELOW)) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n\n    if (!intersects && !!(endRel & Relationship.LEFT) && !(startRel & Relationship.LEFT)) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n\n  return intersects;\n}\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [dest] Destination extent.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\n\nexport function applyTransform(extent, transformFn, dest, stops) {\n  let coordinates = [];\n\n  if (stops > 1) {\n    const width = extent[2] - extent[0];\n    const height = extent[3] - extent[1];\n\n    for (let i = 0; i < stops; ++i) {\n      coordinates.push(extent[0] + width * i / stops, extent[1], extent[2], extent[1] + height * i / stops, extent[2] - width * i / stops, extent[3], extent[0], extent[3] - height * i / stops);\n    }\n  } else {\n    coordinates = [extent[0], extent[1], extent[2], extent[1], extent[2], extent[3], extent[0], extent[3]];\n  }\n\n  transformFn(coordinates, coordinates, 2);\n  const xs = [];\n  const ys = [];\n\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\n    xs.push(coordinates[i]);\n    ys.push(coordinates[i + 1]);\n  }\n\n  return _boundingExtentXYs(xs, ys, dest);\n}\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\n\nexport function wrapX(extent, projection) {\n  const projectionExtent = projection.getExtent();\n  const center = getCenter(extent);\n\n  if (projection.canWrapX() && (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);\n    const offset = worldsAway * worldWidth;\n    extent[0] -= offset;\n    extent[2] -= offset;\n  }\n\n  return extent;\n}\n/**\n * Fits the extent to the real world\n *\n * If the extent does not cross the anti meridian, this will return the extent in an array\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\n * real world\n *\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Array<Extent>} The extent within the real world extent.\n */\n\nexport function wrapAndSliceX(extent, projection) {\n  if (projection.canWrapX()) {\n    const projectionExtent = projection.getExtent();\n\n    if (!isFinite(extent[0]) || !isFinite(extent[2])) {\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n\n    wrapX(extent, projection);\n    const worldWidth = getWidth(projectionExtent);\n\n    if (getWidth(extent) > worldWidth) {\n      // the extent wraps around on itself\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    } else if (extent[0] < projectionExtent[0]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [[extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]], [projectionExtent[0], extent[1], extent[2], extent[3]]];\n    } else if (extent[2] > projectionExtent[2]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [[extent[0], extent[1], projectionExtent[2], extent[3]], [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]]];\n    }\n  }\n\n  return [extent];\n}","map":{"version":3,"names":["Relationship","assert","boundingExtent","coordinates","extent","createEmpty","i","ii","length","extendCoordinate","_boundingExtentXYs","xs","ys","dest","minX","Math","min","apply","minY","maxX","max","maxY","createOrUpdate","buffer","value","clone","slice","closestSquaredDistanceXY","x","y","dx","dy","containsCoordinate","coordinate","containsXY","containsExtent","extent1","extent2","coordinateRelationship","relationship","UNKNOWN","LEFT","RIGHT","BELOW","ABOVE","INTERSECTING","Infinity","createOrUpdateEmpty","createOrUpdateFromCoordinate","createOrUpdateFromCoordinates","extendCoordinates","createOrUpdateFromFlatCoordinates","flatCoordinates","offset","end","stride","extendFlatCoordinates","createOrUpdateFromRings","rings","extendRings","equals","approximatelyEquals","tolerance","abs","extend","extendXY","forEachCorner","callback","val","getBottomLeft","getBottomRight","getTopRight","getTopLeft","getArea","area","isEmpty","getWidth","getHeight","getCenter","getCorner","corner","getEnlargedArea","getForViewAndSize","center","resolution","rotation","size","x0","y0","x1","y1","x2","y2","x3","y3","getRotatedViewport","cosRotation","cos","sinRotation","sin","xCos","xSin","yCos","ySin","getIntersectionArea","intersection","getIntersection","intersects","getMargin","getSize","returnOrUpdate","scaleFromCenter","deltaX","deltaY","intersectsSegment","start","startRel","endRel","startX","startY","endX","endY","slope","applyTransform","transformFn","stops","width","height","push","l","wrapX","projection","projectionExtent","getExtent","canWrapX","worldWidth","worldsAway","floor","wrapAndSliceX","isFinite"],"sources":["D:/Work/Learning/demo/node_modules/ol/extent.js"],"sourcesContent":["/**\n * @module ol/extent\n */\nimport Relationship from './extent/Relationship.js';\nimport {assert} from './asserts.js';\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Extent corner.\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  const extent = createEmpty();\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, dest) {\n  const minX = Math.min.apply(null, xs);\n  const minY = Math.min.apply(null, ys);\n  const maxX = Math.max.apply(null, xs);\n  const maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, dest);\n}\n\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, dest) {\n  if (dest) {\n    dest[0] = extent[0] - value;\n    dest[1] = extent[1] - value;\n    dest[2] = extent[2] + value;\n    dest[3] = extent[3] + value;\n    return dest;\n  } else {\n    return [\n      extent[0] - value,\n      extent[1] - value,\n      extent[2] + value,\n      extent[3] + value,\n    ];\n  }\n}\n\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [dest] Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  } else {\n    return extent.slice();\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  let dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[0] &&\n    extent2[2] <= extent1[2] &&\n    extent1[1] <= extent2[1] &&\n    extent2[3] <= extent1[3]\n  );\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, dest) {\n  if (dest) {\n    dest[0] = minX;\n    dest[1] = minY;\n    dest[2] = maxX;\n    dest[3] = maxY;\n    return dest;\n  } else {\n    return [minX, minY, maxX, maxY];\n  }\n}\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(dest) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, dest) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  return createOrUpdate(x, y, x, y, dest);\n}\n\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendCoordinates(extent, coordinates);\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  dest\n) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendRings(extent, rings);\n}\n\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return (\n    extent1[0] == extent2[0] &&\n    extent1[2] == extent2[2] &&\n    extent1[1] == extent2[1] &&\n    extent1[3] == extent2[3]\n  );\n}\n\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n  return (\n    Math.abs(extent1[0] - extent2[0]) < tolerance &&\n    Math.abs(extent1[2] - extent2[2]) < tolerance &&\n    Math.abs(extent1[1] - extent2[1]) < tolerance &&\n    Math.abs(extent1[3] - extent2[3]) < tolerance\n  );\n}\n\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(\n  extent,\n  flatCoordinates,\n  offset,\n  end,\n  stride\n) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n  let val;\n  val = callback(getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  let area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  let coordinate;\n  if (corner === 'bottom-left') {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === 'bottom-right') {\n    coordinate = getBottomRight(extent);\n  } else if (corner === 'top-left') {\n    coordinate = getTopLeft(extent);\n  } else if (corner === 'top-right') {\n    coordinate = getTopRight(extent);\n  } else {\n    assert(false, 13); // Invalid corner\n  }\n  return coordinate;\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  const minX = Math.min(extent1[0], extent2[0]);\n  const minY = Math.min(extent1[1], extent2[1]);\n  const maxX = Math.max(extent1[2], extent2[2]);\n  const maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, dest) {\n  const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(\n    center,\n    resolution,\n    rotation,\n    size\n  );\n  return createOrUpdate(\n    Math.min(x0, x1, x2, x3),\n    Math.min(y0, y1, y2, y3),\n    Math.max(x0, x1, x2, x3),\n    Math.max(y0, y1, y2, y3),\n    dest\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @return {Array<number>} Linear ring representing the viewport.\n */\nexport function getRotatedViewport(center, resolution, rotation, size) {\n  const dx = (resolution * size[0]) / 2;\n  const dy = (resolution * size[1]) / 2;\n  const cosRotation = Math.cos(rotation);\n  const sinRotation = Math.sin(rotation);\n  const xCos = dx * cosRotation;\n  const xSin = dx * sinRotation;\n  const yCos = dy * cosRotation;\n  const ySin = dy * sinRotation;\n  const x = center[0];\n  const y = center[1];\n  return [\n    x - xCos + ySin,\n    y - xSin - yCos,\n    x - xCos - ySin,\n    y - xSin + yCos,\n    x + xCos - ySin,\n    y + xSin + yCos,\n    x + xCos + ySin,\n    y + xSin - yCos,\n    x - xCos + ySin,\n    y - xSin - yCos,\n  ];\n}\n\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  const intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [dest] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, dest) {\n  const intersection = dest ? dest : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[2] &&\n    extent1[2] >= extent2[0] &&\n    extent1[1] <= extent2[3] &&\n    extent1[3] >= extent2[1]\n  );\n}\n\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  } else {\n    return extent;\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  let intersects = false;\n  const startRel = coordinateRelationship(extent, start);\n  const endRel = coordinateRelationship(extent, end);\n  if (\n    startRel === Relationship.INTERSECTING ||\n    endRel === Relationship.INTERSECTING\n  ) {\n    intersects = true;\n  } else {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const startX = start[0];\n    const startY = start[1];\n    const endX = end[0];\n    const endY = end[1];\n    const slope = (endY - startY) / (endX - startX);\n    let x, y;\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.RIGHT) &&\n      !(startRel & Relationship.RIGHT)\n    ) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.BELOW) &&\n      !(startRel & Relationship.BELOW)\n    ) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.LEFT) &&\n      !(startRel & Relationship.LEFT)\n    ) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n  return intersects;\n}\n\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [dest] Destination extent.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, dest, stops) {\n  let coordinates = [];\n  if (stops > 1) {\n    const width = extent[2] - extent[0];\n    const height = extent[3] - extent[1];\n    for (let i = 0; i < stops; ++i) {\n      coordinates.push(\n        extent[0] + (width * i) / stops,\n        extent[1],\n        extent[2],\n        extent[1] + (height * i) / stops,\n        extent[2] - (width * i) / stops,\n        extent[3],\n        extent[0],\n        extent[3] - (height * i) / stops\n      );\n    }\n  } else {\n    coordinates = [\n      extent[0],\n      extent[1],\n      extent[2],\n      extent[1],\n      extent[2],\n      extent[3],\n      extent[0],\n      extent[3],\n    ];\n  }\n  transformFn(coordinates, coordinates, 2);\n  const xs = [];\n  const ys = [];\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\n    xs.push(coordinates[i]);\n    ys.push(coordinates[i + 1]);\n  }\n  return _boundingExtentXYs(xs, ys, dest);\n}\n\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n  const projectionExtent = projection.getExtent();\n  const center = getCenter(extent);\n  if (\n    projection.canWrapX() &&\n    (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])\n  ) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.floor(\n      (center[0] - projectionExtent[0]) / worldWidth\n    );\n    const offset = worldsAway * worldWidth;\n    extent[0] -= offset;\n    extent[2] -= offset;\n  }\n  return extent;\n}\n\n/**\n * Fits the extent to the real world\n *\n * If the extent does not cross the anti meridian, this will return the extent in an array\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\n * real world\n *\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Array<Extent>} The extent within the real world extent.\n */\nexport function wrapAndSliceX(extent, projection) {\n  if (projection.canWrapX()) {\n    const projectionExtent = projection.getExtent();\n\n    if (!isFinite(extent[0]) || !isFinite(extent[2])) {\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n\n    wrapX(extent, projection);\n    const worldWidth = getWidth(projectionExtent);\n\n    if (getWidth(extent) > worldWidth) {\n      // the extent wraps around on itself\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    } else if (extent[0] < projectionExtent[0]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2], extent[3]],\n      ];\n    } else if (extent[2] > projectionExtent[2]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0], extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],\n      ];\n    }\n  }\n\n  return [extent];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}