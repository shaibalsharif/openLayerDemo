{"ast":null,"code":"/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport { assert } from '../asserts.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:source'|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\n\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.source;\n    super(baseOptions);\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n\n    this.un;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    this.mapPrecomposeKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    this.mapRenderKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    this.sourceChangeKey_ = null;\n    /**\n     * @private\n     * @type {RendererType}\n     */\n\n    this.renderer_ = null;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    this.rendered = false; // Overwrite default render method with a custom one\n\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    this.addChangeListener(LayerProperty.SOURCE, this.handleSourcePropertyChange_);\n    const source = options.source ?\n    /** @type {SourceType} */\n    options.source : null;\n    this.setSource(source);\n  }\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n\n\n  getLayersArray(array) {\n    array = array ? array : [];\n    array.push(this);\n    return array;\n  }\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n\n\n  getLayerStatesArray(states) {\n    states = states ? states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n\n\n  getSource() {\n    return (\n      /** @type {SourceType} */\n      this.get(LayerProperty.SOURCE) || null\n    );\n  }\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n\n\n  getRenderSource() {\n    return this.getSource();\n  }\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n\n\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? 'undefined' : source.getState();\n  }\n  /**\n   * @private\n   */\n\n\n  handleSourceChange_() {\n    this.changed();\n  }\n  /**\n   * @private\n   */\n\n\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n\n    const source = this.getSource();\n\n    if (source) {\n      this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n    }\n\n    this.changed();\n  }\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n   * an array of features.\n   */\n\n\n  getFeatures(pixel) {\n    if (!this.renderer_) {\n      return new Promise(resolve => resolve([]));\n    }\n\n    return this.renderer_.getFeatures(pixel);\n  }\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n\n\n  getData(pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n\n    return this.renderer_.getData(pixel);\n  }\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n\n\n  render(frameState, target) {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  }\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n\n\n  unrender() {\n    this.rendered = false;\n  }\n  /**\n   * For use inside the library only.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n\n\n  setMapInternal(map) {\n    if (!map) {\n      this.unrender();\n    }\n\n    this.set(LayerProperty.MAP, map);\n  }\n  /**\n   * For use inside the library only.\n   * @return {import(\"../Map.js\").default|null} Map.\n   */\n\n\n  getMapInternal() {\n    return this.get(LayerProperty.MAP);\n  }\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n\n\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n\n    if (!map) {\n      this.changed();\n    }\n\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n        const renderEvent =\n        /** @type {import(\"../render/Event.js\").default} */\n        evt;\n        const layerStatesArray = renderEvent.frameState.layerStatesArray;\n        const layerState = this.getLayerState(false); // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n\n        assert(!layerStatesArray.some(function (arrayLayerState) {\n          return arrayLayerState.layer === layerState.layer;\n        }), 67);\n        layerStatesArray.push(layerState);\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n\n\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */\n\n\n  getRenderer() {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n\n    return this.renderer_;\n  }\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n\n\n  hasRenderer() {\n    return !!this.renderer_;\n  }\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n\n\n  createRenderer() {\n    return null;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  disposeInternal() {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n\n    this.setSource(null);\n    super.disposeInternal();\n  }\n\n}\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\n\n\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n\n  const resolution = viewState.resolution;\n\n  if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {\n    return false;\n  }\n\n  const zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nexport default Layer;","map":{"version":3,"names":["BaseLayer","EventType","LayerProperty","RenderEventType","assert","listen","unlistenByKey","Layer","constructor","options","baseOptions","Object","assign","source","on","once","un","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","renderer_","rendered","render","map","setMap","addChangeListener","SOURCE","handleSourcePropertyChange_","setSource","getLayersArray","array","push","getLayerStatesArray","states","getLayerState","getSource","get","getRenderSource","getSourceState","getState","handleSourceChange_","changed","CHANGE","getFeatures","pixel","Promise","resolve","getData","frameState","target","layerRenderer","getRenderer","prepareFrame","renderFrame","unrender","setMapInternal","set","MAP","getMapInternal","PRECOMPOSE","evt","renderEvent","layerStatesArray","layerState","some","arrayLayerState","layer","createRenderer","hasRenderer","disposeInternal","dispose","inView","viewState","visible","resolution","minResolution","maxResolution","zoom","minZoom","maxZoom"],"sources":["D:/Work/Learning/demo/node_modules/ol/layer/Layer.js"],"sourcesContent":["/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport {assert} from '../asserts.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:source'|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.source;\n\n    super(baseOptions);\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {RendererType}\n     */\n    this.renderer_ = null;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.rendered = false;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    this.addChangeListener(\n      LayerProperty.SOURCE,\n      this.handleSourcePropertyChange_\n    );\n\n    const source = options.source\n      ? /** @type {SourceType} */ (options.source)\n      : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    array = array ? array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(states) {\n    states = states ? states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\n  }\n\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n  getRenderSource() {\n    return this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? 'undefined' : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(\n        source,\n        EventType.CHANGE,\n        this.handleSourceChange_,\n        this\n      );\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    if (!this.renderer_) {\n      return new Promise((resolve) => resolve([]));\n    }\n    return this.renderer_.getFeatures(pixel);\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n    return this.renderer_.getData(pixel);\n  }\n\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n  render(frameState, target) {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  }\n\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n  unrender() {\n    this.rendered = false;\n  }\n\n  /**\n   * For use inside the library only.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMapInternal(map) {\n    if (!map) {\n      this.unrender();\n    }\n    this.set(LayerProperty.MAP, map);\n  }\n\n  /**\n   * For use inside the library only.\n   * @return {import(\"../Map.js\").default|null} Map.\n   */\n  getMapInternal() {\n    return this.get(LayerProperty.MAP);\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(\n        map,\n        RenderEventType.PRECOMPOSE,\n        function (evt) {\n          const renderEvent =\n            /** @type {import(\"../render/Event.js\").default} */ (evt);\n          const layerStatesArray = renderEvent.frameState.layerStatesArray;\n          const layerState = this.getLayerState(false);\n          // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n          assert(\n            !layerStatesArray.some(function (arrayLayerState) {\n              return arrayLayerState.layer === layerState.layer;\n            }),\n            67\n          );\n          layerStatesArray.push(layerState);\n        },\n        this\n      );\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */\n  getRenderer() {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  }\n\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  hasRenderer() {\n    return !!this.renderer_;\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n\n    this.setSource(null);\n    super.disposeInternal();\n  }\n}\n\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  const resolution = viewState.resolution;\n  if (\n    resolution < layerState.minResolution ||\n    resolution >= layerState.maxResolution\n  ) {\n    return false;\n  }\n  const zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\n\nexport default Layer;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,aAAP,MAA0B,eAA1B;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AACA,SAAQC,MAAR,QAAqB,eAArB;AACA,SAAQC,MAAR,EAAgBC,aAAhB,QAAoC,cAApC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAN,SAAoBP,SAApB,CAA8B;EAC5B;AACF;AACA;EACEQ,WAAW,CAACC,OAAD,EAAU;IACnB,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,CAApB;IACA,OAAOC,WAAW,CAACG,MAAnB;IAEA,MAAMH,WAAN;IAEA;AACJ;AACA;;IACI,KAAKI,EAAL;IAEA;AACJ;AACA;;IACI,KAAKC,IAAL;IAEA;AACJ;AACA;;IACI,KAAKC,EAAL;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,iBAAL,GAAyB,IAAzB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,aAAL,GAAqB,IAArB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,gBAAL,GAAwB,IAAxB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,SAAL,GAAiB,IAAjB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,QAAL,GAAgB,KAAhB,CAjDmB,CAmDnB;;IACA,IAAIZ,OAAO,CAACa,MAAZ,EAAoB;MAClB,KAAKA,MAAL,GAAcb,OAAO,CAACa,MAAtB;IACD;;IAED,IAAIb,OAAO,CAACc,GAAZ,EAAiB;MACf,KAAKC,MAAL,CAAYf,OAAO,CAACc,GAApB;IACD;;IAED,KAAKE,iBAAL,CACEvB,aAAa,CAACwB,MADhB,EAEE,KAAKC,2BAFP;IAKA,MAAMd,MAAM,GAAGJ,OAAO,CAACI,MAAR;IACX;IAA2BJ,OAAO,CAACI,MADxB,GAEX,IAFJ;IAGA,KAAKe,SAAL,CAAef,MAAf;EACD;EAED;AACF;AACA;AACA;;;EACEgB,cAAc,CAACC,KAAD,EAAQ;IACpBA,KAAK,GAAGA,KAAK,GAAGA,KAAH,GAAW,EAAxB;IACAA,KAAK,CAACC,IAAN,CAAW,IAAX;IACA,OAAOD,KAAP;EACD;EAED;AACF;AACA;AACA;;;EACEE,mBAAmB,CAACC,MAAD,EAAS;IAC1BA,MAAM,GAAGA,MAAM,GAAGA,MAAH,GAAY,EAA3B;IACAA,MAAM,CAACF,IAAP,CAAY,KAAKG,aAAL,EAAZ;IACA,OAAOD,MAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEE,SAAS,GAAG;IACV;MAAO;MAA2B,KAAKC,GAAL,CAASlC,aAAa,CAACwB,MAAvB,CAAD,IAAoC;IAArE;EACD;EAED;AACF;AACA;;;EACEW,eAAe,GAAG;IAChB,OAAO,KAAKF,SAAL,EAAP;EACD;EAED;AACF;AACA;;;EACEG,cAAc,GAAG;IACf,MAAMzB,MAAM,GAAG,KAAKsB,SAAL,EAAf;IACA,OAAO,CAACtB,MAAD,GAAU,WAAV,GAAwBA,MAAM,CAAC0B,QAAP,EAA/B;EACD;EAED;AACF;AACA;;;EACEC,mBAAmB,GAAG;IACpB,KAAKC,OAAL;EACD;EAED;AACF;AACA;;;EACEd,2BAA2B,GAAG;IAC5B,IAAI,KAAKR,gBAAT,EAA2B;MACzBb,aAAa,CAAC,KAAKa,gBAAN,CAAb;MACA,KAAKA,gBAAL,GAAwB,IAAxB;IACD;;IACD,MAAMN,MAAM,GAAG,KAAKsB,SAAL,EAAf;;IACA,IAAItB,MAAJ,EAAY;MACV,KAAKM,gBAAL,GAAwBd,MAAM,CAC5BQ,MAD4B,EAE5BZ,SAAS,CAACyC,MAFkB,EAG5B,KAAKF,mBAHuB,EAI5B,IAJ4B,CAA9B;IAMD;;IACD,KAAKC,OAAL;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,WAAW,CAACC,KAAD,EAAQ;IACjB,IAAI,CAAC,KAAKxB,SAAV,EAAqB;MACnB,OAAO,IAAIyB,OAAJ,CAAaC,OAAD,IAAaA,OAAO,CAAC,EAAD,CAAhC,CAAP;IACD;;IACD,OAAO,KAAK1B,SAAL,CAAeuB,WAAf,CAA2BC,KAA3B,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACEG,OAAO,CAACH,KAAD,EAAQ;IACb,IAAI,CAAC,KAAKxB,SAAN,IAAmB,CAAC,KAAKC,QAA7B,EAAuC;MACrC,OAAO,IAAP;IACD;;IACD,OAAO,KAAKD,SAAL,CAAe2B,OAAf,CAAuBH,KAAvB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEtB,MAAM,CAAC0B,UAAD,EAAaC,MAAb,EAAqB;IACzB,MAAMC,aAAa,GAAG,KAAKC,WAAL,EAAtB;;IAEA,IAAID,aAAa,CAACE,YAAd,CAA2BJ,UAA3B,CAAJ,EAA4C;MAC1C,KAAK3B,QAAL,GAAgB,IAAhB;MACA,OAAO6B,aAAa,CAACG,WAAd,CAA0BL,UAA1B,EAAsCC,MAAtC,CAAP;IACD;EACF;EAED;AACF;AACA;;;EACEK,QAAQ,GAAG;IACT,KAAKjC,QAAL,GAAgB,KAAhB;EACD;EAED;AACF;AACA;AACA;;;EACEkC,cAAc,CAAChC,GAAD,EAAM;IAClB,IAAI,CAACA,GAAL,EAAU;MACR,KAAK+B,QAAL;IACD;;IACD,KAAKE,GAAL,CAAStD,aAAa,CAACuD,GAAvB,EAA4BlC,GAA5B;EACD;EAED;AACF;AACA;AACA;;;EACEmC,cAAc,GAAG;IACf,OAAO,KAAKtB,GAAL,CAASlC,aAAa,CAACuD,GAAvB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEjC,MAAM,CAACD,GAAD,EAAM;IACV,IAAI,KAAKN,iBAAT,EAA4B;MAC1BX,aAAa,CAAC,KAAKW,iBAAN,CAAb;MACA,KAAKA,iBAAL,GAAyB,IAAzB;IACD;;IACD,IAAI,CAACM,GAAL,EAAU;MACR,KAAKkB,OAAL;IACD;;IACD,IAAI,KAAKvB,aAAT,EAAwB;MACtBZ,aAAa,CAAC,KAAKY,aAAN,CAAb;MACA,KAAKA,aAAL,GAAqB,IAArB;IACD;;IACD,IAAIK,GAAJ,EAAS;MACP,KAAKN,iBAAL,GAAyBZ,MAAM,CAC7BkB,GAD6B,EAE7BpB,eAAe,CAACwD,UAFa,EAG7B,UAAUC,GAAV,EAAe;QACb,MAAMC,WAAW;QACf;QAAqDD,GADvD;QAEA,MAAME,gBAAgB,GAAGD,WAAW,CAACb,UAAZ,CAAuBc,gBAAhD;QACA,MAAMC,UAAU,GAAG,KAAK7B,aAAL,CAAmB,KAAnB,CAAnB,CAJa,CAKb;;QACA9B,MAAM,CACJ,CAAC0D,gBAAgB,CAACE,IAAjB,CAAsB,UAAUC,eAAV,EAA2B;UAChD,OAAOA,eAAe,CAACC,KAAhB,KAA0BH,UAAU,CAACG,KAA5C;QACD,CAFA,CADG,EAIJ,EAJI,CAAN;QAMAJ,gBAAgB,CAAC/B,IAAjB,CAAsBgC,UAAtB;MACD,CAhB4B,EAiB7B,IAjB6B,CAA/B;MAmBA,KAAK7C,aAAL,GAAqBb,MAAM,CAAC,IAAD,EAAOJ,SAAS,CAACyC,MAAjB,EAAyBnB,GAAG,CAACD,MAA7B,EAAqCC,GAArC,CAA3B;MACA,KAAKkB,OAAL;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEb,SAAS,CAACf,MAAD,EAAS;IAChB,KAAK2C,GAAL,CAAStD,aAAa,CAACwB,MAAvB,EAA+Bb,MAA/B;EACD;EAED;AACF;AACA;AACA;;;EACEsC,WAAW,GAAG;IACZ,IAAI,CAAC,KAAK/B,SAAV,EAAqB;MACnB,KAAKA,SAAL,GAAiB,KAAK+C,cAAL,EAAjB;IACD;;IACD,OAAO,KAAK/C,SAAZ;EACD;EAED;AACF;AACA;;;EACEgD,WAAW,GAAG;IACZ,OAAO,CAAC,CAAC,KAAKhD,SAAd;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE+C,cAAc,GAAG;IACf,OAAO,IAAP;EACD;EAED;AACF;AACA;;;EACEE,eAAe,GAAG;IAChB,IAAI,KAAKjD,SAAT,EAAoB;MAClB,KAAKA,SAAL,CAAekD,OAAf;MACA,OAAO,KAAKlD,SAAZ;IACD;;IAED,KAAKQ,SAAL,CAAe,IAAf;IACA,MAAMyC,eAAN;EACD;;AArT2B;AAwT9B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASE,MAAT,CAAgBR,UAAhB,EAA4BS,SAA5B,EAAuC;EAC5C,IAAI,CAACT,UAAU,CAACU,OAAhB,EAAyB;IACvB,OAAO,KAAP;EACD;;EACD,MAAMC,UAAU,GAAGF,SAAS,CAACE,UAA7B;;EACA,IACEA,UAAU,GAAGX,UAAU,CAACY,aAAxB,IACAD,UAAU,IAAIX,UAAU,CAACa,aAF3B,EAGE;IACA,OAAO,KAAP;EACD;;EACD,MAAMC,IAAI,GAAGL,SAAS,CAACK,IAAvB;EACA,OAAOA,IAAI,GAAGd,UAAU,CAACe,OAAlB,IAA6BD,IAAI,IAAId,UAAU,CAACgB,OAAvD;AACD;AAED,eAAexE,KAAf"},"metadata":{},"sourceType":"module"}