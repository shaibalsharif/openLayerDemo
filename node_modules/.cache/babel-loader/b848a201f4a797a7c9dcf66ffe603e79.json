{"ast":null,"code":"/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport { abstract } from '../util.js';\nimport { createOrUpdateFromFlatCoordinates, getCenter } from '../extent.js';\nimport { rotate, scale, transform2D, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\n\nclass SimpleGeometry extends Geometry {\n  constructor() {\n    super();\n    /**\n     * @protected\n     * @type {import(\"./Geometry.js\").GeometryLayout}\n     */\n\n    this.layout = 'XY';\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.stride = 2;\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n\n    this.flatCoordinates = null;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n\n\n  computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  }\n  /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */\n\n\n  getCoordinates() {\n    return abstract();\n  }\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n\n\n  getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n\n\n  getFlatCoordinates() {\n    return this.flatCoordinates;\n  }\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n\n\n  getLastCoordinate() {\n    return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n  }\n  /**\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\n   * @api\n   */\n\n\n  getLayout() {\n    return this.layout;\n  }\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   */\n\n\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    } // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n\n\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n\n    const simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    } else {\n      // Simplification did not actually remove any coordinates.  We now know\n      // that any calls to getSimplifiedGeometry with a squaredTolerance less\n      // than or equal to the current squaredTolerance will also not have any\n      // effect.  This allows us to short circuit simplification (saving CPU\n      // cycles) and prevents the cache of simplified geometries from filling\n      // up with useless identical copies of this geometry (saving memory).\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  }\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n\n\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  }\n  /**\n   * @return {number} Stride.\n   */\n\n\n  getStride() {\n    return this.stride;\n  }\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n\n\n  setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  }\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n\n\n  setCoordinates(coordinates, layout) {\n    abstract();\n  }\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n\n\n  setLayout(layout, coordinates, nesting) {\n    /** @type {number} */\n    let stride;\n\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (let i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = 'XY';\n          this.stride = 2;\n          return;\n        } else {\n          coordinates =\n          /** @type {Array} */\n          coordinates[0];\n        }\n      }\n\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n\n    this.layout = layout;\n    this.stride = stride;\n  }\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n\n\n  applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  }\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n\n\n  rotate(angle, anchor) {\n    const flatCoordinates = this.getFlatCoordinates();\n\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n      this.changed();\n    }\n  }\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n\n\n  scale(sx, sy, anchor) {\n    if (sy === undefined) {\n      sy = sx;\n    }\n\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n\n    const flatCoordinates = this.getFlatCoordinates();\n\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n      this.changed();\n    }\n  }\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n\n\n  translate(deltaX, deltaY) {\n    const flatCoordinates = this.getFlatCoordinates();\n\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n      this.changed();\n    }\n  }\n\n}\n/**\n * @param {number} stride Stride.\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n */\n\n\nfunction getLayoutForStride(stride) {\n  let layout;\n\n  if (stride == 2) {\n    layout = 'XY';\n  } else if (stride == 3) {\n    layout = 'XYZ';\n  } else if (stride == 4) {\n    layout = 'XYZM';\n  }\n\n  return (\n    /** @type {import(\"./Geometry.js\").GeometryLayout} */\n    layout\n  );\n}\n/**\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\n\n\nexport function getStrideForLayout(layout) {\n  let stride;\n\n  if (layout == 'XY') {\n    stride = 2;\n  } else if (layout == 'XYZ' || layout == 'XYM') {\n    stride = 3;\n  } else if (layout == 'XYZM') {\n    stride = 4;\n  }\n\n  return (\n    /** @type {number} */\n    stride\n  );\n}\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\n\nexport function transformGeom2D(simpleGeometry, transform, dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n\n  if (!flatCoordinates) {\n    return null;\n  } else {\n    const stride = simpleGeometry.getStride();\n    return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, dest);\n  }\n}\nexport default SimpleGeometry;","map":{"version":3,"names":["Geometry","abstract","createOrUpdateFromFlatCoordinates","getCenter","rotate","scale","transform2D","translate","SimpleGeometry","constructor","layout","stride","flatCoordinates","computeExtent","extent","length","getCoordinates","getFirstCoordinate","slice","getFlatCoordinates","getLastCoordinate","getLayout","getSimplifiedGeometry","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometry","getSimplifiedGeometryInternal","simplifiedFlatCoordinates","getStride","setFlatCoordinates","getStrideForLayout","setCoordinates","coordinates","setLayout","nesting","i","getLayoutForStride","applyTransform","transformFn","changed","angle","anchor","sx","sy","undefined","getExtent","deltaX","deltaY","transformGeom2D","simpleGeometry","transform","dest"],"sources":["D:/Work/Learning/demo/node_modules/ol/geom/SimpleGeometry.js"],"sourcesContent":["/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport {abstract} from '../util.js';\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nclass SimpleGeometry extends Geometry {\n  constructor() {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./Geometry.js\").GeometryLayout}\n     */\n    this.layout = 'XY';\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.stride = 2;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.flatCoordinates = null;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */\n  getCoordinates() {\n    return abstract();\n  }\n\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  getFlatCoordinates() {\n    return this.flatCoordinates;\n  }\n\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  getLastCoordinate() {\n    return this.flatCoordinates.slice(\n      this.flatCoordinates.length - this.stride\n    );\n  }\n\n  /**\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\n   * @api\n   */\n  getLayout() {\n    return this.layout;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometry =\n      this.getSimplifiedGeometryInternal(squaredTolerance);\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    } else {\n      // Simplification did not actually remove any coordinates.  We now know\n      // that any calls to getSimplifiedGeometry with a squaredTolerance less\n      // than or equal to the current squaredTolerance will also not have any\n      // effect.  This allows us to short circuit simplification (saving CPU\n      // cycles) and prevents the cache of simplified geometries from filling\n      // up with useless identical copies of this geometry (saving memory).\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  }\n\n  /**\n   * @return {number} Stride.\n   */\n  getStride() {\n    return this.stride;\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  }\n\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  setCoordinates(coordinates, layout) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  setLayout(layout, coordinates, nesting) {\n    /** @type {number} */\n    let stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (let i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = 'XY';\n          this.stride = 2;\n          return;\n        } else {\n          coordinates = /** @type {Array} */ (coordinates[0]);\n        }\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      rotate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        angle,\n        anchor,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    if (sy === undefined) {\n      sy = sx;\n    }\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      scale(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        sx,\n        sy,\n        anchor,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      translate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        deltaX,\n        deltaY,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n}\n\n/**\n * @param {number} stride Stride.\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n  let layout;\n  if (stride == 2) {\n    layout = 'XY';\n  } else if (stride == 3) {\n    layout = 'XYZ';\n  } else if (stride == 4) {\n    layout = 'XYZM';\n  }\n  return /** @type {import(\"./Geometry.js\").GeometryLayout} */ (layout);\n}\n\n/**\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  let stride;\n  if (layout == 'XY') {\n    stride = 2;\n  } else if (layout == 'XYZ' || layout == 'XYM') {\n    stride = 3;\n  } else if (layout == 'XYZM') {\n    stride = 4;\n  }\n  return /** @type {number} */ (stride);\n}\n\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  } else {\n    const stride = simpleGeometry.getStride();\n    return transform2D(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride,\n      transform,\n      dest\n    );\n  }\n}\n\nexport default SimpleGeometry;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,QAAP,MAAqB,eAArB;AACA,SAAQC,QAAR,QAAuB,YAAvB;AACA,SAAQC,iCAAR,EAA2CC,SAA3C,QAA2D,cAA3D;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,WAAvB,EAAoCC,SAApC,QAAoD,qBAApD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAN,SAA6BR,QAA7B,CAAsC;EACpCS,WAAW,GAAG;IACZ;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAc,IAAd;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAc,CAAd;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,eAAL,GAAuB,IAAvB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,aAAa,CAACC,MAAD,EAAS;IACpB,OAAOZ,iCAAiC,CACtC,KAAKU,eADiC,EAEtC,CAFsC,EAGtC,KAAKA,eAAL,CAAqBG,MAHiB,EAItC,KAAKJ,MAJiC,EAKtCG,MALsC,CAAxC;EAOD;EAED;AACF;AACA;AACA;;;EACEE,cAAc,GAAG;IACf,OAAOf,QAAQ,EAAf;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEgB,kBAAkB,GAAG;IACnB,OAAO,KAAKL,eAAL,CAAqBM,KAArB,CAA2B,CAA3B,EAA8B,KAAKP,MAAnC,CAAP;EACD;EAED;AACF;AACA;;;EACEQ,kBAAkB,GAAG;IACnB,OAAO,KAAKP,eAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEQ,iBAAiB,GAAG;IAClB,OAAO,KAAKR,eAAL,CAAqBM,KAArB,CACL,KAAKN,eAAL,CAAqBG,MAArB,GAA8B,KAAKJ,MAD9B,CAAP;EAGD;EAED;AACF;AACA;AACA;AACA;;;EACEU,SAAS,GAAG;IACV,OAAO,KAAKX,MAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEY,qBAAqB,CAACC,gBAAD,EAAmB;IACtC,IAAI,KAAKC,0BAAL,KAAoC,KAAKC,WAAL,EAAxC,EAA4D;MAC1D,KAAKC,wCAAL,GAAgD,CAAhD;MACA,KAAKF,0BAAL,GAAkC,KAAKC,WAAL,EAAlC;IACD,CAJqC,CAKtC;IACA;;;IACA,IACEF,gBAAgB,GAAG,CAAnB,IACC,KAAKG,wCAAL,KAAkD,CAAlD,IACCH,gBAAgB,IAAI,KAAKG,wCAH7B,EAIE;MACA,OAAO,IAAP;IACD;;IAED,MAAMC,kBAAkB,GACtB,KAAKC,6BAAL,CAAmCL,gBAAnC,CADF;IAEA,MAAMM,yBAAyB,GAAGF,kBAAkB,CAACR,kBAAnB,EAAlC;;IACA,IAAIU,yBAAyB,CAACd,MAA1B,GAAmC,KAAKH,eAAL,CAAqBG,MAA5D,EAAoE;MAClE,OAAOY,kBAAP;IACD,CAFD,MAEO;MACL;MACA;MACA;MACA;MACA;MACA;MACA,KAAKD,wCAAL,GAAgDH,gBAAhD;MACA,OAAO,IAAP;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEK,6BAA6B,CAACL,gBAAD,EAAmB;IAC9C,OAAO,IAAP;EACD;EAED;AACF;AACA;;;EACEO,SAAS,GAAG;IACV,OAAO,KAAKnB,MAAZ;EACD;EAED;AACF;AACA;AACA;;;EACEoB,kBAAkB,CAACrB,MAAD,EAASE,eAAT,EAA0B;IAC1C,KAAKD,MAAL,GAAcqB,kBAAkB,CAACtB,MAAD,CAAhC;IACA,KAAKA,MAAL,GAAcA,MAAd;IACA,KAAKE,eAAL,GAAuBA,eAAvB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEqB,cAAc,CAACC,WAAD,EAAcxB,MAAd,EAAsB;IAClCT,QAAQ;EACT;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEkC,SAAS,CAACzB,MAAD,EAASwB,WAAT,EAAsBE,OAAtB,EAA+B;IACtC;IACA,IAAIzB,MAAJ;;IACA,IAAID,MAAJ,EAAY;MACVC,MAAM,GAAGqB,kBAAkB,CAACtB,MAAD,CAA3B;IACD,CAFD,MAEO;MACL,KAAK,IAAI2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAApB,EAA6B,EAAEC,CAA/B,EAAkC;QAChC,IAAIH,WAAW,CAACnB,MAAZ,KAAuB,CAA3B,EAA8B;UAC5B,KAAKL,MAAL,GAAc,IAAd;UACA,KAAKC,MAAL,GAAc,CAAd;UACA;QACD,CAJD,MAIO;UACLuB,WAAW;UAAG;UAAsBA,WAAW,CAAC,CAAD,CAA/C;QACD;MACF;;MACDvB,MAAM,GAAGuB,WAAW,CAACnB,MAArB;MACAL,MAAM,GAAG4B,kBAAkB,CAAC3B,MAAD,CAA3B;IACD;;IACD,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE4B,cAAc,CAACC,WAAD,EAAc;IAC1B,IAAI,KAAK5B,eAAT,EAA0B;MACxB4B,WAAW,CAAC,KAAK5B,eAAN,EAAuB,KAAKA,eAA5B,EAA6C,KAAKD,MAAlD,CAAX;MACA,KAAK8B,OAAL;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACErC,MAAM,CAACsC,KAAD,EAAQC,MAAR,EAAgB;IACpB,MAAM/B,eAAe,GAAG,KAAKO,kBAAL,EAAxB;;IACA,IAAIP,eAAJ,EAAqB;MACnB,MAAMD,MAAM,GAAG,KAAKmB,SAAL,EAAf;MACA1B,MAAM,CACJQ,eADI,EAEJ,CAFI,EAGJA,eAAe,CAACG,MAHZ,EAIJJ,MAJI,EAKJ+B,KALI,EAMJC,MANI,EAOJ/B,eAPI,CAAN;MASA,KAAK6B,OAAL;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEpC,KAAK,CAACuC,EAAD,EAAKC,EAAL,EAASF,MAAT,EAAiB;IACpB,IAAIE,EAAE,KAAKC,SAAX,EAAsB;MACpBD,EAAE,GAAGD,EAAL;IACD;;IACD,IAAI,CAACD,MAAL,EAAa;MACXA,MAAM,GAAGxC,SAAS,CAAC,KAAK4C,SAAL,EAAD,CAAlB;IACD;;IACD,MAAMnC,eAAe,GAAG,KAAKO,kBAAL,EAAxB;;IACA,IAAIP,eAAJ,EAAqB;MACnB,MAAMD,MAAM,GAAG,KAAKmB,SAAL,EAAf;MACAzB,KAAK,CACHO,eADG,EAEH,CAFG,EAGHA,eAAe,CAACG,MAHb,EAIHJ,MAJG,EAKHiC,EALG,EAMHC,EANG,EAOHF,MAPG,EAQH/B,eARG,CAAL;MAUA,KAAK6B,OAAL;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACElC,SAAS,CAACyC,MAAD,EAASC,MAAT,EAAiB;IACxB,MAAMrC,eAAe,GAAG,KAAKO,kBAAL,EAAxB;;IACA,IAAIP,eAAJ,EAAqB;MACnB,MAAMD,MAAM,GAAG,KAAKmB,SAAL,EAAf;MACAvB,SAAS,CACPK,eADO,EAEP,CAFO,EAGPA,eAAe,CAACG,MAHT,EAIPJ,MAJO,EAKPqC,MALO,EAMPC,MANO,EAOPrC,eAPO,CAAT;MASA,KAAK6B,OAAL;IACD;EACF;;AArRmC;AAwRtC;AACA;AACA;AACA;;;AACA,SAASH,kBAAT,CAA4B3B,MAA5B,EAAoC;EAClC,IAAID,MAAJ;;EACA,IAAIC,MAAM,IAAI,CAAd,EAAiB;IACfD,MAAM,GAAG,IAAT;EACD,CAFD,MAEO,IAAIC,MAAM,IAAI,CAAd,EAAiB;IACtBD,MAAM,GAAG,KAAT;EACD,CAFM,MAEA,IAAIC,MAAM,IAAI,CAAd,EAAiB;IACtBD,MAAM,GAAG,MAAT;EACD;;EACD;IAAO;IAAuDA;EAA9D;AACD;AAED;AACA;AACA;AACA;;;AACA,OAAO,SAASsB,kBAAT,CAA4BtB,MAA5B,EAAoC;EACzC,IAAIC,MAAJ;;EACA,IAAID,MAAM,IAAI,IAAd,EAAoB;IAClBC,MAAM,GAAG,CAAT;EACD,CAFD,MAEO,IAAID,MAAM,IAAI,KAAV,IAAmBA,MAAM,IAAI,KAAjC,EAAwC;IAC7CC,MAAM,GAAG,CAAT;EACD,CAFM,MAEA,IAAID,MAAM,IAAI,MAAd,EAAsB;IAC3BC,MAAM,GAAG,CAAT;EACD;;EACD;IAAO;IAAuBA;EAA9B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASuC,eAAT,CAAyBC,cAAzB,EAAyCC,SAAzC,EAAoDC,IAApD,EAA0D;EAC/D,MAAMzC,eAAe,GAAGuC,cAAc,CAAChC,kBAAf,EAAxB;;EACA,IAAI,CAACP,eAAL,EAAsB;IACpB,OAAO,IAAP;EACD,CAFD,MAEO;IACL,MAAMD,MAAM,GAAGwC,cAAc,CAACrB,SAAf,EAAf;IACA,OAAOxB,WAAW,CAChBM,eADgB,EAEhB,CAFgB,EAGhBA,eAAe,CAACG,MAHA,EAIhBJ,MAJgB,EAKhByC,SALgB,EAMhBC,IANgB,CAAlB;EAQD;AACF;AAED,eAAe7C,cAAf"},"metadata":{},"sourceType":"module"}