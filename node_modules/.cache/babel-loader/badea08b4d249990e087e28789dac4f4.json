{"ast":null,"code":"/**\n * @module ol/tilegrid\n */\nimport TileGrid from './tilegrid/TileGrid.js';\nimport { DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, get as getProjection } from './proj.js';\nimport { containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth } from './extent.js';\nimport { toSize } from './size.js';\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\n\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n\n  return tileGrid;\n}\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\n\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n}\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\n\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\n  corner = corner !== undefined ? corner : 'top-left';\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: tileSize\n  });\n}\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\n\nexport function createXYZ(options) {\n  const xyzOptions = options || {};\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)\n  };\n  return new TileGrid(gridOptions);\n}\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\n\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n  maxResolution = maxResolution > 0 ? maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n\n  return resolutions;\n}\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\n\n\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, maxZoom, tileSize, corner);\n}\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\n\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n\n  if (!extent) {\n    const half = 180 * METERS_PER_UNIT.degrees / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n\n  return extent;\n}","map":{"version":3,"names":["TileGrid","DEFAULT_MAX_ZOOM","DEFAULT_TILE_SIZE","METERS_PER_UNIT","get","getProjection","containsCoordinate","createOrUpdate","getCorner","getHeight","getWidth","toSize","getForProjection","projection","tileGrid","getDefaultTileGrid","createForProjection","setDefaultTileGrid","wrapX","tileCoord","z","center","getTileCoordCenter","projectionExtent","extentFromProjection","worldWidth","worldsAway","Math","ceil","getTileCoordForCoordAndZ","createForExtent","extent","maxZoom","tileSize","corner","undefined","resolutions","resolutionsFromExtent","origin","createXYZ","options","xyzOptions","getExtent","gridOptions","minZoom","maxResolution","height","width","max","length","Array","pow","half","degrees","getMetersPerUnit"],"sources":["D:/Work/Learning/demo/node_modules/ol/tilegrid.js"],"sourcesContent":["/**\n * @module ol/tilegrid\n */\nimport TileGrid from './tilegrid/TileGrid.js';\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {METERS_PER_UNIT, get as getProjection} from './proj.js';\nimport {\n  containsCoordinate,\n  createOrUpdate,\n  getCorner,\n  getHeight,\n  getWidth,\n} from './extent.js';\nimport {toSize} from './size.js';\n\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil(\n      (projectionExtent[0] - center[0]) / worldWidth\n    );\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n}\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\n  corner = corner !== undefined ? corner : 'top-left';\n\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\n\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: tileSize,\n  });\n}\n\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(options) {\n  const xyzOptions = options || {};\n\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(\n      extent,\n      xyzOptions.maxZoom,\n      xyzOptions.tileSize,\n      xyzOptions.maxResolution\n    ),\n  };\n  return new TileGrid(gridOptions);\n}\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\n\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n\n  maxResolution =\n    maxResolution > 0\n      ? maxResolution\n      : Math.max(width / tileSize[0], height / tileSize[1]);\n\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, maxZoom, tileSize, corner);\n}\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half =\n      (180 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}