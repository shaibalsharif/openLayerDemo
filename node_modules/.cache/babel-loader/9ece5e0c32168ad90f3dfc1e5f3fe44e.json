{"ast":null,"code":"/**\n * @module ol/geom/flat/orient\n */\nimport { coordinates as reverseCoordinates } from './reverse.js';\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\n\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n  let edge = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n\n  return edge === 0 ? undefined : edge > 0;\n}\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\n\nexport function linearRingsAreOriented(flatCoordinates, offset, ends, stride, right) {\n  right = right !== undefined ? right : false;\n\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);\n\n    if (i === 0) {\n      if (right && isClockwise || !right && !isClockwise) {\n        return false;\n      }\n    } else {\n      if (right && !isClockwise || !right && isClockwise) {\n        return false;\n      }\n    }\n\n    offset = end;\n  }\n\n  return true;\n}\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\n\nexport function linearRingssAreOriented(flatCoordinates, offset, endss, stride, right) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n\n    if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, right)) {\n      return false;\n    }\n\n    if (ends.length) {\n      offset = ends[ends.length - 1];\n    }\n  }\n\n  return true;\n}\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\n\nexport function orientLinearRings(flatCoordinates, offset, ends, stride, right) {\n  right = right !== undefined ? right : false;\n\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);\n    const reverse = i === 0 ? right && isClockwise || !right && !isClockwise : right && !isClockwise || !right && isClockwise;\n\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n\n    offset = end;\n  }\n\n  return offset;\n}\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\n\nexport function orientLinearRingsArray(flatCoordinates, offset, endss, stride, right) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(flatCoordinates, offset, endss[i], stride, right);\n  }\n\n  return offset;\n}\n/**\n * Return a two-dimensional endss\n * @param {Array<number>} flatCoordinates Flat coordinates\n * @param {Array<number>} ends Linear ring end indexes\n * @return {Array<Array<number>>} Two dimensional endss array that can\n * be used to contruct a MultiPolygon\n */\n\nexport function inflateEnds(flatCoordinates, ends) {\n  const endss = [];\n  let offset = 0;\n  let prevEndIndex = 0;\n\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i]; // classifies an array of rings into polygons with outer rings and holes\n\n    if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {\n      endss.push(ends.slice(prevEndIndex, i + 1));\n    } else {\n      if (endss.length === 0) {\n        continue;\n      }\n\n      endss[endss.length - 1].push(ends[prevEndIndex]);\n    }\n\n    prevEndIndex = i + 1;\n    offset = end;\n  }\n\n  return endss;\n}","map":{"version":3,"names":["coordinates","reverseCoordinates","linearRingIsClockwise","flatCoordinates","offset","end","stride","edge","x1","y1","x2","y2","undefined","linearRingsAreOriented","ends","right","i","ii","length","isClockwise","linearRingssAreOriented","endss","orientLinearRings","reverse","orientLinearRingsArray","inflateEnds","prevEndIndex","push","slice"],"sources":["D:/Work/Learning/demo/node_modules/ol/geom/flat/orient.js"],"sourcesContent":["/**\n * @module ol/geom/flat/orient\n */\nimport {coordinates as reverseCoordinates} from './reverse.js';\n\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n  let edge = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge === 0 ? undefined : edge > 0;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride\n    );\n    if (i === 0) {\n      if ((right && isClockwise) || (!right && !isClockwise)) {\n        return false;\n      }\n    } else {\n      if ((right && !isClockwise) || (!right && isClockwise)) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingssAreOriented(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, right)) {\n      return false;\n    }\n    if (ends.length) {\n      offset = ends[ends.length - 1];\n    }\n  }\n  return true;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride\n    );\n    const reverse =\n      i === 0\n        ? (right && isClockwise) || (!right && !isClockwise)\n        : (right && !isClockwise) || (!right && isClockwise);\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(\n      flatCoordinates,\n      offset,\n      endss[i],\n      stride,\n      right\n    );\n  }\n  return offset;\n}\n\n/**\n * Return a two-dimensional endss\n * @param {Array<number>} flatCoordinates Flat coordinates\n * @param {Array<number>} ends Linear ring end indexes\n * @return {Array<Array<number>>} Two dimensional endss array that can\n * be used to contruct a MultiPolygon\n */\nexport function inflateEnds(flatCoordinates, ends) {\n  const endss = [];\n  let offset = 0;\n  let prevEndIndex = 0;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    // classifies an array of rings into polygons with outer rings and holes\n    if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {\n      endss.push(ends.slice(prevEndIndex, i + 1));\n    } else {\n      if (endss.length === 0) {\n        continue;\n      }\n      endss[endss.length - 1].push(ends[prevEndIndex]);\n    }\n    prevEndIndex = i + 1;\n    offset = end;\n  }\n  return endss;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}