{"ast":null,"code":"/**\n * @module ol/control/OverviewMap\n */\nimport Collection from '../Collection.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport Map from '../Map.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter } from '../extent.js';\nimport { listen, listenOnce } from '../events.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { replaceNode } from '../dom.js';\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\n\nconst MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\n\nconst MIN_RATIO = 0.1;\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\n\nclass OverviewMap extends Control {\n  /**\n   * @param {Options} [options] OverviewMap options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    });\n    /**\n     * @private\n     */\n\n    this.boundHandleRotationChanged_ = this.handleRotationChanged_.bind(this);\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n\n    this.rotateWithView_ = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n\n    this.viewExtent_ = undefined;\n    const className = options.className !== undefined ? options.className : 'ol-overviewmap';\n    const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n    const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : '\\u203A';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    button.addEventListener(EventType.CLICK, this.handleClick_.bind(this), false);\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n\n    this.ovmapDiv_ = document.createElement('div');\n    this.ovmapDiv_.className = 'ol-overviewmap-map';\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n\n    this.view_ = options.view;\n    const ovmap = new Map({\n      view: options.view,\n      controls: new Collection(),\n      interactions: new Collection()\n    });\n    /**\n     * @type {Map}\n     * @private\n     */\n\n    this.ovmap_ = ovmap;\n\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n\n    const box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n\n    this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: 'center-center',\n      element: box\n    });\n    this.ovmap_.addOverlay(this.boxOverlay_);\n    const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ovmapDiv_);\n    element.appendChild(button);\n    /* Interactive map */\n\n    const scope = this;\n    const overlay = this.boxOverlay_;\n    const overlayBox = this.boxOverlay_.getElement();\n    /* Functions definition */\n\n    const computeDesiredMousePosition = function (mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY\n      };\n    };\n\n    const move = function (event) {\n      const position =\n      /** @type {?} */\n      computeDesiredMousePosition(event);\n      const coordinates = ovmap.getEventCoordinateInternal(\n      /** @type {MouseEvent} */\n      position);\n      overlay.setPosition(coordinates);\n    };\n\n    const endMoving = function (event) {\n      const coordinates = ovmap.getEventCoordinateInternal(event);\n      scope.getMap().getView().setCenterInternal(coordinates);\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n    /* Binding */\n\n\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n  }\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n\n\n  setMap(map) {\n    const oldMap = this.getMap();\n\n    if (map === oldMap) {\n      return;\n    }\n\n    if (oldMap) {\n      const oldView = oldMap.getView();\n\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n\n      this.ovmap_.setTarget(null);\n    }\n\n    super.setMap(map);\n\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n      const view = map.getView();\n\n      if (view) {\n        this.bindView_(view);\n\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n\n      if (!this.ovmap_.isRendered()) {\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n  }\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n\n\n  handleMapPropertyChange_(event) {\n    if (event.key === MapProperty.VIEW) {\n      const oldView =\n      /** @type {import(\"../View.js\").default} */\n      event.oldValue;\n\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n\n      const newView = this.getMap().getView();\n      this.bindView_(newView);\n    } else if (!this.ovmap_.isRendered() && (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)) {\n      this.ovmap_.updateSize();\n    }\n  }\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n\n\n  bindView_(view) {\n    if (!this.view_) {\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\n      const newView = new View({\n        projection: view.getProjection()\n      });\n      this.ovmap_.setView(newView);\n    }\n\n    view.addChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_); // Sync once with the new view\n\n    this.handleRotationChanged_();\n  }\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n\n\n  unbindView_(view) {\n    view.removeChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n  }\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n\n\n  handleRotationChanged_() {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  }\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n\n\n  validateExtent_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize =\n    /** @type {import(\"../size.js\").Size} */\n    map.getSize();\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n\n    this.viewExtent_ = extent;\n    const ovmapSize =\n    /** @type {import(\"../size.js\").Size} */\n    ovmap.getSize();\n    const ovview = ovmap.getView();\n    const ovextent = ovview.calculateExtentInternal(ovmapSize);\n    const topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n    const bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n    const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n    const ovmapWidth = ovmapSize[0];\n    const ovmapHeight = ovmapSize[1];\n\n    if (boxWidth < ovmapWidth * MIN_RATIO || boxHeight < ovmapHeight * MIN_RATIO || boxWidth > ovmapWidth * MAX_RATIO || boxHeight > ovmapHeight * MAX_RATIO) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  }\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n\n\n  resetExtent_() {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n    const mapSize =\n    /** @type {import(\"../size.js\").Size} */\n    map.getSize();\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n    const ovview = ovmap.getView(); // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n\n    const steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  }\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n\n\n  recenter_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n    const view = map.getView();\n    const ovview = ovmap.getView();\n    ovview.setCenterInternal(view.getCenterInternal());\n  }\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n\n\n  updateBox_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize =\n    /** @type {import(\"../size.js\").Size} */\n    map.getSize();\n    const view = map.getView();\n    const ovview = ovmap.getView();\n    const rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n    const overlay = this.boxOverlay_;\n    const box = this.boxOverlay_.getElement();\n    const center = view.getCenterInternal();\n    const resolution = view.getResolution();\n    const ovresolution = ovview.getResolution();\n    const width = mapSize[0] * resolution / ovresolution;\n    const height = mapSize[1] * resolution / ovresolution; // set position using center coordinates\n\n    overlay.setPosition(center); // set box size calculated from map extent size and overview map resolution\n\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      const transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  updateBoxAfterOvmapIsRendered_() {\n    if (this.ovmapPostrenderKey_) {\n      return;\n    }\n\n    this.ovmapPostrenderKey_ = listenOnce(this.ovmap_, MapEventType.POSTRENDER, function (event) {\n      delete this.ovmapPostrenderKey_;\n      this.updateBox_();\n    }, this);\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  }\n  /**\n   * @private\n   */\n\n\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n\n    this.collapsed_ = !this.collapsed_; // manage overview map if it had not been rendered before and control\n    // is expanded\n\n    const ovmap = this.ovmap_;\n\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n\n      ovmap.updateSize();\n      this.resetExtent_();\n      this.updateBoxAfterOvmapIsRendered_();\n    }\n  }\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n\n\n  getCollapsible() {\n    return this.collapsible_;\n  }\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n\n\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  }\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n\n\n  setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n\n    this.handleToggle_();\n  }\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n\n\n  getCollapsed() {\n    return this.collapsed_;\n  }\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n\n\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n\n\n  setRotateWithView(rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n\n    this.rotateWithView_ = rotateWithView;\n\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  }\n  /**\n   * Return the overview map.\n   * @return {import(\"../Map.js\").default} Overview map.\n   * @api\n   */\n\n\n  getOverviewMap() {\n    return this.ovmap_;\n  }\n  /**\n   * Update the overview map element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n\n\n  render(mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n  }\n\n}\n\nexport default OverviewMap;","map":{"version":3,"names":["Collection","Control","EventType","Map","MapEventType","MapProperty","ObjectEventType","Overlay","View","ViewProperty","CLASS_COLLAPSED","CLASS_CONTROL","CLASS_UNSELECTABLE","containsExtent","equals","equalsExtent","getBottomRight","getTopLeft","scaleFromCenter","listen","listenOnce","fromExtent","polygonFromExtent","replaceNode","MAX_RATIO","MIN_RATIO","OverviewMap","constructor","options","element","document","createElement","render","target","boundHandleRotationChanged_","handleRotationChanged_","bind","collapsed_","collapsed","undefined","collapsible_","collapsible","rotateWithView_","rotateWithView","viewExtent_","className","tipLabel","collapseLabel","collapseLabel_","textContent","label","label_","activeLabel","button","setAttribute","title","appendChild","addEventListener","CLICK","handleClick_","ovmapDiv_","view_","view","ovmap","controls","interactions","ovmap_","layers","forEach","layer","addLayer","box","style","boxSizing","boxOverlay_","position","positioning","addOverlay","cssClasses","scope","overlay","overlayBox","getElement","computeDesiredMousePosition","mousePosition","clientX","clientY","move","event","coordinates","getEventCoordinateInternal","setPosition","endMoving","getMap","getView","setCenterInternal","window","removeEventListener","setMap","map","oldMap","oldView","unbindView_","setTarget","listenerKeys","push","PROPERTYCHANGE","handleMapPropertyChange_","bindView_","isDef","updateSize","resetExtent_","isRendered","updateBoxAfterOvmapIsRendered_","key","VIEW","oldValue","newView","TARGET","SIZE","projection","getProjection","setView","addChangeListener","ROTATION","removeChangeListener","setRotation","getRotation","validateExtent_","mapSize","getSize","extent","calculateExtentInternal","ovmapSize","ovview","ovextent","topLeftPixel","getPixelFromCoordinateInternal","bottomRightPixel","boxWidth","Math","abs","boxHeight","ovmapWidth","ovmapHeight","recenter_","steps","log","LN2","ratio","pow","fitInternal","getCenterInternal","updateBox_","rotation","center","resolution","getResolution","ovresolution","width","height","transform","ovmapPostrenderKey_","POSTRENDER","preventDefault","handleToggle_","classList","toggle","getCollapsible","setCollapsible","setCollapsed","getCollapsed","getRotateWithView","setRotateWithView","getOverviewMap","mapEvent"],"sources":["D:/Work/Learning/demo/node_modules/ol/control/OverviewMap.js"],"sourcesContent":["/**\n * @module ol/control/OverviewMap\n */\nimport Collection from '../Collection.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport Map from '../Map.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {\n  containsExtent,\n  equals as equalsExtent,\n  getBottomRight,\n  getTopLeft,\n  scaleFromCenter,\n} from '../extent.js';\nimport {listen, listenOnce} from '../events.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport {replaceNode} from '../dom.js';\n\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nconst MAX_RATIO = 0.75;\n\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nconst MIN_RATIO = 0.1;\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nclass OverviewMap extends Control {\n  /**\n   * @param {Options} [options] OverviewMap options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    /**\n     * @private\n     */\n    this.boundHandleRotationChanged_ = this.handleRotationChanged_.bind(this);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.collapsed_ =\n      options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ =\n      options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    this.viewExtent_ = undefined;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-overviewmap';\n\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n\n    const collapseLabel =\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : '\\u203A';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel =\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    this.ovmapDiv_ = document.createElement('div');\n    this.ovmapDiv_.className = 'ol-overviewmap-map';\n\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n    this.view_ = options.view;\n\n    const ovmap = new Map({\n      view: options.view,\n      controls: new Collection(),\n      interactions: new Collection(),\n    });\n\n    /**\n     * @type {Map}\n     * @private\n     */\n    this.ovmap_ = ovmap;\n\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n\n    const box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n    this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: 'center-center',\n      element: box,\n    });\n    this.ovmap_.addOverlay(this.boxOverlay_);\n\n    const cssClasses =\n      className +\n      ' ' +\n      CLASS_UNSELECTABLE +\n      ' ' +\n      CLASS_CONTROL +\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ovmapDiv_);\n    element.appendChild(button);\n\n    /* Interactive map */\n\n    const scope = this;\n\n    const overlay = this.boxOverlay_;\n    const overlayBox = this.boxOverlay_.getElement();\n\n    /* Functions definition */\n\n    const computeDesiredMousePosition = function (mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY,\n      };\n    };\n\n    const move = function (event) {\n      const position = /** @type {?} */ (computeDesiredMousePosition(event));\n      const coordinates = ovmap.getEventCoordinateInternal(\n        /** @type {MouseEvent} */ (position)\n      );\n\n      overlay.setPosition(coordinates);\n    };\n\n    const endMoving = function (event) {\n      const coordinates = ovmap.getEventCoordinateInternal(event);\n\n      scope.getMap().getView().setCenterInternal(coordinates);\n\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n\n    /* Binding */\n\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (map === oldMap) {\n      return;\n    }\n    if (oldMap) {\n      const oldView = oldMap.getView();\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      this.ovmap_.setTarget(null);\n    }\n    super.setMap(map);\n\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(\n        listen(\n          map,\n          ObjectEventType.PROPERTYCHANGE,\n          this.handleMapPropertyChange_,\n          this\n        )\n      );\n\n      const view = map.getView();\n      if (view) {\n        this.bindView_(view);\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n\n      if (!this.ovmap_.isRendered()) {\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n  }\n\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n  handleMapPropertyChange_(event) {\n    if (event.key === MapProperty.VIEW) {\n      const oldView = /** @type {import(\"../View.js\").default} */ (\n        event.oldValue\n      );\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      const newView = this.getMap().getView();\n      this.bindView_(newView);\n    } else if (\n      !this.ovmap_.isRendered() &&\n      (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)\n    ) {\n      this.ovmap_.updateSize();\n    }\n  }\n\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  bindView_(view) {\n    if (!this.view_) {\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\n      const newView = new View({\n        projection: view.getProjection(),\n      });\n      this.ovmap_.setView(newView);\n    }\n\n    view.addChangeListener(\n      ViewProperty.ROTATION,\n      this.boundHandleRotationChanged_\n    );\n    // Sync once with the new view\n    this.handleRotationChanged_();\n  }\n\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  unbindView_(view) {\n    view.removeChangeListener(\n      ViewProperty.ROTATION,\n      this.boundHandleRotationChanged_\n    );\n  }\n\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n  handleRotationChanged_() {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  }\n\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n  validateExtent_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n    this.viewExtent_ = extent;\n\n    const ovmapSize = /** @type {import(\"../size.js\").Size} */ (\n      ovmap.getSize()\n    );\n\n    const ovview = ovmap.getView();\n    const ovextent = ovview.calculateExtentInternal(ovmapSize);\n\n    const topLeftPixel = ovmap.getPixelFromCoordinateInternal(\n      getTopLeft(extent)\n    );\n    const bottomRightPixel = ovmap.getPixelFromCoordinateInternal(\n      getBottomRight(extent)\n    );\n\n    const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n\n    const ovmapWidth = ovmapSize[0];\n    const ovmapHeight = ovmapSize[1];\n\n    if (\n      boxWidth < ovmapWidth * MIN_RATIO ||\n      boxHeight < ovmapHeight * MIN_RATIO ||\n      boxWidth > ovmapWidth * MAX_RATIO ||\n      boxHeight > ovmapHeight * MAX_RATIO\n    ) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  }\n\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n  resetExtent_() {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    const ovview = ovmap.getView();\n\n    // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n    const steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  }\n\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n  recenter_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    ovview.setCenterInternal(view.getCenterInternal());\n  }\n\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n  updateBox_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    const rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n\n    const overlay = this.boxOverlay_;\n    const box = this.boxOverlay_.getElement();\n    const center = view.getCenterInternal();\n    const resolution = view.getResolution();\n    const ovresolution = ovview.getResolution();\n    const width = (mapSize[0] * resolution) / ovresolution;\n    const height = (mapSize[1] * resolution) / ovresolution;\n\n    // set position using center coordinates\n    overlay.setPosition(center);\n\n    // set box size calculated from map extent size and overview map resolution\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      const transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  }\n\n  /**\n   * @private\n   */\n  updateBoxAfterOvmapIsRendered_() {\n    if (this.ovmapPostrenderKey_) {\n      return;\n    }\n    this.ovmapPostrenderKey_ = listenOnce(\n      this.ovmap_,\n      MapEventType.POSTRENDER,\n      function (event) {\n        delete this.ovmapPostrenderKey_;\n        this.updateBox_();\n      },\n      this\n    );\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n\n    // manage overview map if it had not been rendered before and control\n    // is expanded\n    const ovmap = this.ovmap_;\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n      ovmap.updateSize();\n      this.resetExtent_();\n      this.updateBoxAfterOvmapIsRendered_();\n    }\n  }\n\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n    this.rotateWithView_ = rotateWithView;\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  }\n\n  /**\n   * Return the overview map.\n   * @return {import(\"../Map.js\").default} Overview map.\n   * @api\n   */\n  getOverviewMap() {\n    return this.ovmap_;\n  }\n\n  /**\n   * Update the overview map element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n  }\n}\n\nexport default OverviewMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}