{"ast":null,"code":"/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport { listen, listenOnce, unlistenByKey } from './events.js';\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */\n\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */\n\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n\n/***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\n\nclass Observable extends EventTarget {\n  constructor() {\n    super();\n    this.on =\n    /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */\n    this.onInternal;\n    this.once =\n    /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */\n    this.onceInternal;\n    this.un =\n    /** @type {ObservableOnSignature<void>} */\n    this.unInternal;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.revision_ = 0;\n  }\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n\n\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n\n\n  getRevision() {\n    return this.revision_;\n  }\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n\n\n  onInternal(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n\n      return keys;\n    } else {\n      return listen(this,\n      /** @type {string} */\n      type, listener);\n    }\n  }\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n\n\n  onceInternal(type, listener) {\n    let key;\n\n    if (Array.isArray(type)) {\n      const len = type.length;\n      key = new Array(len);\n\n      for (let i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this,\n      /** @type {string} */\n      type, listener);\n    }\n    /** @type {Object} */\n\n\n    listener.ol_key = key;\n    return key;\n  }\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @protected\n   */\n\n\n  unInternal(type, listener) {\n    const key =\n    /** @type {Object} */\n    listener.ol_key;\n\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  }\n\n}\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\n\n\nObservable.prototype.on;\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\n\nObservable.prototype.once;\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\n\nObservable.prototype.un;\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\n\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(\n    /** @type {import(\"./events.js\").EventsKey} */\n    key);\n  }\n}\nexport default Observable;","map":{"version":3,"names":["EventTarget","EventType","listen","listenOnce","unlistenByKey","Observable","constructor","on","onInternal","once","onceInternal","un","unInternal","revision_","changed","dispatchEvent","CHANGE","getRevision","type","listener","Array","isArray","len","length","keys","i","key","ol_key","unByKey","ii","removeEventListener","prototype"],"sources":["D:/Work/Learning/demo/node_modules/ol/Observable.js"],"sourcesContent":["/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport {listen, listenOnce, unlistenByKey} from './events.js';\n\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */\n\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */\n\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n\n/***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n    super();\n\n    this.on =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onInternal\n      );\n\n    this.once =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onceInternal\n      );\n\n    this.un = /** @type {ObservableOnSignature<void>} */ (this.unInternal);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onInternal(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listen(this, /** @type {string} */ (type), listener);\n    }\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onceInternal(type, listener) {\n    let key;\n    if (Array.isArray(type)) {\n      const len = type.length;\n      key = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this, /** @type {string} */ (type), listener);\n    }\n    /** @type {Object} */ (listener).ol_key = key;\n    return key;\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @protected\n   */\n  unInternal(type, listener) {\n    const key = /** @type {Object} */ (listener).ol_key;\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  }\n}\n\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.on;\n\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.once;\n\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\nObservable.prototype.un;\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\nexport default Observable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}