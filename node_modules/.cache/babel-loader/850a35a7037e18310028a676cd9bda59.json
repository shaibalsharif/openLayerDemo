{"ast":null,"code":"/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\n\nexport const RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */\n\nexport const HALF_SIZE = Math.PI * RADIUS;\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\n\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\n\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\n\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\n\nclass EPSG3857Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: 'm',\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / Math.cosh(point[1] / RADIUS);\n      }\n    });\n  }\n\n}\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\n\n\nexport const PROJECTIONS = [new EPSG3857Projection('EPSG:3857'), new EPSG3857Projection('EPSG:102100'), new EPSG3857Projection('EPSG:102113'), new EPSG3857Projection('EPSG:900913'), new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'), new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\n\nexport function fromEPSG4326(input, output, dimension) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = HALF_SIZE * input[i] / 180;\n    let y = RADIUS * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));\n\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n\n    output[i + 1] = y;\n  }\n\n  return output;\n}\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\n\nexport function toEPSG4326(input, output, dimension) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n\n  return output;\n}","map":{"version":3,"names":["Projection","RADIUS","HALF_SIZE","Math","PI","EXTENT","WORLD_EXTENT","MAX_SAFE_Y","log","tan","EPSG3857Projection","constructor","code","units","extent","global","worldExtent","getPointResolution","resolution","point","cosh","PROJECTIONS","fromEPSG4326","input","output","dimension","length","undefined","slice","Array","i","y","toEPSG4326","atan","exp"],"sources":["D:/Work/Learning/demo/node_modules/ol/proj/epsg3857.js"],"sourcesContent":["/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\nexport const HALF_SIZE = Math.PI * RADIUS;\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nclass EPSG3857Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: 'm',\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / Math.cosh(point[1] / RADIUS);\n      },\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, output, dimension) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = (HALF_SIZE * input[i]) / 180;\n    let y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, output, dimension) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = (180 * input[i]) / HALF_SIZE;\n    output[i + 1] =\n      (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n  }\n  return output;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}