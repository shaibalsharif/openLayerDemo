{"ast":null,"code":"/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { replaceNode } from '../dom.js';\nconst events = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];\n/**\n * @enum {string}\n */\n\nconst FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen'\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\n\nclass FullScreen extends Control {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      element: document.createElement('div'),\n      target: options.target\n    });\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n\n    this.un;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.keys_ = options.keys !== undefined ? options.keys : false;\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n\n    this.source_ = options.source;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.isInFullscreen_ = false;\n    /**\n     * @private\n     */\n\n    this.boundHandleMapTargetChange_ = this.handleMapTargetChange_.bind(this);\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.cssClassName_ = options.className !== undefined ? options.className : 'ol-full-screen';\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n\n    this.documentListeners_ = [];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    this.activeClassName_ = options.activeClassName !== undefined ? options.activeClassName.split(' ') : [this.cssClassName_ + '-true'];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    this.inactiveClassName_ = options.inactiveClassName !== undefined ? options.inactiveClassName.split(' ') : [this.cssClassName_ + '-false'];\n    const label = options.label !== undefined ? options.label : '\\u2922';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n\n    this.labelNode_ = typeof label === 'string' ? document.createTextNode(label) : label;\n    const labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n\n    this.labelActiveNode_ = typeof labelActive === 'string' ? document.createTextNode(labelActive) : labelActive;\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    this.button_ = document.createElement('button');\n    this.button_.title = tipLabel;\n    this.button_.setAttribute('type', 'button');\n    this.button_.appendChild(this.labelNode_);\n    this.button_.addEventListener(EventType.CLICK, this.handleClick_.bind(this), false);\n    this.setClassName_(this.button_, this.isInFullscreen_);\n    this.element.className = `${this.cssClassName_} ${CLASS_UNSELECTABLE} ${CLASS_CONTROL}`;\n    this.element.appendChild(this.button_);\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  }\n  /**\n   * @private\n   */\n\n\n  handleFullScreen_() {\n    const map = this.getMap();\n\n    if (!map) {\n      return;\n    }\n\n    const doc = map.getOwnerDocument();\n\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      let element;\n\n      if (this.source_) {\n        element = typeof this.source_ === 'string' ? doc.getElementById(this.source_) : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  handleFullScreenChange_() {\n    const map = this.getMap();\n\n    if (!map) {\n      return;\n    }\n\n    const wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n\n      map.updateSize();\n    }\n  }\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n\n\n  setClassName_(element, fullscreen) {\n    if (fullscreen) {\n      element.classList.remove(...this.inactiveClassName_);\n      element.classList.add(...this.activeClassName_);\n    } else {\n      element.classList.remove(...this.activeClassName_);\n      element.classList.add(...this.inactiveClassName_);\n    }\n  }\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n\n\n  setMap(map) {\n    const oldMap = this.getMap();\n\n    if (oldMap) {\n      oldMap.removeChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n\n    super.setMap(map);\n    this.handleMapTargetChange_();\n\n    if (map) {\n      map.addChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  handleMapTargetChange_() {\n    const listeners = this.documentListeners_;\n\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n\n    listeners.length = 0;\n    const map = this.getMap();\n\n    if (map) {\n      const doc = map.getOwnerDocument();\n\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n\n      for (let i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(listen(doc, events[i], this.handleFullScreenChange_, this));\n      }\n\n      this.handleFullScreenChange_();\n    }\n  }\n\n}\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\n\n\nfunction isFullScreenSupported(doc) {\n  const body = doc.body;\n  return !!(body['webkitRequestFullscreen'] || body.requestFullscreen && doc.fullscreenEnabled);\n}\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\n\n\nfunction isFullScreen(doc) {\n  return !!(doc['webkitIsFullScreen'] || doc.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\n\n\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\n\nexport default FullScreen;","map":{"version":3,"names":["Control","EventType","MapProperty","CLASS_CONTROL","CLASS_UNSELECTABLE","CLASS_UNSUPPORTED","listen","unlistenByKey","replaceNode","events","FullScreenEventType","ENTERFULLSCREEN","LEAVEFULLSCREEN","FullScreen","constructor","options","element","document","createElement","target","on","once","un","keys_","keys","undefined","source_","source","isInFullscreen_","boundHandleMapTargetChange_","handleMapTargetChange_","bind","cssClassName_","className","documentListeners_","activeClassName_","activeClassName","split","inactiveClassName_","inactiveClassName","label","labelNode_","createTextNode","labelActive","labelActiveNode_","tipLabel","button_","title","setAttribute","appendChild","addEventListener","CLICK","handleClick_","setClassName_","event","preventDefault","handleFullScreen_","map","getMap","doc","getOwnerDocument","isFullScreenSupported","isFullScreen","exitFullScreen","getElementById","getTargetElement","requestFullScreenWithKeys","requestFullScreen","handleFullScreenChange_","wasInFullscreen","dispatchEvent","updateSize","fullscreen","classList","remove","add","setMap","oldMap","removeChangeListener","TARGET","addChangeListener","listeners","i","ii","length","push","body","requestFullscreen","fullscreenEnabled","fullscreenElement","exitFullscreen"],"sources":["D:/Work/Learning/demo/node_modules/ol/control/FullScreen.js"],"sourcesContent":["/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED} from '../css.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {replaceNode} from '../dom.js';\n\nconst events = [\n  'fullscreenchange',\n  'webkitfullscreenchange',\n  'MSFullscreenChange',\n];\n\n/**\n * @enum {string}\n */\nconst FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen',\n};\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nclass FullScreen extends Control {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.keys_ = options.keys !== undefined ? options.keys : false;\n\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n    this.source_ = options.source;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.isInFullscreen_ = false;\n\n    /**\n     * @private\n     */\n    this.boundHandleMapTargetChange_ = this.handleMapTargetChange_.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.cssClassName_ =\n      options.className !== undefined ? options.className : 'ol-full-screen';\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.documentListeners_ = [];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.activeClassName_ =\n      options.activeClassName !== undefined\n        ? options.activeClassName.split(' ')\n        : [this.cssClassName_ + '-true'];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.inactiveClassName_ =\n      options.inactiveClassName !== undefined\n        ? options.inactiveClassName.split(' ')\n        : [this.cssClassName_ + '-false'];\n\n    const label = options.label !== undefined ? options.label : '\\u2922';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelNode_ =\n      typeof label === 'string' ? document.createTextNode(label) : label;\n\n    const labelActive =\n      options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelActiveNode_ =\n      typeof labelActive === 'string'\n        ? document.createTextNode(labelActive)\n        : labelActive;\n\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.button_ = document.createElement('button');\n    this.button_.title = tipLabel;\n    this.button_.setAttribute('type', 'button');\n    this.button_.appendChild(this.labelNode_);\n    this.button_.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n    this.setClassName_(this.button_, this.isInFullscreen_);\n\n    this.element.className = `${this.cssClassName_} ${CLASS_UNSELECTABLE} ${CLASS_CONTROL}`;\n    this.element.appendChild(this.button_);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreen_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const doc = map.getOwnerDocument();\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      let element;\n      if (this.source_) {\n        element =\n          typeof this.source_ === 'string'\n            ? doc.getElementById(this.source_)\n            : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreenChange_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n      map.updateSize();\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n  setClassName_(element, fullscreen) {\n    if (fullscreen) {\n      element.classList.remove(...this.inactiveClassName_);\n      element.classList.add(...this.activeClassName_);\n    } else {\n      element.classList.remove(...this.activeClassName_);\n      element.classList.add(...this.inactiveClassName_);\n    }\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (oldMap) {\n      oldMap.removeChangeListener(\n        MapProperty.TARGET,\n        this.boundHandleMapTargetChange_\n      );\n    }\n\n    super.setMap(map);\n\n    this.handleMapTargetChange_();\n    if (map) {\n      map.addChangeListener(\n        MapProperty.TARGET,\n        this.boundHandleMapTargetChange_\n      );\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleMapTargetChange_() {\n    const listeners = this.documentListeners_;\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n    listeners.length = 0;\n\n    const map = this.getMap();\n    if (map) {\n      const doc = map.getOwnerDocument();\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n\n      for (let i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(\n          listen(doc, events[i], this.handleFullScreenChange_, this)\n        );\n      }\n      this.handleFullScreenChange_();\n    }\n  }\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n  const body = doc.body;\n  return !!(\n    body['webkitRequestFullscreen'] ||\n    (body.requestFullscreen && doc.fullscreenEnabled)\n  );\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n  return !!(doc['webkitIsFullScreen'] || doc.fullscreenElement);\n}\n\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\n\nexport default FullScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}