{"ast":null,"code":"/**\n * @module ol/interaction/Pointer\n */\nimport Interaction from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\n\nclass PointerInteraction extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super(\n    /** @type {import(\"./Interaction.js\").InteractionOptions} */\n    options);\n\n    if (options.handleDownEvent) {\n      this.handleDownEvent = options.handleDownEvent;\n    }\n\n    if (options.handleDragEvent) {\n      this.handleDragEvent = options.handleDragEvent;\n    }\n\n    if (options.handleMoveEvent) {\n      this.handleMoveEvent = options.handleMoveEvent;\n    }\n\n    if (options.handleUpEvent) {\n      this.handleUpEvent = options.handleUpEvent;\n    }\n\n    if (options.stopDown) {\n      this.stopDown = options.stopDown;\n    }\n    /**\n     * @type {boolean}\n     * @protected\n     */\n\n\n    this.handlingDownUpSequence = false;\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n\n    this.targetPointers = [];\n  }\n  /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */\n\n\n  getPointerCount() {\n    return this.targetPointers.length;\n  }\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n\n\n  handleDownEvent(mapBrowserEvent) {\n    return false;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n\n\n  handleDragEvent(mapBrowserEvent) {}\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n\n\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    let stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent); // prevent page scrolling during dragging\n\n        mapBrowserEvent.originalEvent.preventDefault();\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        const handled = this.handleDownEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n\n    return !stopEvent;\n  }\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n\n\n  handleMoveEvent(mapBrowserEvent) {}\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n\n\n  handleUpEvent(mapBrowserEvent) {\n    return false;\n  }\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n\n\n  stopDown(handled) {\n    return handled;\n  }\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n\n\n  updateTrackedPointers_(mapBrowserEvent) {\n    if (mapBrowserEvent.activePointers) {\n      this.targetPointers = mapBrowserEvent.activePointers;\n    }\n  }\n\n}\n/**\n * @param {Array<PointerEvent>} pointerEvents List of events.\n * @return {import(\"../pixel.js\").Pixel} Centroid pixel.\n */\n\n\nexport function centroid(pointerEvents) {\n  const length = pointerEvents.length;\n  let clientX = 0;\n  let clientY = 0;\n\n  for (let i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n\n  return [clientX / length, clientY / length];\n}\nexport default PointerInteraction;","map":{"version":3,"names":["Interaction","MapBrowserEventType","PointerInteraction","constructor","options","handleDownEvent","handleDragEvent","handleMoveEvent","handleUpEvent","stopDown","handlingDownUpSequence","targetPointers","getPointerCount","length","mapBrowserEvent","handleEvent","originalEvent","stopEvent","updateTrackedPointers_","type","POINTERDRAG","preventDefault","POINTERUP","handledUp","POINTERDOWN","handled","POINTERMOVE","activePointers","centroid","pointerEvents","clientX","clientY","i"],"sources":["D:/Work/Learning/demo/node_modules/ol/interaction/Pointer.js"],"sourcesContent":["/**\n * @module ol/interaction/Pointer\n */\nimport Interaction from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nclass PointerInteraction extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options)\n    );\n\n    if (options.handleDownEvent) {\n      this.handleDownEvent = options.handleDownEvent;\n    }\n\n    if (options.handleDragEvent) {\n      this.handleDragEvent = options.handleDragEvent;\n    }\n\n    if (options.handleMoveEvent) {\n      this.handleMoveEvent = options.handleMoveEvent;\n    }\n\n    if (options.handleUpEvent) {\n      this.handleUpEvent = options.handleUpEvent;\n    }\n\n    if (options.stopDown) {\n      this.stopDown = options.stopDown;\n    }\n\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    this.handlingDownUpSequence = false;\n\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n    this.targetPointers = [];\n  }\n\n  /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */\n  getPointerCount() {\n    return this.targetPointers.length;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleDownEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleDragEvent(mapBrowserEvent) {}\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    let stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n        // prevent page scrolling during dragging\n        mapBrowserEvent.originalEvent.preventDefault();\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence =\n          handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        const handled = this.handleDownEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n    return !stopEvent;\n  }\n\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleMoveEvent(mapBrowserEvent) {}\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleUpEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n  stopDown(handled) {\n    return handled;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n  updateTrackedPointers_(mapBrowserEvent) {\n    if (mapBrowserEvent.activePointers) {\n      this.targetPointers = mapBrowserEvent.activePointers;\n    }\n  }\n}\n\n/**\n * @param {Array<PointerEvent>} pointerEvents List of events.\n * @return {import(\"../pixel.js\").Pixel} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  const length = pointerEvents.length;\n  let clientX = 0;\n  let clientY = 0;\n  for (let i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return [clientX / length, clientY / length];\n}\n\nexport default PointerInteraction;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}