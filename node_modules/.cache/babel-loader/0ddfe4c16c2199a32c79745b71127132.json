{"ast":null,"code":"/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nclass TileRange {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  constructor(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n    /**\n     * @type {number}\n     */\n\n    this.maxX = maxX;\n    /**\n     * @type {number}\n     */\n\n    this.minY = minY;\n    /**\n     * @type {number}\n     */\n\n    this.maxY = maxY;\n  }\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n\n\n  contains(tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  }\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n\n\n  containsTileRange(tileRange) {\n    return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n  }\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n\n\n  containsXY(x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  }\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n\n\n  equals(tileRange) {\n    return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n  }\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n\n\n  extend(tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  }\n  /**\n   * @return {number} Height.\n   */\n\n\n  getHeight() {\n    return this.maxY - this.minY + 1;\n  }\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n\n\n  getSize() {\n    return [this.getWidth(), this.getHeight()];\n  }\n  /**\n   * @return {number} Width.\n   */\n\n\n  getWidth() {\n    return this.maxX - this.minX + 1;\n  }\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n\n\n  intersects(tileRange) {\n    return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;\n  }\n\n}\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\n\n\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  } else {\n    return new TileRange(minX, maxX, minY, maxY);\n  }\n}\nexport default TileRange;","map":{"version":3,"names":["TileRange","constructor","minX","maxX","minY","maxY","contains","tileCoord","containsXY","containsTileRange","tileRange","x","y","equals","extend","getHeight","getSize","getWidth","intersects","createOrUpdate","undefined"],"sources":["D:/Work/Learning/demo/node_modules/ol/TileRange.js"],"sourcesContent":["/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nclass TileRange {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  constructor(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  contains(tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  containsTileRange(tileRange) {\n    return (\n      this.minX <= tileRange.minX &&\n      tileRange.maxX <= this.maxX &&\n      this.minY <= tileRange.minY &&\n      tileRange.maxY <= this.maxY\n    );\n  }\n\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  containsXY(x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  equals(tileRange) {\n    return (\n      this.minX == tileRange.minX &&\n      this.minY == tileRange.minY &&\n      this.maxX == tileRange.maxX &&\n      this.maxY == tileRange.maxY\n    );\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  extend(tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  }\n\n  /**\n   * @return {number} Height.\n   */\n  getHeight() {\n    return this.maxY - this.minY + 1;\n  }\n\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  getSize() {\n    return [this.getWidth(), this.getHeight()];\n  }\n\n  /**\n   * @return {number} Width.\n   */\n  getWidth() {\n    return this.maxX - this.minX + 1;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  intersects(tileRange) {\n    return (\n      this.minX <= tileRange.maxX &&\n      this.maxX >= tileRange.minX &&\n      this.minY <= tileRange.maxY &&\n      this.maxY >= tileRange.minY\n    );\n  }\n}\n\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  } else {\n    return new TileRange(minX, maxX, minY, maxY);\n  }\n}\n\nexport default TileRange;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}