{"ast":null,"code":"/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\n\nexport const RADIUS = 6378137;\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\n\nexport const EXTENT = [-180, -90, 180, 90];\n/**\n * @const\n * @type {number}\n */\n\nexport const METERS_PER_UNIT = Math.PI * RADIUS / 180;\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\n\nclass EPSG4326Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   * @param {string} [axisOrientation] Axis orientation.\n   */\n  constructor(code, axisOrientation) {\n    super({\n      code: code,\n      units: 'degrees',\n      extent: EXTENT,\n      axisOrientation: axisOrientation,\n      global: true,\n      metersPerUnit: METERS_PER_UNIT,\n      worldExtent: EXTENT\n    });\n  }\n\n}\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\n\n\nexport const PROJECTIONS = [new EPSG4326Projection('CRS:84'), new EPSG4326Projection('EPSG:4326', 'neu'), new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'), new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'), new EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'), new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'), new EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu')];","map":{"version":3,"names":["Projection","RADIUS","EXTENT","METERS_PER_UNIT","Math","PI","EPSG4326Projection","constructor","code","axisOrientation","units","extent","global","metersPerUnit","worldExtent","PROJECTIONS"],"sources":["D:/Work/Learning/demo/node_modules/ol/proj/epsg4326.js"],"sourcesContent":["/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\n\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-180, -90, 180, 90];\n\n/**\n * @const\n * @type {number}\n */\nexport const METERS_PER_UNIT = (Math.PI * RADIUS) / 180;\n\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nclass EPSG4326Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   * @param {string} [axisOrientation] Axis orientation.\n   */\n  constructor(code, axisOrientation) {\n    super({\n      code: code,\n      units: 'degrees',\n      extent: EXTENT,\n      axisOrientation: axisOrientation,\n      global: true,\n      metersPerUnit: METERS_PER_UNIT,\n      worldExtent: EXTENT,\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG4326Projection('CRS:84'),\n  new EPSG4326Projection('EPSG:4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n  new EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),\n  new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n  new EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu'),\n];\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,UAAP,MAAuB,iBAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG,OAAf;AAEP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG,CAAC,CAAC,GAAF,EAAO,CAAC,EAAR,EAAY,GAAZ,EAAiB,EAAjB,CAAf;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAIC,IAAI,CAACC,EAAL,GAAUJ,MAAX,GAAqB,GAA7C;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMK,kBAAN,SAAiCN,UAAjC,CAA4C;EAC1C;AACF;AACA;AACA;EACEO,WAAW,CAACC,IAAD,EAAOC,eAAP,EAAwB;IACjC,MAAM;MACJD,IAAI,EAAEA,IADF;MAEJE,KAAK,EAAE,SAFH;MAGJC,MAAM,EAAET,MAHJ;MAIJO,eAAe,EAAEA,eAJb;MAKJG,MAAM,EAAE,IALJ;MAMJC,aAAa,EAAEV,eANX;MAOJW,WAAW,EAAEZ;IAPT,CAAN;EASD;;AAfyC;AAkB5C;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMa,WAAW,GAAG,CACzB,IAAIT,kBAAJ,CAAuB,QAAvB,CADyB,EAEzB,IAAIA,kBAAJ,CAAuB,WAAvB,EAAoC,KAApC,CAFyB,EAGzB,IAAIA,kBAAJ,CAAuB,+BAAvB,CAHyB,EAIzB,IAAIA,kBAAJ,CAAuB,0BAAvB,CAJyB,EAKzB,IAAIA,kBAAJ,CAAuB,8CAAvB,CALyB,EAMzB,IAAIA,kBAAJ,CAAuB,8CAAvB,EAAuE,KAAvE,CANyB,EAOzB,IAAIA,kBAAJ,CAAuB,4CAAvB,EAAqE,KAArE,CAPyB,CAApB"},"metadata":{},"sourceType":"module"}