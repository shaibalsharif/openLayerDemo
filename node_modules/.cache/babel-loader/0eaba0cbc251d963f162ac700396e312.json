{"ast":null,"code":"/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport { abstract } from '../util.js';\nimport { compose as composeTransform, create as createTransform } from '../transform.js';\nimport { createEmpty, createOrUpdateEmpty, getHeight, returnOrUpdate } from '../extent.js';\nimport { get as getProjection, getTransform } from '../proj.js';\nimport { memoizeOne } from '../functions.js';\nimport { transform2D } from './flat/transform.js';\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\n\nconst tmpTransform = createTransform();\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\n\nclass Geometry extends BaseObject {\n  constructor() {\n    super();\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.extent_ = createEmpty();\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.extentRevision_ = -1;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.simplifiedGeometryRevision = 0;\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n\n    this.simplifyTransformedInternal = memoizeOne(function (revision, squaredTolerance, transform) {\n      if (!transform) {\n        return this.getSimplifiedGeometry(squaredTolerance);\n      }\n\n      const clone = this.clone();\n      clone.applyTransform(transform);\n      return clone.getSimplifiedGeometry(squaredTolerance);\n    });\n  }\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n\n\n  simplifyTransformed(squaredTolerance, transform) {\n    return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, transform);\n  }\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n\n\n  clone() {\n    return abstract();\n  }\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n\n\n  containsXY(x, y) {\n    const coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  }\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n\n\n  getClosestPoint(point, closestPoint) {\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n\n\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n\n\n  computeExtent(extent) {\n    return abstract();\n  }\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n\n\n  getExtent(extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      const extent = this.computeExtent(this.extent_);\n\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n\n      this.extentRevision_ = this.getRevision();\n    }\n\n    return returnOrUpdate(this.extent_, extent);\n  }\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n\n\n  rotate(angle, anchor) {\n    abstract();\n  }\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n\n\n  scale(sx, sy, anchor) {\n    abstract();\n  }\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n\n\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n\n\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */\n\n\n  getType() {\n    return abstract();\n  }\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n\n\n  applyTransform(transformFn) {\n    abstract();\n  }\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n\n\n  intersectsExtent(extent) {\n    return abstract();\n  }\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n\n\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {Geometry} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n\n\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn = sourceProj.getUnits() == 'tile-pixels' ? function (inCoordinates, outCoordinates, stride) {\n      const pixelExtent = sourceProj.getExtent();\n      const projectedExtent = sourceProj.getWorldExtent();\n      const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n      composeTransform(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n      transform2D(inCoordinates, 0, inCoordinates.length, stride, tmpTransform, outCoordinates);\n      return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);\n    } : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n\n}\n\nexport default Geometry;","map":{"version":3,"names":["BaseObject","abstract","compose","composeTransform","create","createTransform","createEmpty","createOrUpdateEmpty","getHeight","returnOrUpdate","get","getProjection","getTransform","memoizeOne","transform2D","tmpTransform","Geometry","constructor","extent_","extentRevision_","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometryRevision","simplifyTransformedInternal","revision","squaredTolerance","transform","getSimplifiedGeometry","clone","applyTransform","simplifyTransformed","getRevision","closestPointXY","x","y","closestPoint","minSquaredDistance","containsXY","coord","getClosestPoint","point","NaN","Infinity","intersectsCoordinate","coordinate","computeExtent","extent","getExtent","isNaN","rotate","angle","anchor","scale","sx","sy","simplify","tolerance","getType","transformFn","intersectsExtent","translate","deltaX","deltaY","source","destination","sourceProj","getUnits","inCoordinates","outCoordinates","stride","pixelExtent","projectedExtent","getWorldExtent","length"],"sources":["D:/Work/Learning/demo/node_modules/ol/geom/Geometry.js"],"sourcesContent":["/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport {abstract} from '../util.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {\n  createEmpty,\n  createOrUpdateEmpty,\n  getHeight,\n  returnOrUpdate,\n} from '../extent.js';\nimport {get as getProjection, getTransform} from '../proj.js';\nimport {memoizeOne} from '../functions.js';\nimport {transform2D} from './flat/transform.js';\n\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nclass Geometry extends BaseObject {\n  constructor() {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryRevision = 0;\n\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    this.simplifyTransformedInternal = memoizeOne(function (\n      revision,\n      squaredTolerance,\n      transform\n    ) {\n      if (!transform) {\n        return this.getSimplifiedGeometry(squaredTolerance);\n      }\n      const clone = this.clone();\n      clone.applyTransform(transform);\n      return clone.getSimplifiedGeometry(squaredTolerance);\n    });\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, transform) {\n    return this.simplifyTransformedInternal(\n      this.getRevision(),\n      squaredTolerance,\n      transform\n    );\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  clone() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  }\n\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  getClosestPoint(point, closestPoint) {\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  getExtent(extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      const extent = this.computeExtent(this.extent_);\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, extent);\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    abstract();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    abstract();\n  }\n\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n  applyTransform(transformFn) {\n    abstract();\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  intersectsExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {Geometry} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn =\n      sourceProj.getUnits() == 'tile-pixels'\n        ? function (inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n            composeTransform(\n              tmpTransform,\n              projectedExtent[0],\n              projectedExtent[3],\n              scale,\n              -scale,\n              0,\n              0,\n              0\n            );\n            transform2D(\n              inCoordinates,\n              0,\n              inCoordinates.length,\n              stride,\n              tmpTransform,\n              outCoordinates\n            );\n            return getTransform(sourceProj, destination)(\n              inCoordinates,\n              outCoordinates,\n              stride\n            );\n          }\n        : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n}\n\nexport default Geometry;\n"],"mappings":"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CF,MAAM,CAAC,CAAD,CAAP,CAA7B,EAA0C;QACxCtC,mBAAmB,CAACsC,MAAD,CAAnB;MACD;;MACD,KAAK1B,eAAL,GAAuB,KAAKW,WAAL,EAAvB;IACD;;IACD,OAAOrB,cAAc,CAAC,KAAKS,OAAN,EAAe2B,MAAf,CAArB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEG,MAAM,CAACC,KAAD,EAAQC,MAAR,EAAgB;IACpBjD,QAAQ;EACT;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEkD,KAAK,CAACC,EAAD,EAAKC,EAAL,EAASH,MAAT,EAAiB;IACpBjD,QAAQ;EACT;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEqD,QAAQ,CAACC,SAAD,EAAY;IAClB,OAAO,KAAK7B,qBAAL,CAA2B6B,SAAS,GAAGA,SAAvC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE7B,qBAAqB,CAACF,gBAAD,EAAmB;IACtC,OAAOvB,QAAQ,EAAf;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEuD,OAAO,GAAG;IACR,OAAOvD,QAAQ,EAAf;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE2B,cAAc,CAAC6B,WAAD,EAAc;IAC1BxD,QAAQ;EACT;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEyD,gBAAgB,CAACb,MAAD,EAAS;IACvB,OAAO5C,QAAQ,EAAf;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE0D,SAAS,CAACC,MAAD,EAASC,MAAT,EAAiB;IACxB5D,QAAQ;EACT;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEwB,SAAS,CAACqC,MAAD,EAASC,WAAT,EAAsB;IAC7B;IACA,MAAMC,UAAU,GAAGrD,aAAa,CAACmD,MAAD,CAAhC;IACA,MAAML,WAAW,GACfO,UAAU,CAACC,QAAX,MAAyB,aAAzB,GACI,UAAUC,aAAV,EAAyBC,cAAzB,EAAyCC,MAAzC,EAAiD;MAC/C,MAAMC,WAAW,GAAGL,UAAU,CAAClB,SAAX,EAApB;MACA,MAAMwB,eAAe,GAAGN,UAAU,CAACO,cAAX,EAAxB;MACA,MAAMpB,KAAK,GAAG3C,SAAS,CAAC8D,eAAD,CAAT,GAA6B9D,SAAS,CAAC6D,WAAD,CAApD;MACAlE,gBAAgB,CACdY,YADc,EAEduD,eAAe,CAAC,CAAD,CAFD,EAGdA,eAAe,CAAC,CAAD,CAHD,EAIdnB,KAJc,EAKd,CAACA,KALa,EAMd,CANc,EAOd,CAPc,EAQd,CARc,CAAhB;MAUArC,WAAW,CACToD,aADS,EAET,CAFS,EAGTA,aAAa,CAACM,MAHL,EAITJ,MAJS,EAKTrD,YALS,EAMToD,cANS,CAAX;MAQA,OAAOvD,YAAY,CAACoD,UAAD,EAAaD,WAAb,CAAZ,CACLG,aADK,EAELC,cAFK,EAGLC,MAHK,CAAP;IAKD,CA5BL,GA6BIxD,YAAY,CAACoD,UAAD,EAAaD,WAAb,CA9BlB;IA+BA,KAAKnC,cAAL,CAAoB6B,WAApB;IACA,OAAO,IAAP;EACD;;AAtS+B;;AAySlC,eAAezC,QAAf"},"metadata":{},"sourceType":"module"}