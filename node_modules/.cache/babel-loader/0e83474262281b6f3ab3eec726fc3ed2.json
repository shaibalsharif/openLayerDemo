{"ast":null,"code":"/**\n * @module ol/Collection\n */\nimport AssertionError from './AssertionError.js';\nimport BaseObject from './Object.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport Event from './events/Event.js';\n/**\n * @enum {string}\n * @private\n */\n\nconst Property = {\n  LENGTH: 'length'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n * @template T\n */\n\nexport class CollectionEvent extends Event {\n  /**\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\n   * @param {T} element Element.\n   * @param {number} index The index of the added or removed element.\n   */\n  constructor(type, element, index) {\n    super(type);\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {T}\n     * @api\n     */\n\n    this.element = element;\n    /**\n     * The index of the added or removed element.\n     * @type {number}\n     * @api\n     */\n\n    this.index = index;\n  }\n\n}\n/***\n * @template T\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\n\nclass Collection extends BaseObject {\n  /**\n   * @param {Array<T>} [array] Array.\n   * @param {Options} [options] Collection options.\n   */\n  constructor(array, options) {\n    super();\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {CollectionOnSignature<T, void>}\n     */\n\n    this.un;\n    options = options || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.unique_ = !!options.unique;\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n\n    this.array_ = array ? array : [];\n\n    if (this.unique_) {\n      for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n        this.assertUnique_(this.array_[i], i);\n      }\n    }\n\n    this.updateLength_();\n  }\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n\n\n  clear() {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  }\n  /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */\n\n\n  extend(arr) {\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n\n    return this;\n  }\n  /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */\n\n\n  forEach(f) {\n    const array = this.array_;\n\n    for (let i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  }\n  /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */\n\n\n  getArray() {\n    return this.array_;\n  }\n  /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */\n\n\n  item(index) {\n    return this.array_[index];\n  }\n  /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */\n\n\n  getLength() {\n    return this.get(Property.LENGTH);\n  }\n  /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n\n\n  insertAt(index, elem) {\n    if (index < 0 || index > this.getLength()) {\n      throw new Error('Index out of bounds: ' + index);\n    }\n\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));\n  }\n  /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */\n\n\n  pop() {\n    return this.removeAt(this.getLength() - 1);\n  }\n  /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */\n\n\n  push(elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n\n    const n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  }\n  /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */\n\n\n  remove(elem) {\n    const arr = this.array_;\n\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */\n\n\n  removeAt(index) {\n    if (index < 0 || index >= this.getLength()) {\n      return undefined;\n    }\n\n    const prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent(\n    /** @type {CollectionEvent<T>} */\n    new CollectionEvent(CollectionEventType.REMOVE, prev, index));\n    return prev;\n  }\n  /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n\n\n  setAt(index, elem) {\n    const n = this.getLength();\n\n    if (index >= n) {\n      this.insertAt(index, elem);\n      return;\n    }\n\n    if (index < 0) {\n      throw new Error('Index out of bounds: ' + index);\n    }\n\n    if (this.unique_) {\n      this.assertUnique_(elem, index);\n    }\n\n    const prev = this.array_[index];\n    this.array_[index] = elem;\n    this.dispatchEvent(\n    /** @type {CollectionEvent<T>} */\n    new CollectionEvent(CollectionEventType.REMOVE, prev, index));\n    this.dispatchEvent(\n    /** @type {CollectionEvent<T>} */\n    new CollectionEvent(CollectionEventType.ADD, elem, index));\n  }\n  /**\n   * @private\n   */\n\n\n  updateLength_() {\n    this.set(Property.LENGTH, this.array_.length);\n  }\n  /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number} [except] Optional index to ignore.\n   */\n\n\n  assertUnique_(elem, except) {\n    for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== except) {\n        throw new AssertionError(58);\n      }\n    }\n  }\n\n}\n\nexport default Collection;","map":{"version":3,"names":["AssertionError","BaseObject","CollectionEventType","Event","Property","LENGTH","CollectionEvent","constructor","type","element","index","Collection","array","options","on","once","un","unique_","unique","array_","i","ii","length","assertUnique_","updateLength_","clear","getLength","pop","extend","arr","push","forEach","f","getArray","item","get","insertAt","elem","Error","splice","dispatchEvent","ADD","removeAt","n","remove","undefined","prev","REMOVE","setAt","set","except"],"sources":["D:/Work/Learning/demo/node_modules/ol/Collection.js"],"sourcesContent":["/**\n * @module ol/Collection\n */\nimport AssertionError from './AssertionError.js';\nimport BaseObject from './Object.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport Event from './events/Event.js';\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  LENGTH: 'length',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n * @template T\n */\nexport class CollectionEvent extends Event {\n  /**\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\n   * @param {T} element Element.\n   * @param {number} index The index of the added or removed element.\n   */\n  constructor(type, element, index) {\n    super(type);\n\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {T}\n     * @api\n     */\n    this.element = element;\n\n    /**\n     * The index of the added or removed element.\n     * @type {number}\n     * @api\n     */\n    this.index = index;\n  }\n}\n\n/***\n * @template T\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\nclass Collection extends BaseObject {\n  /**\n   * @param {Array<T>} [array] Array.\n   * @param {Options} [options] Collection options.\n   */\n  constructor(array, options) {\n    super();\n\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {CollectionOnSignature<T, void>}\n     */\n    this.un;\n\n    options = options || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.unique_ = !!options.unique;\n\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n    this.array_ = array ? array : [];\n\n    if (this.unique_) {\n      for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n        this.assertUnique_(this.array_[i], i);\n      }\n    }\n\n    this.updateLength_();\n  }\n\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n  clear() {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  }\n\n  /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */\n  extend(arr) {\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */\n  forEach(f) {\n    const array = this.array_;\n    for (let i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  }\n\n  /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */\n  item(index) {\n    return this.array_[index];\n  }\n\n  /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */\n  getLength() {\n    return this.get(Property.LENGTH);\n  }\n\n  /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  insertAt(index, elem) {\n    if (index < 0 || index > this.getLength()) {\n      throw new Error('Index out of bounds: ' + index);\n    }\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(\n      new CollectionEvent(CollectionEventType.ADD, elem, index)\n    );\n  }\n\n  /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */\n  pop() {\n    return this.removeAt(this.getLength() - 1);\n  }\n\n  /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */\n  push(elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    const n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  }\n\n  /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */\n  remove(elem) {\n    const arr = this.array_;\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */\n  removeAt(index) {\n    if (index < 0 || index >= this.getLength()) {\n      return undefined;\n    }\n    const prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent(\n      /** @type {CollectionEvent<T>} */ (\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\n      )\n    );\n    return prev;\n  }\n\n  /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  setAt(index, elem) {\n    const n = this.getLength();\n    if (index >= n) {\n      this.insertAt(index, elem);\n      return;\n    }\n    if (index < 0) {\n      throw new Error('Index out of bounds: ' + index);\n    }\n    if (this.unique_) {\n      this.assertUnique_(elem, index);\n    }\n    const prev = this.array_[index];\n    this.array_[index] = elem;\n    this.dispatchEvent(\n      /** @type {CollectionEvent<T>} */ (\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\n      )\n    );\n    this.dispatchEvent(\n      /** @type {CollectionEvent<T>} */ (\n        new CollectionEvent(CollectionEventType.ADD, elem, index)\n      )\n    );\n  }\n\n  /**\n   * @private\n   */\n  updateLength_() {\n    this.set(Property.LENGTH, this.array_.length);\n  }\n\n  /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number} [except] Optional index to ignore.\n   */\n  assertUnique_(elem, except) {\n    for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== except) {\n        throw new AssertionError(58);\n      }\n    }\n  }\n}\n\nexport default Collection;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}