{"ast":null,"code":"/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(flatCoordinates, offset, end, stride, transform, dest) {\n  dest = dest ? dest : [];\n  let i = 0;\n\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n  }\n\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n\n  return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\n\nexport function rotate(flatCoordinates, offset, end, stride, angle, anchor, dest) {\n  dest = dest ? dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n\n  return dest;\n}\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\n\nexport function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, dest) {\n  dest = dest ? dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n\n  return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\n\nexport function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, dest) {\n  dest = dest ? dest : [];\n  let i = 0;\n\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n\n  return dest;\n}","map":{"version":3,"names":["transform2D","flatCoordinates","offset","end","stride","transform","dest","i","j","x","y","length","rotate","angle","anchor","cos","Math","sin","anchorX","anchorY","deltaX","deltaY","k","scale","sx","sy","translate"],"sources":["D:/Work/Learning/demo/node_modules/ol/geom/flat/transform.js"],"sourcesContent":["/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  transform,\n  dest\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  angle,\n  anchor,\n  dest\n) {\n  dest = dest ? dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  sx,\n  sy,\n  anchor,\n  dest\n) {\n  dest = dest ? dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  deltaX,\n  deltaY,\n  dest\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}