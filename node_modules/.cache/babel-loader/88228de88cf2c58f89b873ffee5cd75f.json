{"ast":null,"code":"/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\n\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    });\n    /**\n     * @protected\n     * @type {?string}\n     */\n\n    this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n\n    this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n\n    this.tileCacheForProjection = {};\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n\n    this.tileGridForProjection = {};\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.renderReprojectionEdges_ = false;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  canExpireCache() {\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (const key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n\n\n  expireCache(projection, usedTiles) {\n    const usedTileCache = this.getTileCacheForProjection(projection);\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n\n    for (const id in this.tileCacheForProjection) {\n      const tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n\n\n  getGutterForProjection(projection) {\n    if (this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    } else {\n      return this.getGutter();\n    }\n  }\n  /**\n   * @return {number} Gutter.\n   */\n\n\n  getGutter() {\n    return 0;\n  }\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n\n\n  getKey() {\n    let key = super.getKey();\n\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n\n    return key;\n  }\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n\n\n  getOpaque(projection) {\n    if (this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    } else {\n      return super.getOpaque(projection);\n    }\n  }\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n\n\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      const projKey = getUid(projection);\n\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n      }\n\n      return this.tileGridForProjection[projKey];\n    }\n  }\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n\n\n  getTileCacheForProjection(projection) {\n    const thisProj = this.getProjection();\n\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      const projKey = getUid(projection);\n\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n\n      return this.tileCacheForProjection[projKey];\n    }\n  }\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n\n\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    const tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    const tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   */\n\n\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n\n    if (!sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    } else {\n      const cache = this.getTileCacheForProjection(projection);\n      const tileCoord = [z, x, y];\n      let tile;\n      const tileCoordKey = getKey(tileCoord);\n\n      if (cache.containsKey(tileCoordKey)) {\n        tile = cache.get(tileCoordKey);\n      }\n\n      const key = this.getKey();\n\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        const targetTileGrid = this.getTileGridForProjection(projection);\n        const wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        const newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {\n          return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n        }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.getInterpolate());\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n\n        return newTile;\n      }\n    }\n  }\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @protected\n   */\n\n\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    let tile = null;\n    const tileCoordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        const interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key); //make the new tile the head of the list,\n\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n\n    return tile;\n  }\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n\n\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n\n    this.renderReprojectionEdges_ = render;\n\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n\n    this.changed();\n  }\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n\n\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n\n    if (proj) {\n      const projKey = getUid(proj);\n\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n\n  clear() {\n    super.clear();\n\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n  }\n\n}\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\n\n\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */\n  imageTile.getImage().src = src;\n}\n\nexport default TileImage;","map":{"version":3,"names":["EventType","ImageTile","ReprojTile","TileCache","TileState","UrlTile","equivalent","get","getProjection","getKey","getKeyZXY","getForProjection","getTileGridForProjection","getUid","TileImage","constructor","options","attributions","cacheSize","opaque","projection","state","tileGrid","tileLoadFunction","defaultTileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","interpolate","undefined","key","attributionsCollapsible","zDirection","crossOrigin","tileClass","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","canExpireCache","tileCache","expireCache","usedTiles","usedTileCache","getTileCacheForProjection","id","getGutterForProjection","getGutter","getInterpolate","getOpaque","thisProj","projKey","highWaterMark","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","bind","getTile","sourceProjection","getTileInternal","cache","tileCoordKey","containsKey","sourceTileGrid","targetTileGrid","wrappedTileCoord","newTile","getTilePixelRatio","interimTile","refreshInterimChain","replace","set","getState","setRenderReprojectionEdges","render","clear","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage"],"sources":["D:/Work/Learning/demo/node_modules/ol/source/TileImage.js"],"sourcesContent":["/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport {getKey, getKeyZXY} from '../tilecoord.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (const key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const usedTileCache = this.getTileCacheForProjection(projection);\n\n    this.tileCache.expireCache(\n      this.tileCache == usedTileCache ? usedTiles : {}\n    );\n    for (const id in this.tileCacheForProjection) {\n      const tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    } else {\n      return this.getGutter();\n    }\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return false;\n    } else {\n      return super.getOpaque(projection);\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      const projKey = getUid(projection);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] =\n          getTileGridForProjection(projection);\n      }\n      return this.tileGridForProjection[projKey];\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n  getTileCacheForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      const projKey = getUid(projection);\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(\n          this.tileCache.highWaterMark\n        );\n      }\n      return this.tileCacheForProjection[projKey];\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection\n      );\n    } else {\n      const cache = this.getTileCacheForProjection(projection);\n      const tileCoord = [z, x, y];\n      let tile;\n      const tileCoordKey = getKey(tileCoord);\n      if (cache.containsKey(tileCoordKey)) {\n        tile = cache.get(tileCoordKey);\n      }\n      const key = this.getKey();\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        const targetTileGrid = this.getTileGridForProjection(projection);\n        const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n          tileCoord,\n          projection\n        );\n        const newTile = new ReprojTile(\n          sourceProjection,\n          sourceTileGrid,\n          projection,\n          targetTileGrid,\n          tileCoord,\n          wrappedTileCoord,\n          this.getTilePixelRatio(pixelRatio),\n          this.getGutter(),\n          function (z, x, y, pixelRatio) {\n            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n          }.bind(this),\n          this.reprojectionErrorThreshold_,\n          this.renderReprojectionEdges_,\n          this.getInterpolate()\n        );\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n        return newTile;\n      }\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    let tile = null;\n    const tileCoordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        const interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n\n  clear() {\n    super.clear();\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}