{"ast":null,"code":"/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, { zoomByDelta } from './Interaction.js';\nimport { targetNotEditable } from '../events/condition.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\n\nclass KeyboardZoom extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options ? options : {};\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.condition_ = options.condition ? options.condition : targetNotEditable;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.delta_ = options.delta ? options.delta : 1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardZoom}\n   */\n\n\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n\n    if (mapBrowserEvent.type == EventType.KEYDOWN || mapBrowserEvent.type == EventType.KEYPRESS) {\n      const keyEvent =\n      /** @type {KeyboardEvent} */\n      mapBrowserEvent.originalEvent;\n      const charCode = keyEvent.charCode;\n\n      if (this.condition_(mapBrowserEvent) && (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {\n        const map = mapBrowserEvent.map;\n        const delta = charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;\n        const view = map.getView();\n        zoomByDelta(view, delta, undefined, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n\n    return !stopEvent;\n  }\n\n}\n\nexport default KeyboardZoom;","map":{"version":3,"names":["EventType","Interaction","zoomByDelta","targetNotEditable","KeyboardZoom","constructor","options","condition_","condition","delta_","delta","duration_","duration","undefined","handleEvent","mapBrowserEvent","stopEvent","type","KEYDOWN","KEYPRESS","keyEvent","originalEvent","charCode","charCodeAt","map","view","getView","preventDefault"],"sources":["D:/Work/Learning/demo/node_modules/ol/interaction/KeyboardZoom.js"],"sourcesContent":["/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {zoomByDelta} from './Interaction.js';\nimport {targetNotEditable} from '../events/condition.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nclass KeyboardZoom extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : targetNotEditable;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardZoom}\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (\n      mapBrowserEvent.type == EventType.KEYDOWN ||\n      mapBrowserEvent.type == EventType.KEYPRESS\n    ) {\n      const keyEvent = /** @type {KeyboardEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const charCode = keyEvent.charCode;\n      if (\n        this.condition_(mapBrowserEvent) &&\n        (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))\n      ) {\n        const map = mapBrowserEvent.map;\n        const delta =\n          charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;\n        const view = map.getView();\n        zoomByDelta(view, delta, undefined, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\n\nexport default KeyboardZoom;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,WAAP,IAAqBC,WAArB,QAAuC,kBAAvC;AACA,SAAQC,iBAAR,QAAgC,wBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAN,SAA2BH,WAA3B,CAAuC;EACrC;AACF;AACA;EACEI,WAAW,CAACC,OAAD,EAAU;IACnB;IAEAA,OAAO,GAAGA,OAAO,GAAGA,OAAH,GAAa,EAA9B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,UAAL,GAAkBD,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAA5B,GAAwCL,iBAA1D;IAEA;AACJ;AACA;AACA;;IACI,KAAKM,MAAL,GAAcH,OAAO,CAACI,KAAR,GAAgBJ,OAAO,CAACI,KAAxB,GAAgC,CAA9C;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,SAAL,GAAiBL,OAAO,CAACM,QAAR,KAAqBC,SAArB,GAAiCP,OAAO,CAACM,QAAzC,GAAoD,GAArE;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEE,WAAW,CAACC,eAAD,EAAkB;IAC3B,IAAIC,SAAS,GAAG,KAAhB;;IACA,IACED,eAAe,CAACE,IAAhB,IAAwBjB,SAAS,CAACkB,OAAlC,IACAH,eAAe,CAACE,IAAhB,IAAwBjB,SAAS,CAACmB,QAFpC,EAGE;MACA,MAAMC,QAAQ;MAAG;MACfL,eAAe,CAACM,aADlB;MAGA,MAAMC,QAAQ,GAAGF,QAAQ,CAACE,QAA1B;;MACA,IACE,KAAKf,UAAL,CAAgBQ,eAAhB,MACCO,QAAQ,IAAI,IAAIC,UAAJ,CAAe,CAAf,CAAZ,IAAiCD,QAAQ,IAAI,IAAIC,UAAJ,CAAe,CAAf,CAD9C,CADF,EAGE;QACA,MAAMC,GAAG,GAAGT,eAAe,CAACS,GAA5B;QACA,MAAMd,KAAK,GACTY,QAAQ,IAAI,IAAIC,UAAJ,CAAe,CAAf,CAAZ,GAAgC,KAAKd,MAArC,GAA8C,CAAC,KAAKA,MADtD;QAEA,MAAMgB,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAb;QACAxB,WAAW,CAACuB,IAAD,EAAOf,KAAP,EAAcG,SAAd,EAAyB,KAAKF,SAA9B,CAAX;QACAS,QAAQ,CAACO,cAAT;QACAX,SAAS,GAAG,IAAZ;MACD;IACF;;IACD,OAAO,CAACA,SAAR;EACD;;AA5DoC;;AA+DvC,eAAeZ,YAAf"},"metadata":{},"sourceType":"module"}