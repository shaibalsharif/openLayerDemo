{"ast":null,"code":"/**\n * @module ol/layer/Base\n */\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport { abstract } from '../util.js';\nimport { assert } from '../asserts.js';\nimport { clamp } from '../math.js';\n/**\n * A css color, or a function called with a view resolution returning a css color.\n *\n * @typedef {string|function(number):string} BackgroundColor\n * @api\n */\n\n/**\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\n\nclass BaseLayer extends BaseObject {\n  /**\n   * @param {Options} options Layer options.\n   */\n  constructor(options) {\n    super();\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {BaseLayerOnSignature<void>}\n     */\n\n    this.un;\n    /**\n     * @type {BackgroundColor|false}\n     * @private\n     */\n\n    this.background_ = options.background;\n    /**\n     * @type {Object<string, *>}\n     */\n\n    const properties = Object.assign({}, options);\n\n    if (typeof options.properties === 'object') {\n      delete properties.properties;\n      Object.assign(properties, options.properties);\n    }\n\n    properties[LayerProperty.OPACITY] = options.opacity !== undefined ? options.opacity : 1;\n    assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number\n\n    properties[LayerProperty.VISIBLE] = options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;\n    properties[LayerProperty.MIN_ZOOM] = options.minZoom !== undefined ? options.minZoom : -Infinity;\n    properties[LayerProperty.MAX_ZOOM] = options.maxZoom !== undefined ? options.maxZoom : Infinity;\n    /**\n     * @type {string}\n     * @private\n     */\n\n    this.className_ = properties.className !== undefined ? properties.className : 'ol-layer';\n    delete properties.className;\n    this.setProperties(properties);\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n\n    this.state_ = null;\n  }\n  /**\n   * Get the background for this layer.\n   * @return {BackgroundColor|false} Layer background.\n   */\n\n\n  getBackground() {\n    return this.background_;\n  }\n  /**\n   * @return {string} CSS class name.\n   */\n\n\n  getClassName() {\n    return this.className_;\n  }\n  /**\n   * This method is not meant to be called by layers or layer renderers because the state\n   * is incorrect if the layer is included in a layer group.\n   *\n   * @param {boolean} [managed] Layer is managed.\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */\n\n\n  getLayerState(managed) {\n    /** @type {import(\"./Layer.js\").State} */\n    const state = this.state_ ||\n    /** @type {?} */\n    {\n      layer: this,\n      managed: managed === undefined ? true : managed\n    };\n    const zIndex = this.getZIndex();\n    state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    state.minZoom = this.getMinZoom();\n    state.maxZoom = this.getMaxZoom();\n    this.state_ = state;\n    return state;\n  }\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n\n\n  getLayersArray(array) {\n    return abstract();\n  }\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n\n\n  getLayerStatesArray(states) {\n    return abstract();\n  }\n  /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */\n\n\n  getExtent() {\n    return (\n      /** @type {import(\"../extent.js\").Extent|undefined} */\n      this.get(LayerProperty.EXTENT)\n    );\n  }\n  /**\n   * Return the maximum resolution of the layer.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n\n\n  getMaxResolution() {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.MAX_RESOLUTION)\n    );\n  }\n  /**\n   * Return the minimum resolution of the layer.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n\n\n  getMinResolution() {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.MIN_RESOLUTION)\n    );\n  }\n  /**\n   * Return the minimum zoom level of the layer.\n   * @return {number} The minimum zoom level of the layer.\n   * @observable\n   * @api\n   */\n\n\n  getMinZoom() {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.MIN_ZOOM)\n    );\n  }\n  /**\n   * Return the maximum zoom level of the layer.\n   * @return {number} The maximum zoom level of the layer.\n   * @observable\n   * @api\n   */\n\n\n  getMaxZoom() {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.MAX_ZOOM)\n    );\n  }\n  /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */\n\n\n  getOpacity() {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.OPACITY)\n    );\n  }\n  /**\n   * @abstract\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n\n\n  getSourceState() {\n    return abstract();\n  }\n  /**\n   * Return the visibility of the layer (`true` or `false`).\n   * @return {boolean} The visibility of the layer.\n   * @observable\n   * @api\n   */\n\n\n  getVisible() {\n    return (\n      /** @type {boolean} */\n      this.get(LayerProperty.VISIBLE)\n    );\n  }\n  /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. The default Z-index is 0.\n   * @return {number} The Z-index of the layer.\n   * @observable\n   * @api\n   */\n\n\n  getZIndex() {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.Z_INDEX)\n    );\n  }\n  /**\n   * Sets the background color.\n   * @param {BackgroundColor} [background] Background color.\n   */\n\n\n  setBackground(background) {\n    this.background_ = background;\n    this.changed();\n  }\n  /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */\n\n\n  setExtent(extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  }\n  /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n\n\n  setMaxResolution(maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  }\n  /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n\n\n  setMinResolution(minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  }\n  /**\n   * Set the maximum zoom (exclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} maxZoom The maximum zoom of the layer.\n   * @observable\n   * @api\n   */\n\n\n  setMaxZoom(maxZoom) {\n    this.set(LayerProperty.MAX_ZOOM, maxZoom);\n  }\n  /**\n   * Set the minimum zoom (inclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} minZoom The minimum zoom of the layer.\n   * @observable\n   * @api\n   */\n\n\n  setMinZoom(minZoom) {\n    this.set(LayerProperty.MIN_ZOOM, minZoom);\n  }\n  /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */\n\n\n  setOpacity(opacity) {\n    assert(typeof opacity === 'number', 64); // Layer opacity must be a number\n\n    this.set(LayerProperty.OPACITY, opacity);\n  }\n  /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */\n\n\n  setVisible(visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  }\n  /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */\n\n\n  setZIndex(zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  }\n  /**\n   * Clean up.\n   */\n\n\n  disposeInternal() {\n    if (this.state_) {\n      this.state_.layer = null;\n      this.state_ = null;\n    }\n\n    super.disposeInternal();\n  }\n\n}\n\nexport default BaseLayer;","map":{"version":3,"names":["BaseObject","LayerProperty","abstract","assert","clamp","BaseLayer","constructor","options","on","once","un","background_","background","properties","Object","assign","OPACITY","opacity","undefined","VISIBLE","visible","Z_INDEX","zIndex","MAX_RESOLUTION","maxResolution","Infinity","MIN_RESOLUTION","minResolution","MIN_ZOOM","minZoom","MAX_ZOOM","maxZoom","className_","className","setProperties","state_","getBackground","getClassName","getLayerState","managed","state","layer","getZIndex","Math","round","getOpacity","getVisible","extent","getExtent","getMaxResolution","max","getMinResolution","getMinZoom","getMaxZoom","getLayersArray","array","getLayerStatesArray","states","get","EXTENT","getSourceState","setBackground","changed","setExtent","set","setMaxResolution","setMinResolution","setMaxZoom","setMinZoom","setOpacity","setVisible","setZIndex","zindex","disposeInternal"],"sources":["D:/Work/Learning/demo/node_modules/ol/layer/Base.js"],"sourcesContent":["/**\n * @module ol/layer/Base\n */\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport {abstract} from '../util.js';\nimport {assert} from '../asserts.js';\nimport {clamp} from '../math.js';\n\n/**\n * A css color, or a function called with a view resolution returning a css color.\n *\n * @typedef {string|function(number):string} BackgroundColor\n * @api\n */\n\n/**\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nclass BaseLayer extends BaseObject {\n  /**\n   * @param {Options} options Layer options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {BackgroundColor|false}\n     * @private\n     */\n    this.background_ = options.background;\n\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = Object.assign({}, options);\n    if (typeof options.properties === 'object') {\n      delete properties.properties;\n      Object.assign(properties, options.properties);\n    }\n\n    properties[LayerProperty.OPACITY] =\n      options.opacity !== undefined ? options.opacity : 1;\n    assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number\n\n    properties[LayerProperty.VISIBLE] =\n      options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] =\n      options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] =\n      options.minResolution !== undefined ? options.minResolution : 0;\n    properties[LayerProperty.MIN_ZOOM] =\n      options.minZoom !== undefined ? options.minZoom : -Infinity;\n    properties[LayerProperty.MAX_ZOOM] =\n      options.maxZoom !== undefined ? options.maxZoom : Infinity;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.className_ =\n      properties.className !== undefined ? properties.className : 'ol-layer';\n    delete properties.className;\n\n    this.setProperties(properties);\n\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    this.state_ = null;\n  }\n\n  /**\n   * Get the background for this layer.\n   * @return {BackgroundColor|false} Layer background.\n   */\n  getBackground() {\n    return this.background_;\n  }\n\n  /**\n   * @return {string} CSS class name.\n   */\n  getClassName() {\n    return this.className_;\n  }\n\n  /**\n   * This method is not meant to be called by layers or layer renderers because the state\n   * is incorrect if the layer is included in a layer group.\n   *\n   * @param {boolean} [managed] Layer is managed.\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */\n  getLayerState(managed) {\n    /** @type {import(\"./Layer.js\").State} */\n    const state =\n      this.state_ ||\n      /** @type {?} */ ({\n        layer: this,\n        managed: managed === undefined ? true : managed,\n      });\n    const zIndex = this.getZIndex();\n    state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    state.minZoom = this.getMinZoom();\n    state.maxZoom = this.getMaxZoom();\n    this.state_ = state;\n\n    return state;\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(states) {\n    return abstract();\n  }\n\n  /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */\n  getExtent() {\n    return /** @type {import(\"../extent.js\").Extent|undefined} */ (\n      this.get(LayerProperty.EXTENT)\n    );\n  }\n\n  /**\n   * Return the maximum resolution of the layer.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMaxResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum resolution of the layer.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMinResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum zoom level of the layer.\n   * @return {number} The minimum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));\n  }\n\n  /**\n   * Return the maximum zoom level of the layer.\n   * @return {number} The maximum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));\n  }\n\n  /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */\n  getOpacity() {\n    return /** @type {number} */ (this.get(LayerProperty.OPACITY));\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    return abstract();\n  }\n\n  /**\n   * Return the visibility of the layer (`true` or `false`).\n   * @return {boolean} The visibility of the layer.\n   * @observable\n   * @api\n   */\n  getVisible() {\n    return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));\n  }\n\n  /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. The default Z-index is 0.\n   * @return {number} The Z-index of the layer.\n   * @observable\n   * @api\n   */\n  getZIndex() {\n    return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));\n  }\n\n  /**\n   * Sets the background color.\n   * @param {BackgroundColor} [background] Background color.\n   */\n  setBackground(background) {\n    this.background_ = background;\n    this.changed();\n  }\n\n  /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */\n  setExtent(extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  }\n\n  /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMaxResolution(maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  }\n\n  /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMinResolution(minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  }\n\n  /**\n   * Set the maximum zoom (exclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} maxZoom The maximum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMaxZoom(maxZoom) {\n    this.set(LayerProperty.MAX_ZOOM, maxZoom);\n  }\n\n  /**\n   * Set the minimum zoom (inclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} minZoom The minimum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMinZoom(minZoom) {\n    this.set(LayerProperty.MIN_ZOOM, minZoom);\n  }\n\n  /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */\n  setOpacity(opacity) {\n    assert(typeof opacity === 'number', 64); // Layer opacity must be a number\n    this.set(LayerProperty.OPACITY, opacity);\n  }\n\n  /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */\n  setVisible(visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  }\n\n  /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */\n  setZIndex(zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.state_) {\n      this.state_.layer = null;\n      this.state_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default BaseLayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}