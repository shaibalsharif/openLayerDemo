{"ast":null,"code":"/**\n * @module ol/TileQueue\n */\nimport EventType from './events/EventType.js';\nimport PriorityQueue, { DROP } from './structs/PriorityQueue.js';\nimport TileState from './TileState.js';\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import(\"./coordinate.js\").Coordinate, number): number} PriorityFunction\n */\n\nclass TileQueue extends PriorityQueue {\n  /**\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n   */\n  constructor(tilePriorityFunction, tileChangeCallback) {\n    super(\n    /**\n     * @param {Array} element Element.\n     * @return {number} Priority.\n     */\n    function (element) {\n      return tilePriorityFunction.apply(null, element);\n    },\n    /**\n     * @param {Array} element Element.\n     * @return {string} Key.\n     */\n    function (element) {\n      return (\n        /** @type {import(\"./Tile.js\").default} */\n        element[0].getKey()\n      );\n    });\n    /** @private */\n\n    this.boundHandleTileChange_ = this.handleTileChange.bind(this);\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n\n    this.tileChangeCallback_ = tileChangeCallback;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.tilesLoading_ = 0;\n    /**\n     * @private\n     * @type {!Object<string,boolean>}\n     */\n\n    this.tilesLoadingKeys_ = {};\n  }\n  /**\n   * @param {Array} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n\n\n  enqueue(element) {\n    const added = super.enqueue(element);\n\n    if (added) {\n      const tile = element[0];\n      tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n    }\n\n    return added;\n  }\n  /**\n   * @return {number} Number of tiles loading.\n   */\n\n\n  getTilesLoading() {\n    return this.tilesLoading_;\n  }\n  /**\n   * @param {import(\"./events/Event.js\").default} event Event.\n   * @protected\n   */\n\n\n  handleTileChange(event) {\n    const tile =\n    /** @type {import(\"./Tile.js\").default} */\n    event.target;\n    const state = tile.getState();\n\n    if (state === TileState.LOADED || state === TileState.ERROR || state === TileState.EMPTY) {\n      if (state !== TileState.ERROR) {\n        tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n      }\n\n      const tileKey = tile.getKey();\n\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n\n      this.tileChangeCallback_();\n    }\n  }\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n\n\n  loadMoreTiles(maxTotalLoading, maxNewLoads) {\n    let newLoads = 0;\n    let state, tile, tileKey;\n\n    while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads && this.getCount() > 0) {\n      tile =\n      /** @type {import(\"./Tile.js\").default} */\n      this.dequeue()[0];\n      tileKey = tile.getKey();\n      state = tile.getState();\n\n      if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n        this.tilesLoadingKeys_[tileKey] = true;\n        ++this.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n  }\n\n}\n\nexport default TileQueue;\n/**\n * @param {import('./Map.js').FrameState} frameState Frame state.\n * @param {import(\"./Tile.js\").default} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\n\nexport function getTilePriority(frameState, tile, tileSourceKey, tileCenter, tileResolution) {\n  // Filter out tiles at higher zoom levels than the current zoom level, or that\n  // are outside the visible extent.\n  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n    return DROP;\n  }\n\n  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n    return DROP;\n  } // Prioritize the highest zoom level tiles closest to the focus.\n  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n  // Within a zoom level, tiles are prioritized by the distance in pixels between\n  // the center of the tile and the center of the viewport.  The factor of 65536\n  // means that the prioritization should behave as desired for tiles up to\n  // 65536 * Math.log(2) = 45426 pixels from the focus.\n\n\n  const center = frameState.viewState.center;\n  const deltaX = tileCenter[0] - center[0];\n  const deltaY = tileCenter[1] - center[1];\n  return 65536 * Math.log(tileResolution) + Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;\n}","map":{"version":3,"names":["EventType","PriorityQueue","DROP","TileState","TileQueue","constructor","tilePriorityFunction","tileChangeCallback","element","apply","getKey","boundHandleTileChange_","handleTileChange","bind","tileChangeCallback_","tilesLoading_","tilesLoadingKeys_","enqueue","added","tile","addEventListener","CHANGE","getTilesLoading","event","target","state","getState","LOADED","ERROR","EMPTY","removeEventListener","tileKey","loadMoreTiles","maxTotalLoading","maxNewLoads","newLoads","getCount","dequeue","IDLE","load","getTilePriority","frameState","tileSourceKey","tileCenter","tileResolution","wantedTiles","center","viewState","deltaX","deltaY","Math","log","sqrt"],"sources":["D:/Work/Learning/demo/node_modules/ol/TileQueue.js"],"sourcesContent":["/**\n * @module ol/TileQueue\n */\nimport EventType from './events/EventType.js';\nimport PriorityQueue, {DROP} from './structs/PriorityQueue.js';\nimport TileState from './TileState.js';\n\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import(\"./coordinate.js\").Coordinate, number): number} PriorityFunction\n */\n\nclass TileQueue extends PriorityQueue {\n  /**\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n   */\n  constructor(tilePriorityFunction, tileChangeCallback) {\n    super(\n      /**\n       * @param {Array} element Element.\n       * @return {number} Priority.\n       */\n      function (element) {\n        return tilePriorityFunction.apply(null, element);\n      },\n      /**\n       * @param {Array} element Element.\n       * @return {string} Key.\n       */\n      function (element) {\n        return /** @type {import(\"./Tile.js\").default} */ (element[0]).getKey();\n      }\n    );\n\n    /** @private */\n    this.boundHandleTileChange_ = this.handleTileChange.bind(this);\n\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n    this.tileChangeCallback_ = tileChangeCallback;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilesLoading_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string,boolean>}\n     */\n    this.tilesLoadingKeys_ = {};\n  }\n\n  /**\n   * @param {Array} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  enqueue(element) {\n    const added = super.enqueue(element);\n    if (added) {\n      const tile = element[0];\n      tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n    }\n    return added;\n  }\n\n  /**\n   * @return {number} Number of tiles loading.\n   */\n  getTilesLoading() {\n    return this.tilesLoading_;\n  }\n\n  /**\n   * @param {import(\"./events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"./Tile.js\").default} */ (event.target);\n    const state = tile.getState();\n    if (\n      state === TileState.LOADED ||\n      state === TileState.ERROR ||\n      state === TileState.EMPTY\n    ) {\n      if (state !== TileState.ERROR) {\n        tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n      }\n      const tileKey = tile.getKey();\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n      this.tileChangeCallback_();\n    }\n  }\n\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n  loadMoreTiles(maxTotalLoading, maxNewLoads) {\n    let newLoads = 0;\n    let state, tile, tileKey;\n    while (\n      this.tilesLoading_ < maxTotalLoading &&\n      newLoads < maxNewLoads &&\n      this.getCount() > 0\n    ) {\n      tile = /** @type {import(\"./Tile.js\").default} */ (this.dequeue()[0]);\n      tileKey = tile.getKey();\n      state = tile.getState();\n      if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n        this.tilesLoadingKeys_[tileKey] = true;\n        ++this.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n  }\n}\n\nexport default TileQueue;\n\n/**\n * @param {import('./Map.js').FrameState} frameState Frame state.\n * @param {import(\"./Tile.js\").default} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\nexport function getTilePriority(\n  frameState,\n  tile,\n  tileSourceKey,\n  tileCenter,\n  tileResolution\n) {\n  // Filter out tiles at higher zoom levels than the current zoom level, or that\n  // are outside the visible extent.\n  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n    return DROP;\n  }\n  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n    return DROP;\n  }\n  // Prioritize the highest zoom level tiles closest to the focus.\n  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n  // Within a zoom level, tiles are prioritized by the distance in pixels between\n  // the center of the tile and the center of the viewport.  The factor of 65536\n  // means that the prioritization should behave as desired for tiles up to\n  // 65536 * Math.log(2) = 45426 pixels from the focus.\n  const center = frameState.viewState.center;\n  const deltaX = tileCenter[0] - center[0];\n  const deltaY = tileCenter[1] - center[1];\n  return (\n    65536 * Math.log(tileResolution) +\n    Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}