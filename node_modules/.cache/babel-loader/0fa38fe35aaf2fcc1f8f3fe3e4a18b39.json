{"ast":null,"code":"/**\n * @module ol/control/ZoomToExtent\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoom-extent'] Class name.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\n * extent of the view projection is used.\n */\n\n/**\n * @classdesc\n * A button control which, when pressed, changes the map view to a specific\n * extent. To style this control use the css selector `.ol-zoom-extent`.\n *\n * @api\n */\n\nclass ZoomToExtent extends Control {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      element: document.createElement('div'),\n      target: options.target\n    });\n    /**\n     * @type {?import(\"../extent.js\").Extent|null}\n     * @protected\n     */\n\n    this.extent = options.extent ? options.extent : null;\n    const className = options.className !== undefined ? options.className : 'ol-zoom-extent';\n    const label = options.label !== undefined ? options.label : 'E';\n    const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(typeof label === 'string' ? document.createTextNode(label) : label);\n    button.addEventListener(EventType.CLICK, this.handleClick_.bind(this), false);\n    const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleZoomToExtent();\n  }\n  /**\n   * @protected\n   */\n\n\n  handleZoomToExtent() {\n    const map = this.getMap();\n    const view = map.getView();\n    const extent = !this.extent ? view.getProjection().getExtent() : this.extent;\n    view.fitInternal(polygonFromExtent(extent));\n  }\n\n}\n\nexport default ZoomToExtent;","map":{"version":3,"names":["Control","EventType","CLASS_CONTROL","CLASS_UNSELECTABLE","fromExtent","polygonFromExtent","ZoomToExtent","constructor","options","element","document","createElement","target","extent","className","undefined","label","tipLabel","button","setAttribute","title","appendChild","createTextNode","addEventListener","CLICK","handleClick_","bind","cssClasses","event","preventDefault","handleZoomToExtent","map","getMap","view","getView","getProjection","getExtent","fitInternal"],"sources":["D:/Work/Learning/demo/node_modules/ol/control/ZoomToExtent.js"],"sourcesContent":["/**\n * @module ol/control/ZoomToExtent\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoom-extent'] Class name.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\n * extent of the view projection is used.\n */\n\n/**\n * @classdesc\n * A button control which, when pressed, changes the map view to a specific\n * extent. To style this control use the css selector `.ol-zoom-extent`.\n *\n * @api\n */\nclass ZoomToExtent extends Control {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    /**\n     * @type {?import(\"../extent.js\").Extent|null}\n     * @protected\n     */\n    this.extent = options.extent ? options.extent : null;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-zoom-extent';\n\n    const label = options.label !== undefined ? options.label : 'E';\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(\n      typeof label === 'string' ? document.createTextNode(label) : label\n    );\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    const cssClasses =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleZoomToExtent();\n  }\n\n  /**\n   * @protected\n   */\n  handleZoomToExtent() {\n    const map = this.getMap();\n    const view = map.getView();\n    const extent = !this.extent\n      ? view.getProjection().getExtent()\n      : this.extent;\n    view.fitInternal(polygonFromExtent(extent));\n  }\n}\n\nexport default ZoomToExtent;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAAQC,aAAR,EAAuBC,kBAAvB,QAAgD,WAAhD;AACA,SAAQC,UAAU,IAAIC,iBAAtB,QAA8C,oBAA9C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAN,SAA2BN,OAA3B,CAAmC;EACjC;AACF;AACA;EACEO,WAAW,CAACC,OAAD,EAAU;IACnBA,OAAO,GAAGA,OAAO,GAAGA,OAAH,GAAa,EAA9B;IAEA,MAAM;MACJC,OAAO,EAAEC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CADL;MAEJC,MAAM,EAAEJ,OAAO,CAACI;IAFZ,CAAN;IAKA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAcL,OAAO,CAACK,MAAR,GAAiBL,OAAO,CAACK,MAAzB,GAAkC,IAAhD;IAEA,MAAMC,SAAS,GACbN,OAAO,CAACM,SAAR,KAAsBC,SAAtB,GAAkCP,OAAO,CAACM,SAA1C,GAAsD,gBADxD;IAGA,MAAME,KAAK,GAAGR,OAAO,CAACQ,KAAR,KAAkBD,SAAlB,GAA8BP,OAAO,CAACQ,KAAtC,GAA8C,GAA5D;IACA,MAAMC,QAAQ,GACZT,OAAO,CAACS,QAAR,KAAqBF,SAArB,GAAiCP,OAAO,CAACS,QAAzC,GAAoD,eADtD;IAEA,MAAMC,MAAM,GAAGR,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;IACAO,MAAM,CAACC,YAAP,CAAoB,MAApB,EAA4B,QAA5B;IACAD,MAAM,CAACE,KAAP,GAAeH,QAAf;IACAC,MAAM,CAACG,WAAP,CACE,OAAOL,KAAP,KAAiB,QAAjB,GAA4BN,QAAQ,CAACY,cAAT,CAAwBN,KAAxB,CAA5B,GAA6DA,KAD/D;IAIAE,MAAM,CAACK,gBAAP,CACEtB,SAAS,CAACuB,KADZ,EAEE,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAFF,EAGE,KAHF;IAMA,MAAMC,UAAU,GACdb,SAAS,GAAG,GAAZ,GAAkBX,kBAAlB,GAAuC,GAAvC,GAA6CD,aAD/C;IAEA,MAAMO,OAAO,GAAG,KAAKA,OAArB;IACAA,OAAO,CAACK,SAAR,GAAoBa,UAApB;IACAlB,OAAO,CAACY,WAAR,CAAoBH,MAApB;EACD;EAED;AACF;AACA;AACA;;;EACEO,YAAY,CAACG,KAAD,EAAQ;IAClBA,KAAK,CAACC,cAAN;IACA,KAAKC,kBAAL;EACD;EAED;AACF;AACA;;;EACEA,kBAAkB,GAAG;IACnB,MAAMC,GAAG,GAAG,KAAKC,MAAL,EAAZ;IACA,MAAMC,IAAI,GAAGF,GAAG,CAACG,OAAJ,EAAb;IACA,MAAMrB,MAAM,GAAG,CAAC,KAAKA,MAAN,GACXoB,IAAI,CAACE,aAAL,GAAqBC,SAArB,EADW,GAEX,KAAKvB,MAFT;IAGAoB,IAAI,CAACI,WAAL,CAAiBhC,iBAAiB,CAACQ,MAAD,CAAlC;EACD;;AA/DgC;;AAkEnC,eAAeP,YAAf"},"metadata":{},"sourceType":"module"}