{"ast":null,"code":"/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n\n/**\n * @enum {string}\n * @protected\n */\n\nconst Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     // ...\n *     const popup = new Overlay({\n *       element: document.getElementById('popup'),\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\n\nclass Overlay extends BaseObject {\n  /**\n   * @param {Options} options Overlay options.\n   */\n  constructor(options) {\n    super();\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n\n    this.un;\n    /**\n     * @protected\n     * @type {Options}\n     */\n\n    this.options = options;\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n\n    this.id = options.id;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n    this.element = document.createElement('div');\n    this.element.className = options.className !== undefined ? options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    this.element.style.position = 'absolute';\n    this.element.style.pointerEvents = 'auto';\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|undefined}\n     */\n\n    this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n\n    this.rendered = {\n      transform_: '',\n      visible: true\n    };\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    this.mapPostrenderListenerKey = null;\n    this.addChangeListener(Property.ELEMENT, this.handleElementChanged);\n    this.addChangeListener(Property.MAP, this.handleMapChanged);\n    this.addChangeListener(Property.OFFSET, this.handleOffsetChanged);\n    this.addChangeListener(Property.POSITION, this.handlePositionChanged);\n    this.addChangeListener(Property.POSITIONING, this.handlePositioningChanged);\n\n    if (options.element !== undefined) {\n      this.setElement(options.element);\n    }\n\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n    this.setPositioning(options.positioning || 'top-left');\n\n    if (options.position !== undefined) {\n      this.setPosition(options.position);\n    }\n  }\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n\n\n  getElement() {\n    return (\n      /** @type {HTMLElement|undefined} */\n      this.get(Property.ELEMENT)\n    );\n  }\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./Map.js\").default|null} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n\n\n  getMap() {\n    return (\n      /** @type {import(\"./Map.js\").default|null} */\n      this.get(Property.MAP) || null\n    );\n  }\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n\n\n  getOffset() {\n    return (\n      /** @type {Array<number>} */\n      this.get(Property.OFFSET)\n    );\n  }\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n\n\n  getPosition() {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(Property.POSITION)\n    );\n  }\n  /**\n   * Get the current positioning of this overlay.\n   * @return {Positioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n\n\n  getPositioning() {\n    return (\n      /** @type {Positioning} */\n      this.get(Property.POSITIONING)\n    );\n  }\n  /**\n   * @protected\n   */\n\n\n  handleElementChanged() {\n    removeChildren(this.element);\n    const element = this.getElement();\n\n    if (element) {\n      this.element.appendChild(element);\n    }\n  }\n  /**\n   * @protected\n   */\n\n\n  handleMapChanged() {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n\n    const map = this.getMap();\n\n    if (map) {\n      this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n      this.updatePixelPosition();\n      const container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n\n      this.performAutoPan();\n    }\n  }\n  /**\n   * @protected\n   */\n\n\n  render() {\n    this.updatePixelPosition();\n  }\n  /**\n   * @protected\n   */\n\n\n  handleOffsetChanged() {\n    this.updatePixelPosition();\n  }\n  /**\n   * @protected\n   */\n\n\n  handlePositionChanged() {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  }\n  /**\n   * @protected\n   */\n\n\n  handlePositioningChanged() {\n    this.updatePixelPosition();\n  }\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n\n\n  setElement(element) {\n    this.set(Property.ELEMENT, element);\n  }\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./Map.js\").default|null} map The map that the\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\n   * @observable\n   * @api\n   */\n\n\n  setMap(map) {\n    this.set(Property.MAP, map);\n  }\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n\n\n  setOffset(offset) {\n    this.set(Property.OFFSET, offset);\n  }\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n\n\n  setPosition(position) {\n    this.set(Property.POSITION, position);\n  }\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n\n\n  performAutoPan() {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  }\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action\n   * @api\n   */\n\n\n  panIntoView(panIntoViewOptions) {\n    const map = this.getMap();\n\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n\n    const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    const element = this.getElement();\n    const overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n    panIntoViewOptions = panIntoViewOptions || {};\n    const myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      const offsetLeft = overlayRect[0] - mapRect[0];\n      const offsetRight = mapRect[2] - overlayRect[2];\n      const offsetTop = overlayRect[1] - mapRect[1];\n      const offsetBottom = mapRect[3] - overlayRect[3];\n      const delta = [0, 0];\n\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        const center =\n        /** @type {import(\"./coordinate.js\").Coordinate} */\n        map.getView().getCenterInternal();\n        const centerPx = map.getPixelFromCoordinateInternal(center);\n\n        if (!centerPx) {\n          return;\n        }\n\n        const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n        const panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing\n        });\n      }\n    }\n  }\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n\n\n  getRect(element, size) {\n    const box = element.getBoundingClientRect();\n    const offsetX = box.left + window.pageXOffset;\n    const offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  }\n  /**\n   * Set the positioning for this overlay.\n   * @param {Positioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n\n\n  setPositioning(positioning) {\n    this.set(Property.POSITIONING, positioning);\n  }\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n\n\n  setVisible(visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  }\n  /**\n   * Update pixel position.\n   * @protected\n   */\n\n\n  updatePixelPosition() {\n    const map = this.getMap();\n    const position = this.getPosition();\n\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    const pixel = map.getPixelFromCoordinate(position);\n    const mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  }\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n\n\n  updateRenderedPosition(pixel, mapSize) {\n    const style = this.element.style;\n    const offset = this.getOffset();\n    const positioning = this.getPositioning();\n    this.setVisible(true);\n    const x = Math.round(pixel[0] + offset[0]) + 'px';\n    const y = Math.round(pixel[1] + offset[1]) + 'px';\n    let posX = '0%';\n    let posY = '0%';\n\n    if (positioning == 'bottom-right' || positioning == 'center-right' || positioning == 'top-right') {\n      posX = '-100%';\n    } else if (positioning == 'bottom-center' || positioning == 'center-center' || positioning == 'top-center') {\n      posX = '-50%';\n    }\n\n    if (positioning == 'bottom-left' || positioning == 'bottom-center' || positioning == 'bottom-right') {\n      posY = '-100%';\n    } else if (positioning == 'center-left' || positioning == 'center-center' || positioning == 'center-right') {\n      posY = '-50%';\n    }\n\n    const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;\n\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform;\n    }\n  }\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n\n\n  getOptions() {\n    return this.options;\n  }\n\n}\n\nexport default Overlay;","map":{"version":3,"names":["BaseObject","MapEventType","CLASS_SELECTABLE","containsExtent","listen","unlistenByKey","outerHeight","outerWidth","removeChildren","removeNode","Property","ELEMENT","MAP","OFFSET","POSITION","POSITIONING","Overlay","constructor","options","on","once","un","id","insertFirst","undefined","stopEvent","element","document","createElement","className","style","position","pointerEvents","autoPan","rendered","transform_","visible","mapPostrenderListenerKey","addChangeListener","handleElementChanged","handleMapChanged","handleOffsetChanged","handlePositionChanged","handlePositioningChanged","setElement","setOffset","offset","setPositioning","positioning","setPosition","getElement","get","getId","getMap","getOffset","getPosition","getPositioning","appendChild","map","POSTRENDER","render","updatePixelPosition","container","getOverlayContainerStopEvent","getOverlayContainer","insertBefore","childNodes","performAutoPan","set","setMap","panIntoView","panIntoViewOptions","getTargetElement","mapRect","getRect","getSize","overlayRect","myMargin","margin","offsetLeft","offsetRight","offsetTop","offsetBottom","delta","Math","abs","center","getView","getCenterInternal","centerPx","getPixelFromCoordinateInternal","newCenterPx","panOptions","animation","animateInternal","getCoordinateFromPixelInternal","duration","easing","size","box","getBoundingClientRect","offsetX","left","window","pageXOffset","offsetY","top","pageYOffset","setVisible","display","isRendered","pixel","getPixelFromCoordinate","mapSize","updateRenderedPosition","x","round","y","posX","posY","transform","getOptions"],"sources":["D:/Work/Learning/demo/node_modules/ol/Overlay.js"],"sourcesContent":["/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport {CLASS_SELECTABLE} from './css.js';\nimport {containsExtent} from './extent.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {outerHeight, outerWidth, removeChildren, removeNode} from './dom.js';\n\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n\n/**\n * @enum {string}\n * @protected\n */\nconst Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning',\n};\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     // ...\n *     const popup = new Overlay({\n *       element: document.getElementById('popup'),\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nclass Overlay extends BaseObject {\n  /**\n   * @param {Options} options Overlay options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {Options}\n     */\n    this.options = options;\n\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n    this.id = options.id;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.insertFirst =\n      options.insertFirst !== undefined ? options.insertFirst : true;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = document.createElement('div');\n    this.element.className =\n      options.className !== undefined\n        ? options.className\n        : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    this.element.style.position = 'absolute';\n    this.element.style.pointerEvents = 'auto';\n\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|undefined}\n     */\n    this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;\n\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n    this.rendered = {\n      transform_: '',\n      visible: true,\n    };\n\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.mapPostrenderListenerKey = null;\n\n    this.addChangeListener(Property.ELEMENT, this.handleElementChanged);\n    this.addChangeListener(Property.MAP, this.handleMapChanged);\n    this.addChangeListener(Property.OFFSET, this.handleOffsetChanged);\n    this.addChangeListener(Property.POSITION, this.handlePositionChanged);\n    this.addChangeListener(Property.POSITIONING, this.handlePositioningChanged);\n\n    if (options.element !== undefined) {\n      this.setElement(options.element);\n    }\n\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n\n    this.setPositioning(options.positioning || 'top-left');\n\n    if (options.position !== undefined) {\n      this.setPosition(options.position);\n    }\n  }\n\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  getElement() {\n    return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n  }\n\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./Map.js\").default|null} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n  getMap() {\n    return /** @type {import(\"./Map.js\").default|null} */ (\n      this.get(Property.MAP) || null\n    );\n  }\n\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n  getOffset() {\n    return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n  }\n\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\n   * Get the current positioning of this overlay.\n   * @return {Positioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n  getPositioning() {\n    return /** @type {Positioning} */ (this.get(Property.POSITIONING));\n  }\n\n  /**\n   * @protected\n   */\n  handleElementChanged() {\n    removeChildren(this.element);\n    const element = this.getElement();\n    if (element) {\n      this.element.appendChild(element);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleMapChanged() {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n    const map = this.getMap();\n    if (map) {\n      this.mapPostrenderListenerKey = listen(\n        map,\n        MapEventType.POSTRENDER,\n        this.render,\n        this\n      );\n      this.updatePixelPosition();\n      const container = this.stopEvent\n        ? map.getOverlayContainerStopEvent()\n        : map.getOverlayContainer();\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n      this.performAutoPan();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handleOffsetChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositionChanged() {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositioningChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  setElement(element) {\n    this.set(Property.ELEMENT, element);\n  }\n\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./Map.js\").default|null} map The map that the\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\n   * @observable\n   * @api\n   */\n  setMap(map) {\n    this.set(Property.MAP, map);\n  }\n\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n  setOffset(offset) {\n    this.set(Property.OFFSET, offset);\n  }\n\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n  setPosition(position) {\n    this.set(Property.POSITION, position);\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n  performAutoPan() {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action\n   * @api\n   */\n  panIntoView(panIntoViewOptions) {\n    const map = this.getMap();\n\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n\n    const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    const element = this.getElement();\n    const overlayRect = this.getRect(element, [\n      outerWidth(element),\n      outerHeight(element),\n    ]);\n\n    panIntoViewOptions = panIntoViewOptions || {};\n\n    const myMargin =\n      panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      const offsetLeft = overlayRect[0] - mapRect[0];\n      const offsetRight = mapRect[2] - overlayRect[2];\n      const offsetTop = overlayRect[1] - mapRect[1];\n      const offsetBottom = mapRect[3] - overlayRect[3];\n\n      const delta = [0, 0];\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n          map.getView().getCenterInternal()\n        );\n        const centerPx = map.getPixelFromCoordinateInternal(center);\n        if (!centerPx) {\n          return;\n        }\n        const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n\n        const panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing,\n        });\n      }\n    }\n  }\n\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n  getRect(element, size) {\n    const box = element.getBoundingClientRect();\n    const offsetX = box.left + window.pageXOffset;\n    const offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  }\n\n  /**\n   * Set the positioning for this overlay.\n   * @param {Positioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n  setPositioning(positioning) {\n    this.set(Property.POSITIONING, positioning);\n  }\n\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n  setVisible(visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  }\n\n  /**\n   * Update pixel position.\n   * @protected\n   */\n  updatePixelPosition() {\n    const map = this.getMap();\n    const position = this.getPosition();\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    const pixel = map.getPixelFromCoordinate(position);\n    const mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  }\n\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n  updateRenderedPosition(pixel, mapSize) {\n    const style = this.element.style;\n    const offset = this.getOffset();\n\n    const positioning = this.getPositioning();\n\n    this.setVisible(true);\n\n    const x = Math.round(pixel[0] + offset[0]) + 'px';\n    const y = Math.round(pixel[1] + offset[1]) + 'px';\n    let posX = '0%';\n    let posY = '0%';\n    if (\n      positioning == 'bottom-right' ||\n      positioning == 'center-right' ||\n      positioning == 'top-right'\n    ) {\n      posX = '-100%';\n    } else if (\n      positioning == 'bottom-center' ||\n      positioning == 'center-center' ||\n      positioning == 'top-center'\n    ) {\n      posX = '-50%';\n    }\n    if (\n      positioning == 'bottom-left' ||\n      positioning == 'bottom-center' ||\n      positioning == 'bottom-right'\n    ) {\n      posY = '-100%';\n    } else if (\n      positioning == 'center-left' ||\n      positioning == 'center-center' ||\n      positioning == 'center-right'\n    ) {\n      posY = '-50%';\n    }\n    const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform;\n    }\n  }\n\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n  getOptions() {\n    return this.options;\n  }\n}\n\nexport default Overlay;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,UAAP,MAAuB,aAAvB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAAQC,gBAAR,QAA+B,UAA/B;AACA,SAAQC,cAAR,QAA6B,aAA7B;AACA,SAAQC,MAAR,EAAgBC,aAAhB,QAAoC,aAApC;AACA,SAAQC,WAAR,EAAqBC,UAArB,EAAiCC,cAAjC,EAAiDC,UAAjD,QAAkE,UAAlE;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAG;EACfC,OAAO,EAAE,SADM;EAEfC,GAAG,EAAE,KAFU;EAGfC,MAAM,EAAE,QAHO;EAIfC,QAAQ,EAAE,UAJK;EAKfC,WAAW,EAAE;AALE,CAAjB;AAQA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,SAAsBhB,UAAtB,CAAiC;EAC/B;AACF;AACA;EACEiB,WAAW,CAACC,OAAD,EAAU;IACnB;IAEA;AACJ;AACA;;IACI,KAAKC,EAAL;IAEA;AACJ;AACA;;IACI,KAAKC,IAAL;IAEA;AACJ;AACA;;IACI,KAAKC,EAAL;IAEA;AACJ;AACA;AACA;;IACI,KAAKH,OAAL,GAAeA,OAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKI,EAAL,GAAUJ,OAAO,CAACI,EAAlB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,WAAL,GACEL,OAAO,CAACK,WAAR,KAAwBC,SAAxB,GAAoCN,OAAO,CAACK,WAA5C,GA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"},"metadata":{},"sourceType":"module"}