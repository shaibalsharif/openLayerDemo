{"ast":null,"code":"/**\n * @module ol/array\n */\n\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, comparator) {\n  let mid, cmp;\n  comparator = comparator || numberSafeCompareFunction;\n  let low = 0;\n  let high = haystack.length;\n  let found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + (high - low >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) {\n      /* Too low. */\n      low = mid + 1;\n    } else {\n      /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n  /* Key not found. */\n\n\n  return found ? low : ~low;\n}\n/**\n * Compare function for array sort that is safe for numbers.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\n\nexport function numberSafeCompareFunction(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n/**\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\n * of this type to determine which nearest resolution to use.\n *\n * This function takes a `{number}` representing a value between two array entries,\n * a `{number}` representing the value of the nearest higher entry and\n * a `{number}` representing the value of the nearest lower entry\n * as arguments and returns a `{number}`. If a negative number or zero is returned\n * the lower value will be used, if a positive number is returned the higher value\n * will be used.\n * @typedef {function(number, number, number): number} NearestDirectionFunction\n * @api\n */\n\n/**\n * @param {Array<number>} arr Array in descending order.\n * @param {number} target Target.\n * @param {number|NearestDirectionFunction} direction\n *    0 means return the nearest,\n *    > 0 means return the largest nearest,\n *    < 0 means return the smallest nearest.\n * @return {number} Index.\n */\n\nexport function linearFindNearest(arr, target, direction) {\n  const n = arr.length;\n\n  if (arr[0] <= target) {\n    return 0;\n  } else if (target <= arr[n - 1]) {\n    return n - 1;\n  } else {\n    let i;\n\n    if (direction > 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] < target) {\n          return i - 1;\n        }\n      }\n    } else if (direction < 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] <= target) {\n          return i;\n        }\n      }\n    } else {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] == target) {\n          return i;\n        } else if (arr[i] < target) {\n          if (typeof direction === 'function') {\n            if (direction(target, arr[i - 1], arr[i]) > 0) {\n              return i - 1;\n            } else {\n              return i;\n            }\n          } else if (arr[i - 1] - target < target - arr[i]) {\n            return i - 1;\n          } else {\n            return i;\n          }\n        }\n      }\n    }\n\n    return n - 1;\n  }\n}\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\n\nexport function reverseSubArray(arr, begin, end) {\n  while (begin < end) {\n    const tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n}\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\n\nexport function extend(arr, data) {\n  const extension = Array.isArray(data) ? data : [data];\n  const length = extension.length;\n\n  for (let i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n}\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\n\nexport function remove(arr, obj) {\n  const i = arr.indexOf(obj);\n  const found = i > -1;\n\n  if (found) {\n    arr.splice(i, 1);\n  }\n\n  return found;\n}\n/**\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\n\nexport function equals(arr1, arr2) {\n  const len1 = arr1.length;\n\n  if (len1 !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Sort the passed array such that the relative order of equal elements is preserved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\n\nexport function stableSort(arr, compareFnc) {\n  const length = arr.length;\n  const tmp = Array(arr.length);\n  let i;\n\n  for (i = 0; i < length; i++) {\n    tmp[i] = {\n      index: i,\n      value: arr[i]\n    };\n  }\n\n  tmp.sort(function (a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n}\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function} [func] Comparison function.\n * @param {boolean} [strict] Strictly sorted (default false).\n * @return {boolean} Return index.\n */\n\nexport function isSorted(arr, func, strict) {\n  const compare = func || numberSafeCompareFunction;\n  return arr.every(function (currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n\n    const res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || strict && res === 0);\n  });\n}","map":{"version":3,"names":["binarySearch","haystack","needle","comparator","mid","cmp","numberSafeCompareFunction","low","high","length","found","a","b","linearFindNearest","arr","target","direction","n","i","reverseSubArray","begin","end","tmp","extend","data","extension","Array","isArray","remove","obj","indexOf","splice","equals","arr1","arr2","len1","stableSort","compareFnc","index","value","sort","isSorted","func","strict","compare","every","currentVal","res"],"sources":["D:/Work/Learning/demo/node_modules/ol/array.js"],"sourcesContent":["/**\n * @module ol/array\n */\n\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, comparator) {\n  let mid, cmp;\n  comparator = comparator || numberSafeCompareFunction;\n  let low = 0;\n  let high = haystack.length;\n  let found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + ((high - low) >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) {\n      /* Too low. */\n      low = mid + 1;\n    } else {\n      /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n\n  /* Key not found. */\n  return found ? low : ~low;\n}\n\n/**\n * Compare function for array sort that is safe for numbers.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nexport function numberSafeCompareFunction(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\n/**\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\n * of this type to determine which nearest resolution to use.\n *\n * This function takes a `{number}` representing a value between two array entries,\n * a `{number}` representing the value of the nearest higher entry and\n * a `{number}` representing the value of the nearest lower entry\n * as arguments and returns a `{number}`. If a negative number or zero is returned\n * the lower value will be used, if a positive number is returned the higher value\n * will be used.\n * @typedef {function(number, number, number): number} NearestDirectionFunction\n * @api\n */\n\n/**\n * @param {Array<number>} arr Array in descending order.\n * @param {number} target Target.\n * @param {number|NearestDirectionFunction} direction\n *    0 means return the nearest,\n *    > 0 means return the largest nearest,\n *    < 0 means return the smallest nearest.\n * @return {number} Index.\n */\nexport function linearFindNearest(arr, target, direction) {\n  const n = arr.length;\n  if (arr[0] <= target) {\n    return 0;\n  } else if (target <= arr[n - 1]) {\n    return n - 1;\n  } else {\n    let i;\n    if (direction > 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] < target) {\n          return i - 1;\n        }\n      }\n    } else if (direction < 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] <= target) {\n          return i;\n        }\n      }\n    } else {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] == target) {\n          return i;\n        } else if (arr[i] < target) {\n          if (typeof direction === 'function') {\n            if (direction(target, arr[i - 1], arr[i]) > 0) {\n              return i - 1;\n            } else {\n              return i;\n            }\n          } else if (arr[i - 1] - target < target - arr[i]) {\n            return i - 1;\n          } else {\n            return i;\n          }\n        }\n      }\n    }\n    return n - 1;\n  }\n}\n\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\nexport function reverseSubArray(arr, begin, end) {\n  while (begin < end) {\n    const tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\nexport function extend(arr, data) {\n  const extension = Array.isArray(data) ? data : [data];\n  const length = extension.length;\n  for (let i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\nexport function remove(arr, obj) {\n  const i = arr.indexOf(obj);\n  const found = i > -1;\n  if (found) {\n    arr.splice(i, 1);\n  }\n  return found;\n}\n\n/**\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\nexport function equals(arr1, arr2) {\n  const len1 = arr1.length;\n  if (len1 !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Sort the passed array such that the relative order of equal elements is preserved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\nexport function stableSort(arr, compareFnc) {\n  const length = arr.length;\n  const tmp = Array(arr.length);\n  let i;\n  for (i = 0; i < length; i++) {\n    tmp[i] = {index: i, value: arr[i]};\n  }\n  tmp.sort(function (a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n}\n\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function} [func] Comparison function.\n * @param {boolean} [strict] Strictly sorted (default false).\n * @return {boolean} Return index.\n */\nexport function isSorted(arr, func, strict) {\n  const compare = func || numberSafeCompareFunction;\n  return arr.every(function (currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n    const res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || (strict && res === 0));\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}