{"ast":null,"code":"/**\n * @module ol/geom/LinearRing\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { linearRing as linearRingArea } from './flat/area.js';\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\n\nclass LinearRing extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(layout,\n      /** @type {Array<number>} */\n      coordinates);\n    } else {\n      this.setCoordinates(\n      /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, layout);\n    }\n  }\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   */\n\n\n  clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  }\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  }\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n\n\n  getArea() {\n    return linearRingArea(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n\n\n  getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   */\n\n\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\n  }\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n\n\n  getType() {\n    return 'LinearRing';\n  }\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  intersectsExtent(extent) {\n    return false;\n  }\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n\n\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n\n}\n\nexport default LinearRing;","map":{"version":3,"names":["SimpleGeometry","assignClosestPoint","maxSquaredDelta","closestSquaredDistanceXY","deflateCoordinates","douglasPeucker","inflateCoordinates","linearRing","linearRingArea","LinearRing","constructor","coordinates","layout","maxDelta_","maxDeltaRevision_","undefined","Array","isArray","setFlatCoordinates","setCoordinates","clone","flatCoordinates","slice","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","getArea","getCoordinates","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","getType","intersectsExtent","extent","setLayout","changed"],"sources":["D:/Work/Learning/demo/node_modules/ol/geom/LinearRing.js"],"sourcesContent":["/**\n * @module ol/geom/LinearRing\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {linearRing as linearRingArea} from './flat/area.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nclass LinearRing extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   */\n  clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingArea(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'LinearRing';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default LinearRing;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}