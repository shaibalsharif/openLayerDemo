{"ast":null,"code":"/**\n * @module ol/render/Event\n */\nimport Event from '../events/Event.js';\n\nclass RenderEvent extends Event {\n  /**\n   * @param {import(\"./EventType.js\").default} type Type.\n   * @param {import(\"../transform.js\").Transform} [inversePixelTransform] Transform for\n   *     CSS pixels to rendered pixels.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.\n   */\n  constructor(type, inversePixelTransform, frameState, context) {\n    super(type);\n    /**\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\n     * @type {import(\"../transform.js\").Transform|undefined}\n     * @api\n     */\n\n    this.inversePixelTransform = inversePixelTransform;\n    /**\n     * An object representing the current render frame state.\n     * @type {import(\"../Map.js\").FrameState|undefined}\n     * @api\n     */\n\n    this.frameState = frameState;\n    /**\n     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,\n     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL\n     * context.\n     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}\n     * @api\n     */\n\n    this.context = context;\n  }\n\n}\n\nexport default RenderEvent;","map":{"version":3,"names":["Event","RenderEvent","constructor","type","inversePixelTransform","frameState","context"],"sources":["D:/Work/Learning/demo/node_modules/ol/render/Event.js"],"sourcesContent":["/**\n * @module ol/render/Event\n */\n\nimport Event from '../events/Event.js';\n\nclass RenderEvent extends Event {\n  /**\n   * @param {import(\"./EventType.js\").default} type Type.\n   * @param {import(\"../transform.js\").Transform} [inversePixelTransform] Transform for\n   *     CSS pixels to rendered pixels.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.\n   */\n  constructor(type, inversePixelTransform, frameState, context) {\n    super(type);\n\n    /**\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\n     * @type {import(\"../transform.js\").Transform|undefined}\n     * @api\n     */\n    this.inversePixelTransform = inversePixelTransform;\n\n    /**\n     * An object representing the current render frame state.\n     * @type {import(\"../Map.js\").FrameState|undefined}\n     * @api\n     */\n    this.frameState = frameState;\n\n    /**\n     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,\n     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL\n     * context.\n     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}\n     * @api\n     */\n    this.context = context;\n  }\n}\n\nexport default RenderEvent;\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,WAAN,SAA0BD,KAA1B,CAAgC;EAC9B;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,WAAW,CAACC,IAAD,EAAOC,qBAAP,EAA8BC,UAA9B,EAA0CC,OAA1C,EAAmD;IAC5D,MAAMH,IAAN;IAEA;AACJ;AACA;AACA;AACA;AACA;;IACI,KAAKC,qBAAL,GAA6BA,qBAA7B;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,UAAL,GAAkBA,UAAlB;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,KAAKC,OAAL,GAAeA,OAAf;EACD;;AAlC6B;;AAqChC,eAAeL,WAAf"},"metadata":{},"sourceType":"module"}