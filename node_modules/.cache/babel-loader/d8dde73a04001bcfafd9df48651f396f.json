{"ast":null,"code":"/**\n * @module ol/color\n */\nimport { assert } from './asserts.js';\nimport { clamp } from './math.js';\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\n\nconst HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\n\nconst NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\n\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  } else {\n    return toString(color);\n  }\n}\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\n\nfunction fromNamed(color) {\n  const el = document.createElement('div');\n  el.style.color = color;\n\n  if (el.style.color !== '') {\n    document.body.appendChild(el);\n    const rgb = getComputedStyle(el).color;\n    document.body.removeChild(el);\n    return rgb;\n  } else {\n    return '';\n  }\n}\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\n\n\nexport const fromString = function () {\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n  // semantics, whenever the cache grows too large we simply delete an\n  // arbitrary 25% of the entries.\n\n  /**\n   * @const\n   * @type {number}\n   */\n  const MAX_CACHE_SIZE = 1024;\n  /**\n   * @type {Object<string, Color>}\n   */\n\n  const cache = {};\n  /**\n   * @type {number}\n   */\n\n  let cacheSize = 0;\n  return (\n    /**\n     * @param {string} s String.\n     * @return {Color} Color.\n     */\n    function (s) {\n      let color;\n\n      if (cache.hasOwnProperty(s)) {\n        color = cache[s];\n      } else {\n        if (cacheSize >= MAX_CACHE_SIZE) {\n          let i = 0;\n\n          for (const key in cache) {\n            if ((i++ & 3) === 0) {\n              delete cache[key];\n              --cacheSize;\n            }\n          }\n        }\n\n        color = fromStringInternal_(s);\n        cache[s] = color;\n        ++cacheSize;\n      }\n\n      return color;\n    }\n  );\n}();\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\n\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  } else {\n    return fromString(color);\n  }\n}\n/**\n * @param {string} s String.\n * @private\n * @return {Color} Color.\n */\n\nfunction fromStringInternal_(s) {\n  let r, g, b, a, color;\n\n  if (NAMED_COLOR_RE_.exec(s)) {\n    s = fromNamed(s);\n  }\n\n  if (HEX_COLOR_RE_.exec(s)) {\n    // hex\n    const n = s.length - 1; // number of hex digits\n\n    let d; // number of digits per channel\n\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n\n    const hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n\n    color = [r, g, b, a / 255];\n  } else if (s.startsWith('rgba(')) {\n    // rgba()\n    color = s.slice(5, -1).split(',').map(Number);\n    normalize(color);\n  } else if (s.startsWith('rgb(')) {\n    // rgb()\n    color = s.slice(4, -1).split(',').map(Number);\n    color.push(1);\n    normalize(color);\n  } else {\n    assert(false, 14); // Invalid color\n  }\n\n  return color;\n}\n/**\n * TODO this function is only used in the test, we probably shouldn't export it\n * @param {Color} color Color.\n * @return {Color} Clamped color.\n */\n\n\nexport function normalize(color) {\n  color[0] = clamp(color[0] + 0.5 | 0, 0, 255);\n  color[1] = clamp(color[1] + 0.5 | 0, 0, 255);\n  color[2] = clamp(color[2] + 0.5 | 0, 0, 255);\n  color[3] = clamp(color[3], 0, 1);\n  return color;\n}\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\n\nexport function toString(color) {\n  let r = color[0];\n\n  if (r != (r | 0)) {\n    r = r + 0.5 | 0;\n  }\n\n  let g = color[1];\n\n  if (g != (g | 0)) {\n    g = g + 0.5 | 0;\n  }\n\n  let b = color[2];\n\n  if (b != (b | 0)) {\n    b = b + 0.5 | 0;\n  }\n\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\n\nexport function isStringColor(s) {\n  if (NAMED_COLOR_RE_.test(s)) {\n    s = fromNamed(s);\n  }\n\n  return HEX_COLOR_RE_.test(s) || s.startsWith('rgba(') || s.startsWith('rgb(');\n}","map":{"version":3,"names":["assert","clamp","HEX_COLOR_RE_","NAMED_COLOR_RE_","asString","color","toString","fromNamed","el","document","createElement","style","body","appendChild","rgb","getComputedStyle","removeChild","fromString","MAX_CACHE_SIZE","cache","cacheSize","s","hasOwnProperty","i","key","fromStringInternal_","asArray","Array","isArray","r","g","b","a","exec","n","length","d","hasAlpha","parseInt","substr","startsWith","slice","split","map","Number","normalize","push","undefined","Math","round","isStringColor","test"],"sources":["D:/Work/Learning/demo/node_modules/ol/color.js"],"sourcesContent":["/**\n * @module ol/color\n */\nimport {assert} from './asserts.js';\nimport {clamp} from './math.js';\n\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\nconst HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\n\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\nconst NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\n\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  } else {\n    return toString(color);\n  }\n}\n\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\nfunction fromNamed(color) {\n  const el = document.createElement('div');\n  el.style.color = color;\n  if (el.style.color !== '') {\n    document.body.appendChild(el);\n    const rgb = getComputedStyle(el).color;\n    document.body.removeChild(el);\n    return rgb;\n  } else {\n    return '';\n  }\n}\n\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\nexport const fromString = (function () {\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n  // semantics, whenever the cache grows too large we simply delete an\n  // arbitrary 25% of the entries.\n\n  /**\n   * @const\n   * @type {number}\n   */\n  const MAX_CACHE_SIZE = 1024;\n\n  /**\n   * @type {Object<string, Color>}\n   */\n  const cache = {};\n\n  /**\n   * @type {number}\n   */\n  let cacheSize = 0;\n\n  return (\n    /**\n     * @param {string} s String.\n     * @return {Color} Color.\n     */\n    function (s) {\n      let color;\n      if (cache.hasOwnProperty(s)) {\n        color = cache[s];\n      } else {\n        if (cacheSize >= MAX_CACHE_SIZE) {\n          let i = 0;\n          for (const key in cache) {\n            if ((i++ & 3) === 0) {\n              delete cache[key];\n              --cacheSize;\n            }\n          }\n        }\n        color = fromStringInternal_(s);\n        cache[s] = color;\n        ++cacheSize;\n      }\n      return color;\n    }\n  );\n})();\n\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  } else {\n    return fromString(color);\n  }\n}\n\n/**\n * @param {string} s String.\n * @private\n * @return {Color} Color.\n */\nfunction fromStringInternal_(s) {\n  let r, g, b, a, color;\n\n  if (NAMED_COLOR_RE_.exec(s)) {\n    s = fromNamed(s);\n  }\n\n  if (HEX_COLOR_RE_.exec(s)) {\n    // hex\n    const n = s.length - 1; // number of hex digits\n    let d; // number of digits per channel\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n    const hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n    color = [r, g, b, a / 255];\n  } else if (s.startsWith('rgba(')) {\n    // rgba()\n    color = s.slice(5, -1).split(',').map(Number);\n    normalize(color);\n  } else if (s.startsWith('rgb(')) {\n    // rgb()\n    color = s.slice(4, -1).split(',').map(Number);\n    color.push(1);\n    normalize(color);\n  } else {\n    assert(false, 14); // Invalid color\n  }\n  return color;\n}\n\n/**\n * TODO this function is only used in the test, we probably shouldn't export it\n * @param {Color} color Color.\n * @return {Color} Clamped color.\n */\nexport function normalize(color) {\n  color[0] = clamp((color[0] + 0.5) | 0, 0, 255);\n  color[1] = clamp((color[1] + 0.5) | 0, 0, 255);\n  color[2] = clamp((color[2] + 0.5) | 0, 0, 255);\n  color[3] = clamp(color[3], 0, 1);\n  return color;\n}\n\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\nexport function toString(color) {\n  let r = color[0];\n  if (r != (r | 0)) {\n    r = (r + 0.5) | 0;\n  }\n  let g = color[1];\n  if (g != (g | 0)) {\n    g = (g + 0.5) | 0;\n  }\n  let b = color[2];\n  if (b != (b | 0)) {\n    b = (b + 0.5) | 0;\n  }\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\nexport function isStringColor(s) {\n  if (NAMED_COLOR_RE_.test(s)) {\n    s = fromNamed(s);\n  }\n  return HEX_COLOR_RE_.test(s) || s.startsWith('rgba(') || s.startsWith('rgb(');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}