{"ast":null,"code":"/**\n * @module ol/interaction/KeyboardPan\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, { pan } from './Interaction.js';\nimport KeyCode from '../events/KeyCode.js';\nimport { noModifierKeys, targetNotEditable } from '../events/condition.js';\nimport { rotate as rotateCoordinate } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.noModifierKeys} and\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\n\nclass KeyboardPan extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n\n    this.defaultCondition_ = function (mapBrowserEvent) {\n      return noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent);\n    };\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n\n    this.condition_ = options.condition !== undefined ? options.condition : this.defaultCondition_;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;\n  }\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n   * pressed).\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardPan}\n   */\n\n\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n\n    if (mapBrowserEvent.type == EventType.KEYDOWN) {\n      const keyEvent =\n      /** @type {KeyboardEvent} */\n      mapBrowserEvent.originalEvent;\n      const keyCode = keyEvent.keyCode;\n\n      if (this.condition_(mapBrowserEvent) && (keyCode == KeyCode.DOWN || keyCode == KeyCode.LEFT || keyCode == KeyCode.RIGHT || keyCode == KeyCode.UP)) {\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n        let deltaX = 0,\n            deltaY = 0;\n\n        if (keyCode == KeyCode.DOWN) {\n          deltaY = -mapUnitsDelta;\n        } else if (keyCode == KeyCode.LEFT) {\n          deltaX = -mapUnitsDelta;\n        } else if (keyCode == KeyCode.RIGHT) {\n          deltaX = mapUnitsDelta;\n        } else {\n          deltaY = mapUnitsDelta;\n        }\n\n        const delta = [deltaX, deltaY];\n        rotateCoordinate(delta, view.getRotation());\n        pan(view, delta, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n\n    return !stopEvent;\n  }\n\n}\n\nexport default KeyboardPan;","map":{"version":3,"names":["EventType","Interaction","pan","KeyCode","noModifierKeys","targetNotEditable","rotate","rotateCoordinate","KeyboardPan","constructor","options","defaultCondition_","mapBrowserEvent","condition_","condition","undefined","duration_","duration","pixelDelta_","pixelDelta","handleEvent","stopEvent","type","KEYDOWN","keyEvent","originalEvent","keyCode","DOWN","LEFT","RIGHT","UP","map","view","getView","mapUnitsDelta","getResolution","deltaX","deltaY","delta","getRotation","preventDefault"],"sources":["D:/Work/Learning/demo/node_modules/ol/interaction/KeyboardPan.js"],"sourcesContent":["/**\n * @module ol/interaction/KeyboardPan\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {pan} from './Interaction.js';\nimport KeyCode from '../events/KeyCode.js';\nimport {noModifierKeys, targetNotEditable} from '../events/condition.js';\nimport {rotate as rotateCoordinate} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.noModifierKeys} and\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\nclass KeyboardPan extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options || {};\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultCondition_ = function (mapBrowserEvent) {\n      return (\n        noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent)\n      );\n    };\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ =\n      options.condition !== undefined\n        ? options.condition\n        : this.defaultCondition_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelDelta_ =\n      options.pixelDelta !== undefined ? options.pixelDelta : 128;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n   * pressed).\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardPan}\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (mapBrowserEvent.type == EventType.KEYDOWN) {\n      const keyEvent = /** @type {KeyboardEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const keyCode = keyEvent.keyCode;\n      if (\n        this.condition_(mapBrowserEvent) &&\n        (keyCode == KeyCode.DOWN ||\n          keyCode == KeyCode.LEFT ||\n          keyCode == KeyCode.RIGHT ||\n          keyCode == KeyCode.UP)\n      ) {\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n        let deltaX = 0,\n          deltaY = 0;\n        if (keyCode == KeyCode.DOWN) {\n          deltaY = -mapUnitsDelta;\n        } else if (keyCode == KeyCode.LEFT) {\n          deltaX = -mapUnitsDelta;\n        } else if (keyCode == KeyCode.RIGHT) {\n          deltaX = mapUnitsDelta;\n        } else {\n          deltaY = mapUnitsDelta;\n        }\n        const delta = [deltaX, deltaY];\n        rotateCoordinate(delta, view.getRotation());\n        pan(view, delta, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\n\nexport default KeyboardPan;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}