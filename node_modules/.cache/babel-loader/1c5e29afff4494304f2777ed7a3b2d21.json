{"ast":null,"code":"/**\n * @module ol/interaction/PinchRotate\n */\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\n\nclass PinchRotate extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const pointerOptions =\n    /** @type {import(\"./Pointer.js\").Options} */\n    options;\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n\n    this.anchor_ = null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.rotating_ = false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.rotationDelta_ = 0.0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n\n\n  handleDragEvent(mapBrowserEvent) {\n    let rotationDelta = 0.0;\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1]; // angle between touches\n\n    const angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n\n    if (this.lastAngle_ !== undefined) {\n      const delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n\n      rotationDelta = delta;\n    }\n\n    this.lastAngle_ = angle;\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n\n    if (view.getConstraints().rotation === disable) {\n      return;\n    } // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n\n\n    const viewportPosition = map.getViewport().getBoundingClientRect();\n    const centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixelInternal(centroid); // rotate\n\n    if (this.rotating_) {\n      map.render();\n      view.adjustRotationInternal(rotationDelta, this.anchor_);\n    }\n  }\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      view.endInteraction(this.duration_);\n      return false;\n    } else {\n      return true;\n    }\n  }\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n}\n\nexport default PinchRotate;","map":{"version":3,"names":["PointerInteraction","centroid","centroidFromPointers","FALSE","disable","PinchRotate","constructor","options","pointerOptions","stopDown","anchor_","lastAngle_","undefined","rotating_","rotationDelta_","threshold_","threshold","duration_","duration","handleDragEvent","mapBrowserEvent","rotationDelta","touch0","targetPointers","touch1","angle","Math","atan2","clientY","clientX","delta","abs","map","view","getView","getConstraints","rotation","viewportPosition","getViewport","getBoundingClientRect","left","top","getCoordinateFromPixelInternal","render","adjustRotationInternal","handleUpEvent","length","endInteraction","handleDownEvent","handlingDownUpSequence","beginInteraction"],"sources":["D:/Work/Learning/demo/node_modules/ol/interaction/PinchRotate.js"],"sourcesContent":["/**\n * @module ol/interaction/PinchRotate\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {disable} from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchRotate extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotating_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotationDelta_ = 0.0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let rotationDelta = 0.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n\n    // angle between touches\n    const angle = Math.atan2(\n      touch1.clientY - touch0.clientY,\n      touch1.clientX - touch0.clientX\n    );\n\n    if (this.lastAngle_ !== undefined) {\n      const delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n      rotationDelta = delta;\n    }\n    this.lastAngle_ = angle;\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n    const viewportPosition = map.getViewport().getBoundingClientRect();\n    const centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixelInternal(centroid);\n\n    // rotate\n    if (this.rotating_) {\n      map.render();\n      view.adjustRotationInternal(rotationDelta, this.anchor_);\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      view.endInteraction(this.duration_);\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default PinchRotate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}