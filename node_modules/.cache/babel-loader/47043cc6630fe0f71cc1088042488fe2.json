{"ast":null,"code":"/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport { IMAGE_DECODE } from './has.js';\nimport { getHeight } from './extent.js';\nimport { listenOnce, unlistenByKey } from './events.js';\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\n\nclass ImageWrapper extends ImageBase {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   */\n  constructor(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n    super(extent, resolution, pixelRatio, ImageState.IDLE);\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.src_ = src;\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n\n    this.image_ = new Image();\n\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n    /**\n     * @private\n     * @type {?function():void}\n     */\n\n\n    this.unlisten_ = null;\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n\n    this.state = ImageState.IDLE;\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n\n    this.imageLoadFunction_ = imageLoadFunction;\n  }\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n\n\n  getImage() {\n    return this.image_;\n  }\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n\n\n  handleImageError_() {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  }\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n\n\n  handleImageLoad_() {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @api\n   */\n\n\n  load() {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n    }\n  }\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n\n\n  setImage(image) {\n    this.image_ = image;\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n\n\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n\n}\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\n\n\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img =\n  /** @type {HTMLImageElement} */\n  image;\n  let listening = true;\n  let decoding = false;\n  let loaded = false;\n  const listenerKeys = [listenOnce(img, EventType.LOAD, function () {\n    loaded = true;\n\n    if (!decoding) {\n      loadHandler();\n    }\n  })];\n\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img.decode().then(function () {\n      if (listening) {\n        loadHandler();\n      }\n    }).catch(function (error) {\n      if (listening) {\n        if (loaded) {\n          loadHandler();\n        } else {\n          errorHandler();\n        }\n      }\n    });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\nexport default ImageWrapper;","map":{"version":3,"names":["EventType","ImageBase","ImageState","IMAGE_DECODE","getHeight","listenOnce","unlistenByKey","ImageWrapper","constructor","extent","resolution","pixelRatio","src","crossOrigin","imageLoadFunction","IDLE","src_","image_","Image","unlisten_","state","imageLoadFunction_","getImage","handleImageError_","ERROR","unlistenImage_","changed","handleImageLoad_","undefined","height","LOADED","load","LOADING","listenImage","bind","setImage","image","loadHandler","errorHandler","img","listening","decoding","loaded","listenerKeys","LOAD","decode","then","catch","error","push","unlisten","forEach"],"sources":["D:/Work/Learning/demo/node_modules/ol/Image.js"],"sourcesContent":["/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport {IMAGE_DECODE} from './has.js';\nimport {getHeight} from './extent.js';\nimport {listenOnce, unlistenByKey} from './events.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\n\nclass ImageWrapper extends ImageBase {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   */\n  constructor(\n    extent,\n    resolution,\n    pixelRatio,\n    src,\n    crossOrigin,\n    imageLoadFunction\n  ) {\n    super(extent, resolution, pixelRatio, ImageState.IDLE);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state = ImageState.IDLE;\n\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n    this.imageLoadFunction_ = imageLoadFunction;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @api\n   */\n  load() {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n  setImage(image) {\n    this.image_ = image;\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */ (image);\n  let listening = true;\n  let decoding = false;\n  let loaded = false;\n\n  const listenerKeys = [\n    listenOnce(img, EventType.LOAD, function () {\n      loaded = true;\n      if (!decoding) {\n        loadHandler();\n      }\n    }),\n  ];\n\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img\n      .decode()\n      .then(function () {\n        if (listening) {\n          loadHandler();\n        }\n      })\n      .catch(function (error) {\n        if (listening) {\n          if (loaded) {\n            loadHandler();\n          } else {\n            errorHandler();\n          }\n        }\n      });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\n\nexport default ImageWrapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}