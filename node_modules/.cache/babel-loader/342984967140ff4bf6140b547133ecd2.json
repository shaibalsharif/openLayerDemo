{"ast":null,"code":"/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */\nexport function padNumber(number, width, precision) {\n  const numberString = precision !== undefined ? number.toFixed(precision) : '' + number;\n  let decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;\n}\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @return {number} Value\n */\n\nexport function compareVersions(v1, v2) {\n  const s1 = ('' + v1).split('.');\n  const s2 = ('' + v2).split('.');\n\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\n    const n1 = parseInt(s1[i] || '0', 10);\n    const n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}","map":{"version":3,"names":["padNumber","number","width","precision","numberString","undefined","toFixed","decimal","indexOf","length","Array","join","compareVersions","v1","v2","s1","split","s2","i","Math","max","n1","parseInt","n2"],"sources":["D:/Work/Learning/demo/node_modules/ol/string.js"],"sourcesContent":["/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */\nexport function padNumber(number, width, precision) {\n  const numberString =\n    precision !== undefined ? number.toFixed(precision) : '' + number;\n  let decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width\n    ? numberString\n    : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @return {number} Value\n */\nexport function compareVersions(v1, v2) {\n  const s1 = ('' + v1).split('.');\n  const s2 = ('' + v2).split('.');\n\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\n    const n1 = parseInt(s1[i] || '0', 10);\n    const n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkCC,SAAlC,EAA6C;EAClD,MAAMC,YAAY,GAChBD,SAAS,KAAKE,SAAd,GAA0BJ,MAAM,CAACK,OAAP,CAAeH,SAAf,CAA1B,GAAsD,KAAKF,MAD7D;EAEA,IAAIM,OAAO,GAAGH,YAAY,CAACI,OAAb,CAAqB,GAArB,CAAd;EACAD,OAAO,GAAGA,OAAO,KAAK,CAAC,CAAb,GAAiBH,YAAY,CAACK,MAA9B,GAAuCF,OAAjD;EACA,OAAOA,OAAO,GAAGL,KAAV,GACHE,YADG,GAEH,IAAIM,KAAJ,CAAU,IAAIR,KAAJ,GAAYK,OAAtB,EAA+BI,IAA/B,CAAoC,GAApC,IAA2CP,YAF/C;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,eAAT,CAAyBC,EAAzB,EAA6BC,EAA7B,EAAiC;EACtC,MAAMC,EAAE,GAAG,CAAC,KAAKF,EAAN,EAAUG,KAAV,CAAgB,GAAhB,CAAX;EACA,MAAMC,EAAE,GAAG,CAAC,KAAKH,EAAN,EAAUE,KAAV,CAAgB,GAAhB,CAAX;;EAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASL,EAAE,CAACN,MAAZ,EAAoBQ,EAAE,CAACR,MAAvB,CAApB,EAAoDS,CAAC,EAArD,EAAyD;IACvD,MAAMG,EAAE,GAAGC,QAAQ,CAACP,EAAE,CAACG,CAAD,CAAF,IAAS,GAAV,EAAe,EAAf,CAAnB;IACA,MAAMK,EAAE,GAAGD,QAAQ,CAACL,EAAE,CAACC,CAAD,CAAF,IAAS,GAAV,EAAe,EAAf,CAAnB;;IAEA,IAAIG,EAAE,GAAGE,EAAT,EAAa;MACX,OAAO,CAAP;IACD;;IACD,IAAIA,EAAE,GAAGF,EAAT,EAAa;MACX,OAAO,CAAC,CAAR;IACD;EACF;;EAED,OAAO,CAAP;AACD"},"metadata":{},"sourceType":"module"}