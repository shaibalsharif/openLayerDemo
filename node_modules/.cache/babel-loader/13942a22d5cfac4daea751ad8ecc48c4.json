{"ast":null,"code":"/**\n * @module ol/coordinate\n */\nimport { getWidth } from './extent.js';\nimport { modulo, toFixed } from './math.js';\nimport { padNumber } from './string.js';\n/**\n * An array of numbers representing an xy coordinate. Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\n\nexport function add(coordinate, delta) {\n  coordinate[0] += +delta[0];\n  coordinate[1] += +delta[1];\n  return coordinate;\n}\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\n\nexport function closestOnCircle(coordinate, circle) {\n  const r = circle.getRadius();\n  const center = circle.getCenter();\n  const x0 = center[0];\n  const y0 = center[1];\n  const x1 = coordinate[0];\n  const y1 = coordinate[1];\n  let dx = x1 - x0;\n  const dy = y1 - y0;\n\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n\n  const d = Math.sqrt(dx * dx + dy * dy);\n  const x = x0 + r * dx / d;\n  const y = y0 + r * dy / d;\n  return [x, y];\n}\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\n\nexport function closestOnSegment(coordinate, segment) {\n  const x0 = coordinate[0];\n  const y0 = coordinate[1];\n  const start = segment[0];\n  const end = segment[1];\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  let x, y;\n\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n\n  return [x, y];\n}\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY();\n *     const out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY(2);\n *     const out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\n\nexport function createStringXY(fractionDigits) {\n  return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return toStringXY(coordinate, fractionDigits);\n    }\n  );\n}\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\n\nexport function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {\n  const normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  const x = Math.abs(3600 * normalizedDegrees);\n  const decimals = fractionDigits || 0;\n  let deg = Math.floor(x / 3600);\n  let min = Math.floor((x - deg * 3600) / 60);\n  let sec = toFixed(x - deg * 3600 - min * 60, decimals);\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  let hdms = deg + '\\u00b0';\n\n  if (min !== 0 || sec !== 0) {\n    hdms += ' ' + padNumber(min, 2) + '\\u2032';\n  }\n\n  if (sec !== 0) {\n    hdms += ' ' + padNumber(sec, 2, decimals) + '\\u2033';\n  }\n\n  if (normalizedDegrees !== 0) {\n    hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n  }\n\n  return hdms;\n}\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\n\nexport function format(coordinate, template, fractionDigits) {\n  if (coordinate) {\n    return template.replace('{x}', coordinate[0].toFixed(fractionDigits)).replace('{y}', coordinate[1].toFixed(fractionDigits));\n  } else {\n    return '';\n  }\n}\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\n\nexport function equals(coordinate1, coordinate2) {\n  let equals = true;\n\n  for (let i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n\n  return equals;\n}\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\n\nexport function rotate(coordinate, angle) {\n  const cosAngle = Math.cos(angle);\n  const sinAngle = Math.sin(angle);\n  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\n\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\n\nexport function squaredDistance(coord1, coord2) {\n  const dx = coord1[0] - coord2[0];\n  const dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\n\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\n\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\n\nexport function toStringHDMS(coordinate, fractionDigits) {\n  if (coordinate) {\n    return degreesToStringHDMS('NS', coordinate[1], fractionDigits) + ' ' + degreesToStringHDMS('EW', coordinate[0], fractionDigits);\n  } else {\n    return '';\n  }\n}\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\n\nexport function toStringXY(coordinate, fractionDigits) {\n  return format(coordinate, '{x}, {y}', fractionDigits);\n}\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */\n\nexport function wrapX(coordinate, projection) {\n  if (projection.canWrapX()) {\n    const worldWidth = getWidth(projection.getExtent());\n    const worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n\n    if (worldsAway) {\n      coordinate[0] -= worldsAway * worldWidth;\n    }\n  }\n\n  return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number} [sourceExtentWidth] Width of the source extent.\n * @return {number} Offset in world widths.\n */\n\nexport function getWorldsAway(coordinate, projection, sourceExtentWidth) {\n  const projectionExtent = projection.getExtent();\n  let worldsAway = 0;\n\n  if (projection.canWrapX() && (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {\n    sourceExtentWidth = sourceExtentWidth || getWidth(projectionExtent);\n    worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);\n  }\n\n  return worldsAway;\n}","map":{"version":3,"names":["getWidth","modulo","toFixed","padNumber","add","coordinate","delta","closestOnCircle","circle","r","getRadius","center","getCenter","x0","y0","x1","y1","dx","dy","d","Math","sqrt","x","y","closestOnSegment","segment","start","end","x2","y2","along","createStringXY","fractionDigits","toStringXY","degreesToStringHDMS","hemispheres","degrees","normalizedDegrees","abs","decimals","deg","floor","min","sec","hdms","charAt","format","template","replace","equals","coordinate1","coordinate2","i","length","rotate","angle","cosAngle","cos","sinAngle","sin","scale","squaredDistance","coord1","coord2","distance","squaredDistanceToSegment","toStringHDMS","wrapX","projection","canWrapX","worldWidth","getExtent","worldsAway","getWorldsAway","sourceExtentWidth","projectionExtent"],"sources":["D:/Work/Learning/demo/node_modules/ol/coordinate.js"],"sourcesContent":["/**\n * @module ol/coordinate\n */\nimport {getWidth} from './extent.js';\nimport {modulo, toFixed} from './math.js';\nimport {padNumber} from './string.js';\n\n/**\n * An array of numbers representing an xy coordinate. Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n  coordinate[0] += +delta[0];\n  coordinate[1] += +delta[1];\n  return coordinate;\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n  const r = circle.getRadius();\n  const center = circle.getCenter();\n  const x0 = center[0];\n  const y0 = center[1];\n  const x1 = coordinate[0];\n  const y1 = coordinate[1];\n\n  let dx = x1 - x0;\n  const dy = y1 - y0;\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n  const d = Math.sqrt(dx * dx + dy * dy);\n\n  const x = x0 + (r * dx) / d;\n  const y = y0 + (r * dy) / d;\n\n  return [x, y];\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n  const x0 = coordinate[0];\n  const y0 = coordinate[1];\n  const start = segment[0];\n  const end = segment[1];\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const along =\n    dx === 0 && dy === 0\n      ? 0\n      : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  let x, y;\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n  return [x, y];\n}\n\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY();\n *     const out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY(2);\n *     const out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(fractionDigits) {\n  return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return toStringXY(coordinate, fractionDigits);\n    }\n  );\n}\n\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {\n  const normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  const x = Math.abs(3600 * normalizedDegrees);\n  const decimals = fractionDigits || 0;\n\n  let deg = Math.floor(x / 3600);\n  let min = Math.floor((x - deg * 3600) / 60);\n  let sec = toFixed(x - deg * 3600 - min * 60, decimals);\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  let hdms = deg + '\\u00b0';\n  if (min !== 0 || sec !== 0) {\n    hdms += ' ' + padNumber(min, 2) + '\\u2032';\n  }\n  if (sec !== 0) {\n    hdms += ' ' + padNumber(sec, 2, decimals) + '\\u2033';\n  }\n  if (normalizedDegrees !== 0) {\n    hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n  }\n\n  return hdms;\n}\n\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, fractionDigits) {\n  if (coordinate) {\n    return template\n      .replace('{x}', coordinate[0].toFixed(fractionDigits))\n      .replace('{y}', coordinate[1].toFixed(fractionDigits));\n  } else {\n    return '';\n  }\n}\n\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n  let equals = true;\n  for (let i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n  return equals;\n}\n\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n  const cosAngle = Math.cos(angle);\n  const sinAngle = Math.sin(angle);\n  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n  const dx = coord1[0] - coord2[0];\n  const dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, fractionDigits) {\n  if (coordinate) {\n    return (\n      degreesToStringHDMS('NS', coordinate[1], fractionDigits) +\n      ' ' +\n      degreesToStringHDMS('EW', coordinate[0], fractionDigits)\n    );\n  } else {\n    return '';\n  }\n}\n\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, fractionDigits) {\n  return format(coordinate, '{x}, {y}', fractionDigits);\n}\n\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */\nexport function wrapX(coordinate, projection) {\n  if (projection.canWrapX()) {\n    const worldWidth = getWidth(projection.getExtent());\n    const worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n    if (worldsAway) {\n      coordinate[0] -= worldsAway * worldWidth;\n    }\n  }\n  return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number} [sourceExtentWidth] Width of the source extent.\n * @return {number} Offset in world widths.\n */\nexport function getWorldsAway(coordinate, projection, sourceExtentWidth) {\n  const projectionExtent = projection.getExtent();\n  let worldsAway = 0;\n  if (\n    projection.canWrapX() &&\n    (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])\n  ) {\n    sourceExtentWidth = sourceExtentWidth || getWidth(projectionExtent);\n    worldsAway = Math.floor(\n      (coordinate[0] - projectionExtent[0]) / sourceExtentWidth\n    );\n  }\n  return worldsAway;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}