{"ast":null,"code":"/**\n * @module ol/control/Attribution\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { equals } from '../array.js';\nimport { inView } from '../layer/Layer.js';\nimport { removeChildren, replaceNode } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string|HTMLElement} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\n * collapsed attributions button.\n * @property {string|HTMLElement} [collapseLabel='â€º'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\n * expanded attributions button.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\n\nclass Attribution extends Control {\n  /**\n   * @param {Options} [options] Attribution options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    });\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    this.ulElement_ = document.createElement('ul');\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.userCollapsed_ = this.collapsed_;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.overrideCollapsible_ = options.collapsible !== undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    const className = options.className !== undefined ? options.className : 'ol-attribution';\n    const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n    const expandClassName = options.expandClassName !== undefined ? options.expandClassName : className + '-expand';\n    const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u203A';\n    const collapseClassName = options.collapseClassName !== undefined ? options.collapseClassName : className + '-collapse';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n      this.collapseLabel_.className = collapseClassName;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n      this.label_.className = expandClassName;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    this.toggleButton_ = document.createElement('button');\n    this.toggleButton_.setAttribute('type', 'button');\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n    this.toggleButton_.title = tipLabel;\n    this.toggleButton_.appendChild(activeLabel);\n    this.toggleButton_.addEventListener(EventType.CLICK, this.handleClick_.bind(this), false);\n    const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.toggleButton_);\n    element.appendChild(this.ulElement_);\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n\n    this.renderedAttributions_ = [];\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.renderedVisible_ = true;\n  }\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n\n\n  collectSourceAttributions_(frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    const lookup = {};\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n\n    const visibleAttributions = [];\n    let collapsible = true;\n    const layerStatesArray = frameState.layerStatesArray;\n\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layerState = layerStatesArray[i];\n\n      if (!inView(layerState, frameState.viewState)) {\n        continue;\n      }\n\n      const source =\n      /** @type {import(\"../layer/Layer.js\").default} */\n      layerState.layer.getSource();\n\n      if (!source) {\n        continue;\n      }\n\n      const attributionGetter = source.getAttributions();\n\n      if (!attributionGetter) {\n        continue;\n      }\n\n      const attributions = attributionGetter(frameState);\n\n      if (!attributions) {\n        continue;\n      }\n\n      collapsible = collapsible && source.getAttributionsCollapsible() !== false;\n\n      if (Array.isArray(attributions)) {\n        for (let j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n\n    if (!this.overrideCollapsible_) {\n      this.setCollapsible(collapsible);\n    }\n\n    return visibleAttributions;\n  }\n  /**\n   * @private\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n\n\n  updateElement_(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n\n      return;\n    }\n\n    const attributions = this.collectSourceAttributions_(frameState);\n    const visible = attributions.length > 0;\n\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_); // append the attributions\n\n    for (let i = 0, ii = attributions.length; i < ii; ++i) {\n      const element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n    this.userCollapsed_ = this.collapsed_;\n  }\n  /**\n   * @private\n   */\n\n\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n\n    this.collapsed_ = !this.collapsed_;\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n  }\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n\n\n  getCollapsible() {\n    return this.collapsible_;\n  }\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n\n\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n\n    if (this.userCollapsed_) {\n      this.handleToggle_();\n    }\n  }\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n\n\n  setCollapsed(collapsed) {\n    this.userCollapsed_ = collapsed;\n\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n\n    this.handleToggle_();\n  }\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n\n\n  getCollapsed() {\n    return this.collapsed_;\n  }\n  /**\n   * Update the attribution element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n\n\n  render(mapEvent) {\n    this.updateElement_(mapEvent.frameState);\n  }\n\n}\n\nexport default Attribution;","map":{"version":3,"names":["Control","EventType","CLASS_COLLAPSED","CLASS_CONTROL","CLASS_UNSELECTABLE","equals","inView","removeChildren","replaceNode","Attribution","constructor","options","element","document","createElement","render","target","ulElement_","collapsed_","collapsed","undefined","userCollapsed_","overrideCollapsible_","collapsible","collapsible_","className","tipLabel","expandClassName","collapseLabel","collapseClassName","collapseLabel_","textContent","label","label_","activeLabel","toggleButton_","setAttribute","String","title","appendChild","addEventListener","CLICK","handleClick_","bind","cssClasses","renderedAttributions_","renderedVisible_","collectSourceAttributions_","frameState","lookup","visibleAttributions","layerStatesArray","i","ii","length","layerState","viewState","source","layer","getSource","attributionGetter","getAttributions","attributions","getAttributionsCollapsible","Array","isArray","j","jj","push","setCollapsible","updateElement_","style","display","visible","innerHTML","event","preventDefault","handleToggle_","classList","toggle","getCollapsible","setCollapsed","getCollapsed","mapEvent"],"sources":["D:/Work/Learning/demo/node_modules/ol/control/Attribution.js"],"sourcesContent":["/**\n * @module ol/control/Attribution\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {equals} from '../array.js';\nimport {inView} from '../layer/Layer.js';\nimport {removeChildren, replaceNode} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string|HTMLElement} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\n * collapsed attributions button.\n * @property {string|HTMLElement} [collapseLabel='â€º'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\n * expanded attributions button.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nclass Attribution extends Control {\n  /**\n   * @param {Options} [options] Attribution options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.ulElement_ = document.createElement('ul');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsed_ =\n      options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.userCollapsed_ = this.collapsed_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overrideCollapsible_ = options.collapsible !== undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ =\n      options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-attribution';\n\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n\n    const expandClassName =\n      options.expandClassName !== undefined\n        ? options.expandClassName\n        : className + '-expand';\n\n    const collapseLabel =\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u203A';\n\n    const collapseClassName =\n      options.collapseClassName !== undefined\n        ? options.collapseClassName\n        : className + '-collapse';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n      this.collapseLabel_.className = collapseClassName;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n      this.label_.className = expandClassName;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel =\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.toggleButton_ = document.createElement('button');\n    this.toggleButton_.setAttribute('type', 'button');\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n    this.toggleButton_.title = tipLabel;\n    this.toggleButton_.appendChild(activeLabel);\n\n    this.toggleButton_.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    const cssClasses =\n      className +\n      ' ' +\n      CLASS_UNSELECTABLE +\n      ' ' +\n      CLASS_CONTROL +\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.toggleButton_);\n    element.appendChild(this.ulElement_);\n\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n    this.renderedAttributions_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n  }\n\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n  collectSourceAttributions_(frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    const lookup = {};\n\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n    const visibleAttributions = [];\n\n    let collapsible = true;\n    const layerStatesArray = frameState.layerStatesArray;\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layerState = layerStatesArray[i];\n      if (!inView(layerState, frameState.viewState)) {\n        continue;\n      }\n\n      const source = /** @type {import(\"../layer/Layer.js\").default} */ (\n        layerState.layer\n      ).getSource();\n      if (!source) {\n        continue;\n      }\n\n      const attributionGetter = source.getAttributions();\n      if (!attributionGetter) {\n        continue;\n      }\n\n      const attributions = attributionGetter(frameState);\n      if (!attributions) {\n        continue;\n      }\n\n      collapsible =\n        collapsible && source.getAttributionsCollapsible() !== false;\n\n      if (Array.isArray(attributions)) {\n        for (let j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n    if (!this.overrideCollapsible_) {\n      this.setCollapsible(collapsible);\n    }\n    return visibleAttributions;\n  }\n\n  /**\n   * @private\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  updateElement_(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const attributions = this.collectSourceAttributions_(frameState);\n\n    const visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_);\n\n    // append the attributions\n    for (let i = 0, ii = attributions.length; i < ii; ++i) {\n      const element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n    this.userCollapsed_ = this.collapsed_;\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n  }\n\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (this.userCollapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    this.userCollapsed_ = collapsed;\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Update the attribution element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.updateElement_(mapEvent.frameState);\n  }\n}\n\nexport default Attribution;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}