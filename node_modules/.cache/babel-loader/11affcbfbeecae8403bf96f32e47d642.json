{"ast":null,"code":"/**\n * @module ol/interaction/DragPan\n */\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { all, focusWithTabindex, noModifierKeys, primaryAction } from '../events/condition.js';\nimport { easeOut } from '../easing.js';\nimport { rotate as rotateCoordinate, scale as scaleCoordinate } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\n\nclass DragPan extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super({\n      stopDown: FALSE\n    });\n    options = options ? options : {};\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n\n    this.kinetic_ = options.kinetic;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n\n    this.lastCentroid = null;\n    /**\n     * @type {number}\n     */\n\n    this.lastPointersCount_;\n    /**\n     * @type {boolean}\n     */\n\n    this.panning_ = false;\n    const condition = options.condition ? options.condition : all(noModifierKeys, primaryAction);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.condition_ = options.onFocusOnly ? all(focusWithTabindex, condition) : condition;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.noKinetic_ = false;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n\n\n  handleDragEvent(mapBrowserEvent) {\n    if (!this.panning_) {\n      this.panning_ = true;\n      this.getMap().getView().beginInteraction();\n    }\n\n    const targetPointers = this.targetPointers;\n    const centroid = centroidFromPointers(targetPointers);\n\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n\n      if (this.lastCentroid) {\n        const delta = [this.lastCentroid[0] - centroid[0], centroid[1] - this.lastCentroid[1]];\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        scaleCoordinate(delta, view.getResolution());\n        rotateCoordinate(delta, view.getRotation());\n        view.adjustCenterInternal(delta);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n    mapBrowserEvent.originalEvent.preventDefault();\n  }\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  handleUpEvent(mapBrowserEvent) {\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        const distance = this.kinetic_.getDistance();\n        const angle = this.kinetic_.getAngle();\n        const center = view.getCenterInternal();\n        const centerpx = map.getPixelFromCoordinateInternal(center);\n        const dest = map.getCoordinateFromPixelInternal([centerpx[0] - distance * Math.cos(angle), centerpx[1] - distance * Math.sin(angle)]);\n        view.animateInternal({\n          center: view.getConstrainedCenter(dest),\n          duration: 500,\n          easing: easeOut\n        });\n      }\n\n      if (this.panning_) {\n        this.panning_ = false;\n        view.endInteraction();\n      }\n\n      return false;\n    } else {\n      if (this.kinetic_) {\n        // reset so we don't overestimate the kinetic energy after\n        // after one finger up, tiny drag, second finger up\n        this.kinetic_.begin();\n      }\n\n      this.lastCentroid = null;\n      return true;\n    }\n  }\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      this.lastCentroid = null; // stop any current animation\n\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      } // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n\n\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n}\n\nexport default DragPan;","map":{"version":3,"names":["PointerInteraction","centroid","centroidFromPointers","FALSE","all","focusWithTabindex","noModifierKeys","primaryAction","easeOut","rotate","rotateCoordinate","scale","scaleCoordinate","DragPan","constructor","options","stopDown","kinetic_","kinetic","lastCentroid","lastPointersCount_","panning_","condition","condition_","onFocusOnly","noKinetic_","handleDragEvent","mapBrowserEvent","getMap","getView","beginInteraction","targetPointers","length","update","delta","map","view","getResolution","getRotation","adjustCenterInternal","begin","originalEvent","preventDefault","handleUpEvent","end","distance","getDistance","angle","getAngle","center","getCenterInternal","centerpx","getPixelFromCoordinateInternal","dest","getCoordinateFromPixelInternal","Math","cos","sin","animateInternal","getConstrainedCenter","duration","easing","endInteraction","handleDownEvent","getAnimating","cancelAnimations"],"sources":["D:/Work/Learning/demo/node_modules/ol/interaction/DragPan.js"],"sourcesContent":["/**\n * @module ol/interaction/DragPan\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {\n  all,\n  focusWithTabindex,\n  noModifierKeys,\n  primaryAction,\n} from '../events/condition.js';\nimport {easeOut} from '../easing.js';\nimport {\n  rotate as rotateCoordinate,\n  scale as scaleCoordinate,\n} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\nclass DragPan extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super({\n      stopDown: FALSE,\n    });\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n    this.kinetic_ = options.kinetic;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.lastCentroid = null;\n\n    /**\n     * @type {number}\n     */\n    this.lastPointersCount_;\n\n    /**\n     * @type {boolean}\n     */\n    this.panning_ = false;\n\n    const condition = options.condition\n      ? options.condition\n      : all(noModifierKeys, primaryAction);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.onFocusOnly\n      ? all(focusWithTabindex, condition)\n      : condition;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.noKinetic_ = false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!this.panning_) {\n      this.panning_ = true;\n      this.getMap().getView().beginInteraction();\n    }\n    const targetPointers = this.targetPointers;\n    const centroid = centroidFromPointers(targetPointers);\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n      if (this.lastCentroid) {\n        const delta = [\n          this.lastCentroid[0] - centroid[0],\n          centroid[1] - this.lastCentroid[1],\n        ];\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        scaleCoordinate(delta, view.getResolution());\n        rotateCoordinate(delta, view.getRotation());\n        view.adjustCenterInternal(delta);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n    mapBrowserEvent.originalEvent.preventDefault();\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        const distance = this.kinetic_.getDistance();\n        const angle = this.kinetic_.getAngle();\n        const center = view.getCenterInternal();\n        const centerpx = map.getPixelFromCoordinateInternal(center);\n        const dest = map.getCoordinateFromPixelInternal([\n          centerpx[0] - distance * Math.cos(angle),\n          centerpx[1] - distance * Math.sin(angle),\n        ]);\n        view.animateInternal({\n          center: view.getConstrainedCenter(dest),\n          duration: 500,\n          easing: easeOut,\n        });\n      }\n      if (this.panning_) {\n        this.panning_ = false;\n        view.endInteraction();\n      }\n      return false;\n    } else {\n      if (this.kinetic_) {\n        // reset so we don't overestimate the kinetic energy after\n        // after one finger up, tiny drag, second finger up\n        this.kinetic_.begin();\n      }\n      this.lastCentroid = null;\n      return true;\n    }\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      this.lastCentroid = null;\n      // stop any current animation\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      }\n      // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default DragPan;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}