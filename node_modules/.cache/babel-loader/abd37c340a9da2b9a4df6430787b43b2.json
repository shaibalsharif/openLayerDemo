{"ast":null,"code":"/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport { getUid } from './util.js';\nimport { isEmpty } from './obj.js';\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\n\nexport class ObjectEvent extends Event {\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  constructor(type, key, oldValue) {\n    super(type);\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n\n    this.key = key;\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n\n    this.oldValue = oldValue;\n  }\n\n}\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\n\nclass BaseObject extends Observable {\n  /**\n   * @param {Object<string, *>} [values] An object with key-value pairs.\n   */\n  constructor(values) {\n    super();\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n\n    this.un; // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n\n    getUid(this);\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n\n    this.values_ = null;\n\n    if (values !== undefined) {\n      this.setProperties(values);\n    }\n  }\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n\n\n  get(key) {\n    let value;\n\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n\n    return value;\n  }\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n\n\n  getKeys() {\n    return this.values_ && Object.keys(this.values_) || [];\n  }\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n\n\n  getProperties() {\n    return this.values_ && Object.assign({}, this.values_) || {};\n  }\n  /**\n   * @return {boolean} The object has properties.\n   */\n\n\n  hasProperties() {\n    return !!this.values_;\n  }\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n\n\n  notify(key, oldValue) {\n    let eventType;\n    eventType = `change:${key}`;\n\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n\n    eventType = ObjectEventType.PROPERTYCHANGE;\n\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n  }\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n\n\n  addChangeListener(key, listener) {\n    this.addEventListener(`change:${key}`, listener);\n  }\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n\n\n  removeChangeListener(key, listener) {\n    this.removeEventListener(`change:${key}`, listener);\n  }\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n\n\n  set(key, value, silent) {\n    const values = this.values_ || (this.values_ = {});\n\n    if (silent) {\n      values[key] = value;\n    } else {\n      const oldValue = values[key];\n      values[key] = value;\n\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n\n\n  setProperties(values, silent) {\n    for (const key in values) {\n      this.set(key, values[key], silent);\n    }\n  }\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n\n\n  applyProperties(source) {\n    if (!source.values_) {\n      return;\n    }\n\n    Object.assign(this.values_ || (this.values_ = {}), source.values_);\n  }\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [silent] Unset without triggering an event.\n   * @api\n   */\n\n\n  unset(key, silent) {\n    if (this.values_ && key in this.values_) {\n      const oldValue = this.values_[key];\n      delete this.values_[key];\n\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n\n      if (!silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n\n}\n\nexport default BaseObject;","map":{"version":3,"names":["Event","ObjectEventType","Observable","getUid","isEmpty","ObjectEvent","constructor","type","key","oldValue","BaseObject","values","on","once","un","values_","undefined","setProperties","get","value","hasOwnProperty","getKeys","Object","keys","getProperties","assign","hasProperties","notify","eventType","hasListener","dispatchEvent","PROPERTYCHANGE","addChangeListener","listener","addEventListener","removeChangeListener","removeEventListener","set","silent","applyProperties","source","unset"],"sources":["D:/Work/Learning/demo/node_modules/ol/Object.js"],"sourcesContent":["/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport {getUid} from './util.js';\nimport {isEmpty} from './obj.js';\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport class ObjectEvent extends Event {\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  constructor(type, key, oldValue) {\n    super(type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nclass BaseObject extends Observable {\n  /**\n   * @param {Object<string, *>} [values] An object with key-value pairs.\n   */\n  constructor(values) {\n    super();\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n    this.un;\n\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n    this.values_ = null;\n\n    if (values !== undefined) {\n      this.setProperties(values);\n    }\n  }\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  get(key) {\n    let value;\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  }\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  getKeys() {\n    return (this.values_ && Object.keys(this.values_)) || [];\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  getProperties() {\n    return (this.values_ && Object.assign({}, this.values_)) || {};\n  }\n\n  /**\n   * @return {boolean} The object has properties.\n   */\n  hasProperties() {\n    return !!this.values_;\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  notify(key, oldValue) {\n    let eventType;\n    eventType = `change:${key}`;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  addChangeListener(key, listener) {\n    this.addEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  removeChangeListener(key, listener) {\n    this.removeEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n  set(key, value, silent) {\n    const values = this.values_ || (this.values_ = {});\n    if (silent) {\n      values[key] = value;\n    } else {\n      const oldValue = values[key];\n      values[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n  setProperties(values, silent) {\n    for (const key in values) {\n      this.set(key, values[key], silent);\n    }\n  }\n\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n  applyProperties(source) {\n    if (!source.values_) {\n      return;\n    }\n    Object.assign(this.values_ || (this.values_ = {}), source.values_);\n  }\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [silent] Unset without triggering an event.\n   * @api\n   */\n  unset(key, silent) {\n    if (this.values_ && key in this.values_) {\n      const oldValue = this.values_[key];\n      delete this.values_[key];\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n      if (!silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n}\n\nexport default BaseObject;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,mBAAlB;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,SAAQC,OAAR,QAAsB,UAAtB;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAN,SAA0BL,KAA1B,CAAgC;EACrC;AACF;AACA;AACA;AACA;EACEM,WAAW,CAACC,IAAD,EAAOC,GAAP,EAAYC,QAAZ,EAAsB;IAC/B,MAAMF,IAAN;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,GAAL,GAAWA,GAAX;IAEA;AACJ;AACA;AACA;AACA;AACA;;IACI,KAAKC,QAAL,GAAgBA,QAAhB;EACD;;AAvBoC;AA0BvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAN,SAAyBR,UAAzB,CAAoC;EAClC;AACF;AACA;EACEI,WAAW,CAACK,MAAD,EAAS;IAClB;IAEA;AACJ;AACA;;IACI,KAAKC,EAAL;IAEA;AACJ;AACA;;IACI,KAAKC,IAAL;IAEA;AACJ;AACA;;IACI,KAAKC,EAAL,CAhBkB,CAkBlB;IACA;IACA;IACA;;IACAX,MAAM,CAAC,IAAD,CAAN;IAEA;AACJ;AACA;AACA;;IACI,KAAKY,OAAL,GAAe,IAAf;;IAEA,IAAIJ,MAAM,KAAKK,SAAf,EAA0B;MACxB,KAAKC,aAAL,CAAmBN,MAAnB;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEO,GAAG,CAACV,GAAD,EAAM;IACP,IAAIW,KAAJ;;IACA,IAAI,KAAKJ,OAAL,IAAgB,KAAKA,OAAL,CAAaK,cAAb,CAA4BZ,GAA5B,CAApB,EAAsD;MACpDW,KAAK,GAAG,KAAKJ,OAAL,CAAaP,GAAb,CAAR;IACD;;IACD,OAAOW,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,OAAO,GAAG;IACR,OAAQ,KAAKN,OAAL,IAAgBO,MAAM,CAACC,IAAP,CAAY,KAAKR,OAAjB,CAAjB,IAA+C,EAAtD;EACD;EAED;AACF;AACA;AACA;AACA;;;EACES,aAAa,GAAG;IACd,OAAQ,KAAKT,OAAL,IAAgBO,MAAM,CAACG,MAAP,CAAc,EAAd,EAAkB,KAAKV,OAAvB,CAAjB,IAAqD,EAA5D;EACD;EAED;AACF;AACA;;;EACEW,aAAa,GAAG;IACd,OAAO,CAAC,CAAC,KAAKX,OAAd;EACD;EAED;AACF;AACA;AACA;;;EACEY,MAAM,CAACnB,GAAD,EAAMC,QAAN,EAAgB;IACpB,IAAImB,SAAJ;IACAA,SAAS,GAAI,UAASpB,GAAI,EAA1B;;IACA,IAAI,KAAKqB,WAAL,CAAiBD,SAAjB,CAAJ,EAAiC;MAC/B,KAAKE,aAAL,CAAmB,IAAIzB,WAAJ,CAAgBuB,SAAhB,EAA2BpB,GAA3B,EAAgCC,QAAhC,CAAnB;IACD;;IACDmB,SAAS,GAAG3B,eAAe,CAAC8B,cAA5B;;IACA,IAAI,KAAKF,WAAL,CAAiBD,SAAjB,CAAJ,EAAiC;MAC/B,KAAKE,aAAL,CAAmB,IAAIzB,WAAJ,CAAgBuB,SAAhB,EAA2BpB,GAA3B,EAAgCC,QAAhC,CAAnB;IACD;EACF;EAED;AACF;AACA;AACA;;;EACEuB,iBAAiB,CAACxB,GAAD,EAAMyB,QAAN,EAAgB;IAC/B,KAAKC,gBAAL,CAAuB,UAAS1B,GAAI,EAApC,EAAuCyB,QAAvC;EACD;EAED;AACF;AACA;AACA;;;EACEE,oBAAoB,CAAC3B,GAAD,EAAMyB,QAAN,EAAgB;IAClC,KAAKG,mBAAL,CAA0B,UAAS5B,GAAI,EAAvC,EAA0CyB,QAA1C;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEI,GAAG,CAAC7B,GAAD,EAAMW,KAAN,EAAamB,MAAb,EAAqB;IACtB,MAAM3B,MAAM,GAAG,KAAKI,OAAL,KAAiB,KAAKA,OAAL,GAAe,EAAhC,CAAf;;IACA,IAAIuB,MAAJ,EAAY;MACV3B,MAAM,CAACH,GAAD,CAAN,GAAcW,KAAd;IACD,CAFD,MAEO;MACL,MAAMV,QAAQ,GAAGE,MAAM,CAACH,GAAD,CAAvB;MACAG,MAAM,CAACH,GAAD,CAAN,GAAcW,KAAd;;MACA,IAAIV,QAAQ,KAAKU,KAAjB,EAAwB;QACtB,KAAKQ,MAAL,CAAYnB,GAAZ,EAAiBC,QAAjB;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEQ,aAAa,CAACN,MAAD,EAAS2B,MAAT,EAAiB;IAC5B,KAAK,MAAM9B,GAAX,IAAkBG,MAAlB,EAA0B;MACxB,KAAK0B,GAAL,CAAS7B,GAAT,EAAcG,MAAM,CAACH,GAAD,CAApB,EAA2B8B,MAA3B;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEC,eAAe,CAACC,MAAD,EAAS;IACtB,IAAI,CAACA,MAAM,CAACzB,OAAZ,EAAqB;MACnB;IACD;;IACDO,MAAM,CAACG,MAAP,CAAc,KAAKV,OAAL,KAAiB,KAAKA,OAAL,GAAe,EAAhC,CAAd,EAAmDyB,MAAM,CAACzB,OAA1D;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE0B,KAAK,CAACjC,GAAD,EAAM8B,MAAN,EAAc;IACjB,IAAI,KAAKvB,OAAL,IAAgBP,GAAG,IAAI,KAAKO,OAAhC,EAAyC;MACvC,MAAMN,QAAQ,GAAG,KAAKM,OAAL,CAAaP,GAAb,CAAjB;MACA,OAAO,KAAKO,OAAL,CAAaP,GAAb,CAAP;;MACA,IAAIJ,OAAO,CAAC,KAAKW,OAAN,CAAX,EAA2B;QACzB,KAAKA,OAAL,GAAe,IAAf;MACD;;MACD,IAAI,CAACuB,MAAL,EAAa;QACX,KAAKX,MAAL,CAAYnB,GAAZ,EAAiBC,QAAjB;MACD;IACF;EACF;;AA5KiC;;AA+KpC,eAAeC,UAAf"},"metadata":{},"sourceType":"module"}