{"ast":null,"code":"/**\n * @module ol/proj/transforms\n */\nimport { isEmpty } from '../obj.js';\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\n\nlet transforms = {};\n/**\n * Clear the transform cache.\n */\n\nexport function clear() {\n  transforms = {};\n}\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\n\nexport function add(source, destination, transformFn) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\n\nexport function remove(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  const transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n\n  return transform;\n}\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\n\nexport function get(sourceCode, destinationCode) {\n  let transform;\n\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n\n  return transform;\n}","map":{"version":3,"names":["isEmpty","transforms","clear","add","source","destination","transformFn","sourceCode","getCode","destinationCode","remove","transform","get"],"sources":["D:/Work/Learning/demo/node_modules/ol/proj/transforms.js"],"sourcesContent":["/**\n * @module ol/proj/transforms\n */\nimport {isEmpty} from '../obj.js';\n\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nlet transforms = {};\n\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n  transforms = {};\n}\n\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  const transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n}\n\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n  let transform;\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n  return transform;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,OAAR,QAAsB,WAAtB;AAEA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,EAAjB;AAEA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,GAAiB;EACtBD,UAAU,GAAG,EAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,GAAT,CAAaC,MAAb,EAAqBC,WAArB,EAAkCC,WAAlC,EAA+C;EACpD,MAAMC,UAAU,GAAGH,MAAM,CAACI,OAAP,EAAnB;EACA,MAAMC,eAAe,GAAGJ,WAAW,CAACG,OAAZ,EAAxB;;EACA,IAAI,EAAED,UAAU,IAAIN,UAAhB,CAAJ,EAAiC;IAC/BA,UAAU,CAACM,UAAD,CAAV,GAAyB,EAAzB;EACD;;EACDN,UAAU,CAACM,UAAD,CAAV,CAAuBE,eAAvB,IAA0CH,WAA1C;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,MAAT,CAAgBN,MAAhB,EAAwBC,WAAxB,EAAqC;EAC1C,MAAME,UAAU,GAAGH,MAAM,CAACI,OAAP,EAAnB;EACA,MAAMC,eAAe,GAAGJ,WAAW,CAACG,OAAZ,EAAxB;EACA,MAAMG,SAAS,GAAGV,UAAU,CAACM,UAAD,CAAV,CAAuBE,eAAvB,CAAlB;EACA,OAAOR,UAAU,CAACM,UAAD,CAAV,CAAuBE,eAAvB,CAAP;;EACA,IAAIT,OAAO,CAACC,UAAU,CAACM,UAAD,CAAX,CAAX,EAAqC;IACnC,OAAON,UAAU,CAACM,UAAD,CAAjB;EACD;;EACD,OAAOI,SAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,GAAT,CAAaL,UAAb,EAAyBE,eAAzB,EAA0C;EAC/C,IAAIE,SAAJ;;EACA,IAAIJ,UAAU,IAAIN,UAAd,IAA4BQ,eAAe,IAAIR,UAAU,CAACM,UAAD,CAA7D,EAA2E;IACzEI,SAAS,GAAGV,UAAU,CAACM,UAAD,CAAV,CAAuBE,eAAvB,CAAZ;EACD;;EACD,OAAOE,SAAP;AACD"},"metadata":{},"sourceType":"module"}