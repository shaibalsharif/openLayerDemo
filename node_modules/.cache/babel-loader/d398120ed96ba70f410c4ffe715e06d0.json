{"ast":null,"code":"/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  } else {\n    return [z, x, y];\n  }\n}\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\n\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\n\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\n\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey.substring(tileKey.lastIndexOf('/') + 1, tileKey.length).split(',').map(Number);\n  return getKeyZXY(z, x, y);\n}\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\n\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\n\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\n\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n\n  const tileRange = tileGrid.getFullTileRange(z);\n\n  if (!tileRange) {\n    return true;\n  } else {\n    return tileRange.containsXY(x, y);\n  }\n}","map":{"version":3,"names":["createOrUpdate","z","x","y","tileCoord","undefined","getKeyZXY","getKey","getCacheKeyForTileKey","tileKey","substring","lastIndexOf","length","split","map","Number","fromKey","key","hash","withinExtentAndZ","tileGrid","getMinZoom","getMaxZoom","tileRange","getFullTileRange","containsXY"],"sources":["D:/Work/Learning/demo/node_modules/ol/tilecoord.js"],"sourcesContent":["/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  } else {\n    return [z, x, y];\n  }\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  } else {\n    return tileRange.containsXY(x, y);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,CAA9B,EAAiCC,SAAjC,EAA4C;EACjD,IAAIA,SAAS,KAAKC,SAAlB,EAA6B;IAC3BD,SAAS,CAAC,CAAD,CAAT,GAAeH,CAAf;IACAG,SAAS,CAAC,CAAD,CAAT,GAAeF,CAAf;IACAE,SAAS,CAAC,CAAD,CAAT,GAAeD,CAAf;IACA,OAAOC,SAAP;EACD,CALD,MAKO;IACL,OAAO,CAACH,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,SAAT,CAAmBL,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;EACjC,OAAOF,CAAC,GAAG,GAAJ,GAAUC,CAAV,GAAc,GAAd,GAAoBC,CAA3B;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,MAAT,CAAgBH,SAAhB,EAA2B;EAChC,OAAOE,SAAS,CAACF,SAAS,CAAC,CAAD,CAAV,EAAeA,SAAS,CAAC,CAAD,CAAxB,EAA6BA,SAAS,CAAC,CAAD,CAAtC,CAAhB;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,qBAAT,CAA+BC,OAA/B,EAAwC;EAC7C,MAAM,CAACR,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYM,OAAO,CACtBC,SADe,CACLD,OAAO,CAACE,WAAR,CAAoB,GAApB,IAA2B,CADtB,EACyBF,OAAO,CAACG,MADjC,EAEfC,KAFe,CAET,GAFS,EAGfC,GAHe,CAGXC,MAHW,CAAlB;EAIA,OAAOT,SAAS,CAACL,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAhB;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASa,OAAT,CAAiBC,GAAjB,EAAsB;EAC3B,OAAOA,GAAG,CAACJ,KAAJ,CAAU,GAAV,EAAeC,GAAf,CAAmBC,MAAnB,CAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASG,IAAT,CAAcd,SAAd,EAAyB;EAC9B,OAAO,CAACA,SAAS,CAAC,CAAD,CAAT,IAAgBA,SAAS,CAAC,CAAD,CAA1B,IAAiCA,SAAS,CAAC,CAAD,CAAjD;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASe,gBAAT,CAA0Bf,SAA1B,EAAqCgB,QAArC,EAA+C;EACpD,MAAMnB,CAAC,GAAGG,SAAS,CAAC,CAAD,CAAnB;EACA,MAAMF,CAAC,GAAGE,SAAS,CAAC,CAAD,CAAnB;EACA,MAAMD,CAAC,GAAGC,SAAS,CAAC,CAAD,CAAnB;;EAEA,IAAIgB,QAAQ,CAACC,UAAT,KAAwBpB,CAAxB,IAA6BA,CAAC,GAAGmB,QAAQ,CAACE,UAAT,EAArC,EAA4D;IAC1D,OAAO,KAAP;EACD;;EACD,MAAMC,SAAS,GAAGH,QAAQ,CAACI,gBAAT,CAA0BvB,CAA1B,CAAlB;;EACA,IAAI,CAACsB,SAAL,EAAgB;IACd,OAAO,IAAP;EACD,CAFD,MAEO;IACL,OAAOA,SAAS,CAACE,UAAV,CAAqBvB,CAArB,EAAwBC,CAAxB,CAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}