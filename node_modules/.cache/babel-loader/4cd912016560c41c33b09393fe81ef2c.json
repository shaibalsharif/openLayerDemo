{"ast":null,"code":"/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport { abstract } from '../util.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n\n/**\n * A function that takes a {@link module:ol/Map~FrameState} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../Map.js\").FrameState): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\n\nclass Source extends BaseObject {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super();\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */\n\n    this.projection = getProjection(options.projection);\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n\n    this.attributions_ = adaptAttributions(options.attributions);\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ? options.attributionsCollapsible : true;\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n\n    this.loading = false;\n    /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */\n\n    this.state_ = options.state !== undefined ? options.state : 'ready';\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.interpolate_ = !!options.interpolate;\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n\n    this.viewResolver = null;\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n\n    this.viewRejector = null;\n    const self = this;\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n\n    this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n  }\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n\n\n  getAttributions() {\n    return this.attributions_;\n  }\n  /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */\n\n\n  getAttributionsCollapsible() {\n    return this.attributionsCollapsible_;\n  }\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\n   * @api\n   */\n\n\n  getProjection() {\n    return this.projection;\n  }\n  /**\n   * @abstract\n   * @return {Array<number>|null} Resolutions.\n   */\n\n\n  getResolutions() {\n    return abstract();\n  }\n  /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */\n\n\n  getView() {\n    return this.viewPromise_;\n  }\n  /**\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n   * @return {import(\"./Source.js\").State} State.\n   * @api\n   */\n\n\n  getState() {\n    return this.state_;\n  }\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n\n\n  getWrapX() {\n    return this.wrapX_;\n  }\n  /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */\n\n\n  getInterpolate() {\n    return this.interpolate_;\n  }\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n\n\n  refresh() {\n    this.changed();\n  }\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n\n\n  setAttributions(attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  }\n  /**\n   * Set the state of the source.\n   * @param {import(\"./Source.js\").State} state State.\n   */\n\n\n  setState(state) {\n    this.state_ = state;\n    this.changed();\n  }\n\n}\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\n\n\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\n\nexport default Source;","map":{"version":3,"names":["BaseObject","abstract","get","getProjection","Source","constructor","options","projection","attributions_","adaptAttributions","attributions","attributionsCollapsible_","attributionsCollapsible","undefined","loading","state_","state","wrapX_","wrapX","interpolate_","interpolate","viewResolver","viewRejector","self","viewPromise_","Promise","resolve","reject","getAttributions","getAttributionsCollapsible","getResolutions","getView","getState","getWrapX","getInterpolate","refresh","changed","setAttributions","setState","attributionLike","Array","isArray","frameState"],"sources":["D:/Work/Learning/demo/node_modules/ol/source/Source.js"],"sourcesContent":["/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport {abstract} from '../util.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n\n/**\n * A function that takes a {@link module:ol/Map~FrameState} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../Map.js\").FrameState): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nclass Source extends BaseObject {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */\n    this.projection = getProjection(options.projection);\n\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n    this.attributions_ = adaptAttributions(options.attributions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.attributionsCollapsible_ =\n      options.attributionsCollapsible !== undefined\n        ? options.attributionsCollapsible\n        : true;\n\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n    this.loading = false;\n\n    /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */\n    this.state_ = options.state !== undefined ? options.state : 'ready';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = !!options.interpolate;\n\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n    this.viewResolver = null;\n\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n    this.viewRejector = null;\n\n    const self = this;\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n    this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n  }\n\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n  getAttributions() {\n    return this.attributions_;\n  }\n\n  /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */\n  getAttributionsCollapsible() {\n    return this.attributionsCollapsible_;\n  }\n\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\n   * @api\n   */\n  getProjection() {\n    return this.projection;\n  }\n\n  /**\n   * @abstract\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions() {\n    return abstract();\n  }\n\n  /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */\n  getView() {\n    return this.viewPromise_;\n  }\n\n  /**\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n   * @return {import(\"./Source.js\").State} State.\n   * @api\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n  getWrapX() {\n    return this.wrapX_;\n  }\n\n  /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */\n  getInterpolate() {\n    return this.interpolate_;\n  }\n\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n  refresh() {\n    this.changed();\n  }\n\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n  setAttributions(attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  }\n\n  /**\n   * Set the state of the source.\n   * @param {import(\"./Source.js\").State} state State.\n   */\n  setState(state) {\n    this.state_ = state;\n    this.changed();\n  }\n}\n\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\n\nexport default Source;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}