{"ast":null,"code":"/**\n * @module ol/control/MousePosition\n */\nimport Control from './Control.js';\nimport EventType from '../pointer/EventType.js';\nimport { get as getProjection, getTransformFromProjections, getUserProjection, identityTransform } from '../proj.js';\nimport { listen } from '../events.js';\n/**\n * @type {string}\n */\n\nconst PROJECTION = 'projection';\n/**\n * @type {string}\n */\n\nconst COORDINATE_FORMAT = 'coordinateFormat';\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string} [placeholder] Markup to show when the mouse position is not\n * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space is rendered\n * initially and the last position is retained when the mouse leaves the viewport.\n * When a string is provided (e.g. `'no position'` or `''` for an empty string) it is used as a\n * placeholder.\n */\n\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\n\nclass MousePosition extends Control {\n  /**\n   * @param {Options} [options] Mouse position options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const element = document.createElement('div');\n    element.className = options.className !== undefined ? options.className : 'ol-mouse-position';\n    super({\n      element: element,\n      render: options.render,\n      target: options.target\n    });\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {MousePositionOnSignature<void>}\n     */\n\n    this.un;\n    this.addChangeListener(PROJECTION, this.handleProjectionChanged_);\n\n    if (options.coordinateFormat) {\n      this.setCoordinateFormat(options.coordinateFormat);\n    }\n\n    if (options.projection) {\n      this.setProjection(options.projection);\n    }\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n\n    this.renderOnMouseOut_ = options.placeholder !== undefined;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.placeholder_ = this.renderOnMouseOut_ ? options.placeholder : '&#160;';\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.renderedHTML_ = element.innerHTML;\n    /**\n     * @private\n     * @type {?import(\"../proj/Projection.js\").default}\n     */\n\n    this.mapProjection_ = null;\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n\n    this.transform_ = null;\n  }\n  /**\n   * @private\n   */\n\n\n  handleProjectionChanged_() {\n    this.transform_ = null;\n  }\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  getCoordinateFormat() {\n    return (\n      /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */\n      this.get(COORDINATE_FORMAT)\n    );\n  }\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  getProjection() {\n    return (\n      /** @type {import(\"../proj/Projection.js\").default|undefined} */\n      this.get(PROJECTION)\n    );\n  }\n  /**\n   * @param {MouseEvent} event Browser event.\n   * @protected\n   */\n\n\n  handleMouseMove(event) {\n    const map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  }\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n\n\n  handleMouseOut(event) {\n    this.updateHTML_(null);\n  }\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n\n\n  setMap(map) {\n    super.setMap(map);\n\n    if (map) {\n      const viewport = map.getViewport();\n      this.listenerKeys.push(listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this));\n\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this));\n      }\n\n      this.updateHTML_(null);\n    }\n  }\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  setCoordinateFormat(format) {\n    this.set(COORDINATE_FORMAT, format);\n  }\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  setProjection(projection) {\n    this.set(PROJECTION, getProjection(projection));\n  }\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n\n\n  updateHTML_(pixel) {\n    let html = this.placeholder_;\n\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        const projection = this.getProjection();\n\n        if (projection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, projection);\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n\n      const map = this.getMap();\n      const coordinate = map.getCoordinateFromPixelInternal(pixel);\n\n      if (coordinate) {\n        const userProjection = getUserProjection();\n\n        if (userProjection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, userProjection);\n        }\n\n        this.transform_(coordinate, coordinate);\n        const coordinateFormat = this.getCoordinateFormat();\n\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  }\n  /**\n   * Update the projection. Rendering of the coordinates is done in\n   * `handleMouseMove` and `handleMouseUp`.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n\n\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n\n    if (!frameState) {\n      this.mapProjection_ = null;\n    } else {\n      if (this.mapProjection_ != frameState.viewState.projection) {\n        this.mapProjection_ = frameState.viewState.projection;\n        this.transform_ = null;\n      }\n    }\n  }\n\n}\n\nexport default MousePosition;","map":{"version":3,"names":["Control","EventType","get","getProjection","getTransformFromProjections","getUserProjection","identityTransform","listen","PROJECTION","COORDINATE_FORMAT","MousePosition","constructor","options","element","document","createElement","className","undefined","render","target","on","once","un","addChangeListener","handleProjectionChanged_","coordinateFormat","setCoordinateFormat","projection","setProjection","renderOnMouseOut_","placeholder","placeholder_","renderedHTML_","innerHTML","mapProjection_","transform_","getCoordinateFormat","handleMouseMove","event","map","getMap","updateHTML_","getEventPixel","handleMouseOut","setMap","viewport","getViewport","listenerKeys","push","POINTERMOVE","POINTEROUT","format","set","pixel","html","coordinate","getCoordinateFromPixelInternal","userProjection","toString","mapEvent","frameState","viewState"],"sources":["D:/Work/Learning/demo/node_modules/ol/control/MousePosition.js"],"sourcesContent":["/**\n * @module ol/control/MousePosition\n */\n\nimport Control from './Control.js';\nimport EventType from '../pointer/EventType.js';\nimport {\n  get as getProjection,\n  getTransformFromProjections,\n  getUserProjection,\n  identityTransform,\n} from '../proj.js';\nimport {listen} from '../events.js';\n\n/**\n * @type {string}\n */\nconst PROJECTION = 'projection';\n\n/**\n * @type {string}\n */\nconst COORDINATE_FORMAT = 'coordinateFormat';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string} [placeholder] Markup to show when the mouse position is not\n * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space is rendered\n * initially and the last position is retained when the mouse leaves the viewport.\n * When a string is provided (e.g. `'no position'` or `''` for an empty string) it is used as a\n * placeholder.\n */\n\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\nclass MousePosition extends Control {\n  /**\n   * @param {Options} [options] Mouse position options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const element = document.createElement('div');\n    element.className =\n      options.className !== undefined ? options.className : 'ol-mouse-position';\n\n    super({\n      element: element,\n      render: options.render,\n      target: options.target,\n    });\n\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {MousePositionOnSignature<void>}\n     */\n    this.un;\n\n    this.addChangeListener(PROJECTION, this.handleProjectionChanged_);\n\n    if (options.coordinateFormat) {\n      this.setCoordinateFormat(options.coordinateFormat);\n    }\n    if (options.projection) {\n      this.setProjection(options.projection);\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderOnMouseOut_ = options.placeholder !== undefined;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.placeholder_ = this.renderOnMouseOut_ ? options.placeholder : '&#160;';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = element.innerHTML;\n\n    /**\n     * @private\n     * @type {?import(\"../proj/Projection.js\").default}\n     */\n    this.mapProjection_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n    this.transform_ = null;\n  }\n\n  /**\n   * @private\n   */\n  handleProjectionChanged_() {\n    this.transform_ = null;\n  }\n\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  getCoordinateFormat() {\n    return /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */ (\n      this.get(COORDINATE_FORMAT)\n    );\n  }\n\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  getProjection() {\n    return /** @type {import(\"../proj/Projection.js\").default|undefined} */ (\n      this.get(PROJECTION)\n    );\n  }\n\n  /**\n   * @param {MouseEvent} event Browser event.\n   * @protected\n   */\n  handleMouseMove(event) {\n    const map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  }\n\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n  handleMouseOut(event) {\n    this.updateHTML_(null);\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    super.setMap(map);\n    if (map) {\n      const viewport = map.getViewport();\n      this.listenerKeys.push(\n        listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this)\n      );\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(\n          listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this)\n        );\n      }\n      this.updateHTML_(null);\n    }\n  }\n\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  setCoordinateFormat(format) {\n    this.set(COORDINATE_FORMAT, format);\n  }\n\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  setProjection(projection) {\n    this.set(PROJECTION, getProjection(projection));\n  }\n\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n  updateHTML_(pixel) {\n    let html = this.placeholder_;\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        const projection = this.getProjection();\n        if (projection) {\n          this.transform_ = getTransformFromProjections(\n            this.mapProjection_,\n            projection\n          );\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n      const map = this.getMap();\n      const coordinate = map.getCoordinateFromPixelInternal(pixel);\n      if (coordinate) {\n        const userProjection = getUserProjection();\n        if (userProjection) {\n          this.transform_ = getTransformFromProjections(\n            this.mapProjection_,\n            userProjection\n          );\n        }\n        this.transform_(coordinate, coordinate);\n        const coordinateFormat = this.getCoordinateFormat();\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  }\n\n  /**\n   * Update the projection. Rendering of the coordinates is done in\n   * `handleMouseMove` and `handleMouseUp`.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.mapProjection_ = null;\n    } else {\n      if (this.mapProjection_ != frameState.viewState.projection) {\n        this.mapProjection_ = frameState.viewState.projection;\n        this.transform_ = null;\n      }\n    }\n  }\n}\n\nexport default MousePosition;\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SACEC,GAAG,IAAIC,aADT,EAEEC,2BAFF,EAGEC,iBAHF,EAIEC,iBAJF,QAKO,YALP;AAMA,SAAQC,MAAR,QAAqB,cAArB;AAEA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,YAAnB;AAEA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAG,kBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4BV,OAA5B,CAAoC;EAClC;AACF;AACA;EACEW,WAAW,CAACC,OAAD,EAAU;IACnBA,OAAO,GAAGA,OAAO,GAAGA,OAAH,GAAa,EAA9B;IAEA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAhB;IACAF,OAAO,CAACG,SAAR,GACEJ,OAAO,CAACI,SAAR,KAAsBC,SAAtB,GAAkCL,OAAO,CAACI,SAA1C,GAAsD,mBADxD;IAGA,MAAM;MACJH,OAAO,EAAEA,OADL;MAEJK,MAAM,EAAEN,OAAO,CAACM,MAFZ;MAGJC,MAAM,EAAEP,OAAO,CAACO;IAHZ,CAAN;IAMA;AACJ;AACA;;IACI,KAAKC,EAAL;IAEA;AACJ;AACA;;IACI,KAAKC,IAAL;IAEA;AACJ;AACA;;IACI,KAAKC,EAAL;IAEA,KAAKC,iBAAL,CAAuBf,UAAvB,EAAmC,KAAKgB,wBAAxC;;IAEA,IAAIZ,OAAO,CAACa,gBAAZ,EAA8B;MAC5B,KAAKC,mBAAL,CAAyBd,OAAO,CAACa,gBAAjC;IACD;;IACD,IAAIb,OAAO,CAACe,UAAZ,EAAwB;MACtB,KAAKC,aAAL,CAAmBhB,OAAO,CAACe,UAA3B;IACD;IAED;AACJ;AACA;AACA;;;IACI,KAAKE,iBAAL,GAAyBjB,OAAO,CAACkB,WAAR,KAAwBb,SAAjD;IAEA;AACJ;AACA;AACA;;IACI,KAAKc,YAAL,GAAoB,KAAKF,iBAAL,GAAyBjB,OAAO,CAACkB,WAAjC,GAA+C,QAAnE;IAEA;AACJ;AACA;AACA;;IACI,KAAKE,aAAL,GAAqBnB,OAAO,CAACoB,SAA7B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,cAAL,GAAsB,IAAtB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,UAAL,GAAkB,IAAlB;EACD;EAED;AACF;AACA;;;EACEX,wBAAwB,GAAG;IACzB,KAAKW,UAAL,GAAkB,IAAlB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEC,mBAAmB,GAAG;IACpB;MAAO;MACL,KAAKlC,GAAL,CAASO,iBAAT;IADF;EAGD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEN,aAAa,GAAG;IACd;MAAO;MACL,KAAKD,GAAL,CAASM,UAAT;IADF;EAGD;EAED;AACF;AACA;AACA;;;EACE6B,eAAe,CAACC,KAAD,EAAQ;IACrB,MAAMC,GAAG,GAAG,KAAKC,MAAL,EAAZ;IACA,KAAKC,WAAL,CAAiBF,GAAG,CAACG,aAAJ,CAAkBJ,KAAlB,CAAjB;EACD;EAED;AACF;AACA;AACA;;;EACEK,cAAc,CAACL,KAAD,EAAQ;IACpB,KAAKG,WAAL,CAAiB,IAAjB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEG,MAAM,CAACL,GAAD,EAAM;IACV,MAAMK,MAAN,CAAaL,GAAb;;IACA,IAAIA,GAAJ,EAAS;MACP,MAAMM,QAAQ,GAAGN,GAAG,CAACO,WAAJ,EAAjB;MACA,KAAKC,YAAL,CAAkBC,IAAlB,CACEzC,MAAM,CAACsC,QAAD,EAAW5C,SAAS,CAACgD,WAArB,EAAkC,KAAKZ,eAAvC,EAAwD,IAAxD,CADR;;MAGA,IAAI,KAAKR,iBAAT,EAA4B;QAC1B,KAAKkB,YAAL,CAAkBC,IAAlB,CACEzC,MAAM,CAACsC,QAAD,EAAW5C,SAAS,CAACiD,UAArB,EAAiC,KAAKP,cAAtC,EAAsD,IAAtD,CADR;MAGD;;MACD,KAAKF,WAAL,CAAiB,IAAjB;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEf,mBAAmB,CAACyB,MAAD,EAAS;IAC1B,KAAKC,GAAL,CAAS3C,iBAAT,EAA4B0C,MAA5B;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEvB,aAAa,CAACD,UAAD,EAAa;IACxB,KAAKyB,GAAL,CAAS5C,UAAT,EAAqBL,aAAa,CAACwB,UAAD,CAAlC;EACD;EAED;AACF;AACA;AACA;;;EACEc,WAAW,CAACY,KAAD,EAAQ;IACjB,IAAIC,IAAI,GAAG,KAAKvB,YAAhB;;IACA,IAAIsB,KAAK,IAAI,KAAKnB,cAAlB,EAAkC;MAChC,IAAI,CAAC,KAAKC,UAAV,EAAsB;QACpB,MAAMR,UAAU,GAAG,KAAKxB,aAAL,EAAnB;;QACA,IAAIwB,UAAJ,EAAgB;UACd,KAAKQ,UAAL,GAAkB/B,2BAA2B,CAC3C,KAAK8B,cADsC,EAE3CP,UAF2C,CAA7C;QAID,CALD,MAKO;UACL,KAAKQ,UAAL,GAAkB7B,iBAAlB;QACD;MACF;;MACD,MAAMiC,GAAG,GAAG,KAAKC,MAAL,EAAZ;MACA,MAAMe,UAAU,GAAGhB,GAAG,CAACiB,8BAAJ,CAAmCH,KAAnC,CAAnB;;MACA,IAAIE,UAAJ,EAAgB;QACd,MAAME,cAAc,GAAGpD,iBAAiB,EAAxC;;QACA,IAAIoD,cAAJ,EAAoB;UAClB,KAAKtB,UAAL,GAAkB/B,2BAA2B,CAC3C,KAAK8B,cADsC,EAE3CuB,cAF2C,CAA7C;QAID;;QACD,KAAKtB,UAAL,CAAgBoB,UAAhB,EAA4BA,UAA5B;QACA,MAAM9B,gBAAgB,GAAG,KAAKW,mBAAL,EAAzB;;QACA,IAAIX,gBAAJ,EAAsB;UACpB6B,IAAI,GAAG7B,gBAAgB,CAAC8B,UAAD,CAAvB;QACD,CAFD,MAEO;UACLD,IAAI,GAAGC,UAAU,CAACG,QAAX,EAAP;QACD;MACF;IACF;;IACD,IAAI,CAAC,KAAK1B,aAAN,IAAuBsB,IAAI,KAAK,KAAKtB,aAAzC,EAAwD;MACtD,KAAKnB,OAAL,CAAaoB,SAAb,GAAyBqB,IAAzB;MACA,KAAKtB,aAAL,GAAqBsB,IAArB;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEpC,MAAM,CAACyC,QAAD,EAAW;IACf,MAAMC,UAAU,GAAGD,QAAQ,CAACC,UAA5B;;IACA,IAAI,CAACA,UAAL,EAAiB;MACf,KAAK1B,cAAL,GAAsB,IAAtB;IACD,CAFD,MAEO;MACL,IAAI,KAAKA,cAAL,IAAuB0B,UAAU,CAACC,SAAX,CAAqBlC,UAAhD,EAA4D;QAC1D,KAAKO,cAAL,GAAsB0B,UAAU,CAACC,SAAX,CAAqBlC,UAA3C;QACA,KAAKQ,UAAL,GAAkB,IAAlB;MACD;IACF;EACF;;AApOiC;;AAuOpC,eAAezB,aAAf"},"metadata":{},"sourceType":"module"}