{"ast":null,"code":"/**\n * @module ol/Map\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport CompositeMapRenderer from './renderer/Composite.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, { GroupEvent } from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, { getTilePriority } from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { TRUE } from './functions.js';\nimport { apply as applyTransform, create as createTransform } from './transform.js';\nimport { assert } from './asserts.js';\nimport { clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty } from './extent.js';\nimport { defaults as defaultControls } from './control/defaults.js';\nimport { defaults as defaultInteractions } from './interaction/defaults.js';\nimport { fromUserCoordinate, toUserCoordinate } from './proj.js';\nimport { getUid } from './util.js';\nimport { hasArea } from './size.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { removeNode } from './dom.js';\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent.\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */\n\n/**\n * @typedef {function(Map, ?FrameState): any} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} MapEventHandler\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control/defaults.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction/defaults.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */\n\nfunction removeLayerMapProperty(layer) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(null);\n    return;\n  }\n\n  if (layer instanceof LayerGroup) {\n    layer.getLayers().forEach(removeLayerMapProperty);\n  }\n}\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {Map} map Map.\n */\n\n\nfunction setLayerMapProperty(layer, map) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(map);\n    return;\n  }\n\n  if (layer instanceof LayerGroup) {\n    const layers = layer.getLayers().getArray();\n\n    for (let i = 0, ii = layers.length; i < ii; ++i) {\n      setLayerMapProperty(layers[i], map);\n    }\n  }\n}\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map';\n *     import View from 'ol/View';\n *     import TileLayer from 'ol/layer/Tile';\n *     import OSM from 'ol/source/OSM';\n *\n *     const map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1,\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM(),\n *         }),\n *       ],\n *       target: 'map',\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\n\n\nclass Map extends BaseObject {\n  /**\n   * @param {MapOptions} [options] Map options.\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {MapEventHandler<void>}\n     */\n\n    this.un;\n    const optionsInternal = createOptionsInternal(options);\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n\n    this.renderComplete_;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.loaded_ = true;\n    /** @private */\n\n    this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : DEVICE_PIXEL_RATIO;\n    /**\n     * @private\n     * @type {*}\n     */\n\n    this.postRenderTimeoutHandle_;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.animationDelayKey_;\n    /**\n     * @private\n     */\n\n    this.animationDelay_ = this.animationDelay_.bind(this);\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n\n    this.coordinateToPixelTransform_ = createTransform();\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n\n    this.pixelToCoordinateTransform_ = createTransform();\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.frameIndex_ = 0;\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n\n    this.frameState_ = null;\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n\n    this.previousExtent_ = null;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    this.viewPropertyListenerKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    this.viewChangeListenerKey_ = null;\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n\n    this.layerGroupPropertyListenerKeys_ = null;\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%';\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.style.position = 'absolute';\n    this.overlayContainer_.style.zIndex = '0';\n    this.overlayContainer_.style.width = '100%';\n    this.overlayContainer_.style.height = '100%';\n    this.overlayContainer_.style.pointerEvents = 'none';\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.style.position = 'absolute';\n    this.overlayContainerStopEvent_.style.zIndex = '0';\n    this.overlayContainerStopEvent_.style.width = '100%';\n    this.overlayContainerStopEvent_.style.height = '100%';\n    this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n\n    this.mapBrowserEventHandler_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.moveTolerance_ = options.moveTolerance;\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n\n    this.targetChangeHandlerKeys_ = null;\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n\n    this.controls = optionsInternal.controls || defaultControls();\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n\n    this.interactions = optionsInternal.interactions || defaultInteractions({\n      onFocusOnly: true\n    });\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n\n    this.overlays_ = optionsInternal.overlays;\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n\n    this.overlayIdIndex_ = {};\n    /**\n     * @type {import(\"./renderer/Map.js\").default|null}\n     * @private\n     */\n\n    this.renderer_ = null;\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n\n    this.postRenderFunctions_ = [];\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n\n    this.tileQueue_ = new TileQueue(this.getTilePriority.bind(this), this.handleTileChange_.bind(this));\n    this.addChangeListener(MapProperty.LAYERGROUP, this.handleLayerGroupChanged_);\n    this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);\n    this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);\n    this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_); // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n\n    this.setProperties(optionsInternal.values);\n    const map = this;\n\n    if (options.view && !(options.view instanceof View)) {\n      options.view.then(function (viewOptions) {\n        map.setView(new View(viewOptions));\n      });\n    }\n\n    this.controls.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent\n     */\n    function (event) {\n      event.element.setMap(this);\n    }.bind(this));\n    this.controls.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }.bind(this));\n    this.interactions.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(this);\n    }.bind(this));\n    this.interactions.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }.bind(this));\n    this.overlays_.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      this.addOverlayInternal_(event.element);\n    }.bind(this));\n    this.overlays_.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      const id = event.element.getId();\n\n      if (id !== undefined) {\n        delete this.overlayIdIndex_[id.toString()];\n      }\n\n      event.element.setMap(null);\n    }.bind(this));\n    this.controls.forEach(\n    /**\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @this {Map}\n     */\n    function (control) {\n      control.setMap(this);\n    }.bind(this));\n    this.interactions.forEach(\n    /**\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n     * @this {Map}\n     */\n    function (interaction) {\n      interaction.setMap(this);\n    }.bind(this));\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n  }\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n\n\n  addControl(control) {\n    this.getControls().push(control);\n  }\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteractions()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n\n\n  addInteraction(interaction) {\n    this.getInteractions().push(interaction);\n  }\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n\n\n  addLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  }\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n   * @private\n   */\n\n\n  handleLayerAdd_(event) {\n    setLayerMapProperty(event.layer, this);\n  }\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n\n\n  addOverlay(overlay) {\n    this.getOverlays().push(overlay);\n  }\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n\n\n  addOverlayInternal_(overlay) {\n    const id = overlay.getId();\n\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n\n    overlay.setMap(this);\n  }\n  /**\n   *\n   * Clean up.\n   */\n\n\n  disposeInternal() {\n    this.controls.clear();\n    this.interactions.clear();\n    this.overlays_.clear();\n    this.setTarget(null);\n    super.disposeInternal();\n  }\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature~Feature feature} or\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template T\n   * @api\n   */\n\n\n  forEachFeatureAtPixel(pixel, callback, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const layerFilter = options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n  }\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n\n\n  getFeaturesAtPixel(pixel, options) {\n    const features = [];\n    this.forEachFeatureAtPixel(pixel, function (feature) {\n      features.push(feature);\n    }, options);\n    return features;\n  }\n  /**\n   * Get all layers from all layer groups.\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n   * @api\n   */\n\n\n  getAllLayers() {\n    const layers = [];\n\n    function addLayersFrom(layerGroup) {\n      layerGroup.forEach(function (layer) {\n        if (layer instanceof LayerGroup) {\n          addLayersFrom(layer.getLayers());\n        } else {\n          layers.push(layer);\n        }\n      });\n    }\n\n    addLayersFrom(this.getLayers());\n    return layers;\n  }\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through the `layerFilter` option.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n\n\n  hasFeatureAtPixel(pixel, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return false;\n    }\n\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const layerFilter = options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n  }\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n\n\n  getEventCoordinate(event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  }\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n\n\n  getEventCoordinateInternal(event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  }\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n\n\n  getEventPixel(event) {\n    const viewportPosition = this.viewport_.getBoundingClientRect();\n    const eventPosition = //FIXME Are we really calling this with a TouchEvent anywhere?\n    'changedTouches' in event ?\n    /** @type {TouchEvent} */\n    event.changedTouches[0] :\n    /** @type {MouseEvent} */\n    event;\n    return [eventPosition.clientX - viewportPosition.left, eventPosition.clientY - viewportPosition.top];\n  }\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n\n\n  getTarget() {\n    return (\n      /** @type {HTMLElement|string|undefined} */\n      this.get(MapProperty.TARGET)\n    );\n  }\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n\n\n  getTargetElement() {\n    const target = this.getTarget();\n\n    if (target !== undefined) {\n      return typeof target === 'string' ? document.getElementById(target) : target;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n\n\n  getCoordinateFromPixel(pixel) {\n    return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n  }\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n\n\n  getCoordinateFromPixelInternal(pixel) {\n    const frameState = this.frameState_;\n\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    }\n  }\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n\n\n  getControls() {\n    return this.controls;\n  }\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n\n\n  getOverlays() {\n    return this.overlays_;\n  }\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n\n\n  getOverlayById(id) {\n    const overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  }\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n\n\n  getInteractions() {\n    return this.interactions;\n  }\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n\n\n  getLayerGroup() {\n    return (\n      /** @type {LayerGroup} */\n      this.get(MapProperty.LAYERGROUP)\n    );\n  }\n  /**\n   * Clear any existing layers and add layers to the map.\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n   * @api\n   */\n\n\n  setLayers(layers) {\n    const group = this.getLayerGroup();\n\n    if (layers instanceof Collection) {\n      group.setLayers(layers);\n      return;\n    }\n\n    const collection = group.getLayers();\n    collection.clear();\n    collection.extend(layers);\n  }\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n\n\n  getLayers() {\n    const layers = this.getLayerGroup().getLayers();\n    return layers;\n  }\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n\n\n  getLoadingOrNotReady() {\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const state = layerStatesArray[i];\n\n      if (!state.visible) {\n        continue;\n      }\n\n      const renderer = state.layer.getRenderer();\n\n      if (renderer && !renderer.ready) {\n        return true;\n      }\n\n      const source = state.layer.getSource();\n\n      if (source && source.loading) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n\n\n  getPixelFromCoordinate(coordinate) {\n    const viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  }\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n\n\n  getPixelFromCoordinateInternal(coordinate) {\n    const frameState = this.frameState_;\n\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n    }\n  }\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\n   */\n\n\n  getRenderer() {\n    return this.renderer_;\n  }\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n\n\n  getSize() {\n    return (\n      /** @type {import(\"./size.js\").Size|undefined} */\n      this.get(MapProperty.SIZE)\n    );\n  }\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n\n\n  getView() {\n    return (\n      /** @type {View} */\n      this.get(MapProperty.VIEW)\n    );\n  }\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n\n\n  getViewport() {\n    return this.viewport_;\n  }\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n\n\n  getOverlayContainer() {\n    return this.overlayContainer_;\n  }\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n\n\n  getOverlayContainerStopEvent() {\n    return this.overlayContainerStopEvent_;\n  }\n  /**\n   * @return {!Document} The document where the map is displayed.\n   */\n\n\n  getOwnerDocument() {\n    const targetElement = this.getTargetElement();\n    return targetElement ? targetElement.ownerDocument : document;\n  }\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n\n\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);\n  }\n  /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string} [type] Type.\n   */\n\n\n  handleBrowserEvent(browserEvent, type) {\n    type = type || browserEvent.type;\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  }\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n\n\n  handleMapBrowserEvent(mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n\n    const originalEvent =\n    /** @type {PointerEvent} */\n    mapBrowserEvent.originalEvent;\n    const eventType = originalEvent.type;\n\n    if (eventType === PointerEventType.POINTERDOWN || eventType === EventType.WHEEL || eventType === EventType.KEYDOWN) {\n      const doc = this.getOwnerDocument();\n      const rootNode = this.viewport_.getRootNode ? this.viewport_.getRootNode() : doc;\n      const target =\n      /** @type {Node} */\n      originalEvent.target;\n\n      if ( // Abort if the target is a child of the container for elements whose events are not meant\n      // to be handled by map interactions.\n      this.overlayContainerStopEvent_.contains(target) || // Abort if the event target is a child of the container that is no longer in the page.\n      // It's possible for the target to no longer be in the page if it has been removed in an\n      // event listener, this might happen in a Control that recreates it's content based on\n      // user interaction either manually or via a render in something like https://reactjs.org/\n      !(rootNode === doc ? doc.documentElement : rootNode).contains(target)) {\n        return;\n      }\n    }\n\n    mapBrowserEvent.frameState = this.frameState_;\n\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      const interactionsArray = this.getInteractions().getArray().slice();\n\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\n        const interaction = interactionsArray[i];\n\n        if (interaction.getMap() !== this || !interaction.getActive() || !this.getTargetElement()) {\n          continue;\n        }\n\n        const cont = interaction.handleEvent(mapBrowserEvent);\n\n        if (!cont || mapBrowserEvent.propagationStopped) {\n          break;\n        }\n      }\n    }\n  }\n  /**\n   * @protected\n   */\n\n\n  handlePostRender() {\n    const frameState = this.frameState_; // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n\n    const tileQueue = this.tileQueue_;\n\n    if (!tileQueue.isEmpty()) {\n      let maxTotalLoading = this.maxTilesLoading_;\n      let maxNewLoads = maxTotalLoading;\n\n      if (frameState) {\n        const hints = frameState.viewHints;\n\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          const lowOnFrameBudget = Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n\n    if (frameState && this.renderer_ && !frameState.animate) {\n      if (this.renderComplete_ === true) {\n        if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n          this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n        }\n\n        if (this.loaded_ === false) {\n          this.loaded_ = true;\n          this.dispatchEvent(new MapEvent(MapEventType.LOADEND, this, frameState));\n        }\n      } else if (this.loaded_ === true) {\n        this.loaded_ = false;\n        this.dispatchEvent(new MapEvent(MapEventType.LOADSTART, this, frameState));\n      }\n    }\n\n    const postRenderFunctions = this.postRenderFunctions_;\n\n    for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n\n    postRenderFunctions.length = 0;\n  }\n  /**\n   * @private\n   */\n\n\n  handleSizeChanged_() {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n\n    this.render();\n  }\n  /**\n   * @private\n   */\n\n\n  handleTargetChanged_() {\n    if (this.mapBrowserEventHandler_) {\n      for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.targetChangeHandlerKeys_[i]);\n      }\n\n      this.targetChangeHandlerKeys_ = null;\n      this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);\n      this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    } // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n\n    const targetElement = this.getTargetElement();\n\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderTimeoutHandle_ = undefined;\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n\n      if (!this.renderer_) {\n        this.renderer_ = new CompositeMapRenderer(this);\n      }\n\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, this.moveTolerance_);\n\n      for (const key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], this.handleMapBrowserEvent.bind(this));\n      }\n\n      this.viewport_.addEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_, false);\n      this.viewport_.addEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_, PASSIVE_EVENT_LISTENERS ? {\n        passive: false\n      } : false);\n      const defaultView = this.getOwnerDocument().defaultView;\n      const keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;\n      this.targetChangeHandlerKeys_ = [listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this), listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this), listen(defaultView, EventType.RESIZE, this.updateSize, this)];\n    }\n\n    this.updateSize(); // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  }\n  /**\n   * @private\n   */\n\n\n  handleTileChange_() {\n    this.render();\n  }\n  /**\n   * @private\n   */\n\n\n  handleViewPropertyChanged_() {\n    this.render();\n  }\n  /**\n   * @private\n   */\n\n\n  handleViewChanged_() {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n\n    const view = this.getView();\n\n    if (view) {\n      this.updateViewportSize_();\n      this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n      this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n      view.resolveConstraints(0);\n    }\n\n    this.render();\n  }\n  /**\n   * @private\n   */\n\n\n  handleLayerGroupChanged_() {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n\n    const layerGroup = this.getLayerGroup();\n\n    if (layerGroup) {\n      this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n      this.layerGroupPropertyListenerKeys_ = [listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this), listen(layerGroup, EventType.CHANGE, this.render, this), listen(layerGroup, 'addlayer', this.handleLayerAdd_, this), listen(layerGroup, 'removelayer', this.handleLayerRemove_, this)];\n    }\n\n    this.render();\n  }\n  /**\n   * @return {boolean} Is rendered.\n   */\n\n\n  isRendered() {\n    return !!this.frameState_;\n  }\n  /**\n   * @private\n   */\n\n\n  animationDelay_() {\n    this.animationDelayKey_ = undefined;\n    this.renderFrame_(Date.now());\n  }\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n\n\n  renderSync() {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n\n    this.animationDelay_();\n  }\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n\n\n  redrawText() {\n    const layerStates = this.getLayerGroup().getLayerStatesArray();\n\n    for (let i = 0, ii = layerStates.length; i < ii; ++i) {\n      const layer = layerStates[i].layer;\n\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  }\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n\n\n  render() {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  }\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n\n\n  removeControl(control) {\n    return this.getControls().remove(control);\n  }\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n\n\n  removeInteraction(interaction) {\n    return this.getInteractions().remove(interaction);\n  }\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n\n\n  removeLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  }\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n   * @private\n   */\n\n\n  handleLayerRemove_(event) {\n    removeLayerMapProperty(event.layer);\n  }\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n\n\n  removeOverlay(overlay) {\n    return this.getOverlays().remove(overlay);\n  }\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n\n\n  renderFrame_(time) {\n    const size = this.getSize();\n    const view = this.getView();\n    const previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n\n    let frameState = null;\n\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      const viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n      const viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterTree: null,\n        extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {},\n        mapId: getUid(this),\n        renderTargets: {}\n      };\n\n      if (viewState.nextCenter && viewState.nextResolution) {\n        const rotation = isNaN(viewState.nextRotation) ? viewState.rotation : viewState.nextRotation;\n        frameState.nextExtent = getForViewAndSize(viewState.nextCenter, viewState.nextResolution, rotation, size);\n      }\n    }\n\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n\n      Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n\n      if (previousFrameState) {\n        const moveStart = !this.previousExtent_ || !isEmpty(this.previousExtent_) && !equals(frameState.extent, this.previousExtent_);\n\n        if (moveStart) {\n          this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      const idle = this.previousExtent_ && !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING] && !equals(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n    this.renderComplete_ = this.hasListener(MapEventType.LOADSTART) || this.hasListener(MapEventType.LOADEND) || this.hasListener(RenderEventType.RENDERCOMPLETE) ? !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady() : undefined;\n\n    if (!this.postRenderTimeoutHandle_) {\n      this.postRenderTimeoutHandle_ = setTimeout(() => {\n        this.postRenderTimeoutHandle_ = undefined;\n        this.handlePostRender();\n      }, 0);\n    }\n  }\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n\n\n  setLayerGroup(layerGroup) {\n    const oldLayerGroup = this.getLayerGroup();\n\n    if (oldLayerGroup) {\n      this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n    }\n\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  }\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n\n\n  setSize(size) {\n    this.set(MapProperty.SIZE, size);\n  }\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string} [target] The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n\n\n  setTarget(target) {\n    this.set(MapProperty.TARGET, target);\n  }\n  /**\n   * Set the view for this map.\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\n   * alternative allows view properties to be resolved by sources or other components that load\n   * view-related metadata.\n   * @observable\n   * @api\n   */\n\n\n  setView(view) {\n    if (!view || view instanceof View) {\n      this.set(MapProperty.VIEW, view);\n      return;\n    }\n\n    this.set(MapProperty.VIEW, new View());\n    const map = this;\n    view.then(function (viewOptions) {\n      map.setView(new View(viewOptions));\n    });\n  }\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n\n\n  updateSize() {\n    const targetElement = this.getTargetElement();\n    let size = undefined;\n\n    if (targetElement) {\n      const computedStyle = getComputedStyle(targetElement);\n      const width = targetElement.offsetWidth - parseFloat(computedStyle['borderLeftWidth']) - parseFloat(computedStyle['paddingLeft']) - parseFloat(computedStyle['paddingRight']) - parseFloat(computedStyle['borderRightWidth']);\n      const height = targetElement.offsetHeight - parseFloat(computedStyle['borderTopWidth']) - parseFloat(computedStyle['paddingTop']) - parseFloat(computedStyle['paddingBottom']) - parseFloat(computedStyle['borderBottomWidth']);\n\n      if (!isNaN(width) && !isNaN(height)) {\n        size = [width, height];\n\n        if (!hasArea(size) && !!(targetElement.offsetWidth || targetElement.offsetHeight || targetElement.getClientRects().length)) {\n          // eslint-disable-next-line\n          console.warn(\"No map visible because the map container's width or height are 0.\");\n        }\n      }\n    }\n\n    this.setSize(size);\n    this.updateViewportSize_();\n  }\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */\n\n\n  updateViewportSize_() {\n    const view = this.getView();\n\n    if (view) {\n      let size = undefined;\n      const computedStyle = getComputedStyle(this.viewport_);\n\n      if (computedStyle.width && computedStyle.height) {\n        size = [parseInt(computedStyle.width, 10), parseInt(computedStyle.height, 10)];\n      }\n\n      view.setViewportSize(size);\n    }\n  }\n\n}\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\n\n\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  let keyboardEventTarget = null;\n\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;\n  }\n  /**\n   * @type {Object<string, *>}\n   */\n\n\n  const values = {};\n  const layerGroup = options.layers && typeof\n  /** @type {?} */\n  options.layers.getLayers === 'function' ?\n  /** @type {LayerGroup} */\n  options.layers : new LayerGroup({\n    layers:\n    /** @type {Collection<import(\"./layer/Base.js\").default>|Array<import(\"./layer/Base.js\").default>} */\n    options.layers\n  });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n  values[MapProperty.TARGET] = options.target;\n  values[MapProperty.VIEW] = options.view instanceof View ? options.view : new View();\n  /** @type {Collection<import(\"./control/Control.js\").default>} */\n\n  let controls;\n\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(typeof\n      /** @type {?} */\n      options.controls.getArray === 'function', 47); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n\n      controls = options.controls;\n    }\n  }\n  /** @type {Collection<import(\"./interaction/Interaction\").default>} */\n\n\n  let interactions;\n\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(typeof\n      /** @type {?} */\n      options.interactions.getArray === 'function', 48); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n\n      interactions = options.interactions;\n    }\n  }\n  /** @type {Collection<import(\"./Overlay.js\").default>} */\n\n\n  let overlays;\n\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(typeof\n      /** @type {?} */\n      options.overlays.getArray === 'function', 49); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values\n  };\n}\n\nexport default Map;","map":{"version":3,"names":["BaseObject","Collection","CollectionEventType","CompositeMapRenderer","EventType","Layer","LayerGroup","GroupEvent","MapBrowserEvent","MapBrowserEventHandler","MapBrowserEventType","MapEvent","MapEventType","MapProperty","ObjectEventType","PointerEventType","RenderEventType","TileQueue","getTilePriority","View","ViewHint","DEVICE_PIXEL_RATIO","PASSIVE_EVENT_LISTENERS","TRUE","apply","applyTransform","create","createTransform","assert","clone","createOrUpdateEmpty","equals","getForViewAndSize","isEmpty","defaults","defaultControls","defaultInteractions","fromUserCoordinate","toUserCoordinate","getUid","hasArea","listen","unlistenByKey","removeNode","removeLayerMapProperty","layer","setMapInternal","getLayers","forEach","setLayerMapProperty","map","layers","getArray","i","ii","length","Map","constructor","options","on","once","un","optionsInternal","createOptionsInternal","renderComplete_","loaded_","boundHandleBrowserEvent_","handleBrowserEvent","bind","maxTilesLoading_","maxTilesLoading","undefined","pixelRatio_","pixelRatio","postRenderTimeoutHandle_","animationDelayKey_","animationDelay_","coordinateToPixelTransform_","pixelToCoordinateTransform_","frameIndex_","frameState_","previousExtent_","viewPropertyListenerKey_","viewChangeListenerKey_","layerGroupPropertyListenerKeys_","viewport_","document","createElement","className","window","style","position","overflow","width","height","overlayContainer_","zIndex","pointerEvents","appendChild","overlayContainerStopEvent_","mapBrowserEventHandler_","moveTolerance_","moveTolerance","keyboardEventTarget_","keyboardEventTarget","targetChangeHandlerKeys_","controls","interactions","onFocusOnly","overlays_","overlays","overlayIdIndex_","renderer_","postRenderFunctions_","tileQueue_","handleTileChange_","addChangeListener","LAYERGROUP","handleLayerGroupChanged_","VIEW","handleViewChanged_","SIZE","handleSizeChanged_","TARGET","handleTargetChanged_","setProperties","values","view","then","viewOptions","setView","addEventListener","ADD","event","element","setMap","REMOVE","addOverlayInternal_","id","getId","toString","control","interaction","addControl","getControls","push","addInteraction","getInteractions","addLayer","getLayerGroup","handleLayerAdd_","addOverlay","overlay","getOverlays","disposeInternal","clear","setTarget","forEachFeatureAtPixel","pixel","callback","coordinate","getCoordinateFromPixelInternal","hitTolerance","layerFilter","checkWrapped","forEachFeatureAtCoordinate","getFeaturesAtPixel","features","feature","getAllLayers","addLayersFrom","layerGroup","hasFeatureAtPixel","hasFeatureAtCoordinate","getEventCoordinate","getCoordinateFromPixel","getEventPixel","getEventCoordinateInternal","viewportPosition","getBoundingClientRect","eventPosition","changedTouches","clientX","left","clientY","top","getTarget","get","getTargetElement","target","getElementById","getView","getProjection","frameState","pixelToCoordinateTransform","slice","getOverlayById","setLayers","group","collection","extend","getLoadingOrNotReady","layerStatesArray","getLayerStatesArray","state","visible","renderer","getRenderer","ready","source","getSource","loading","getPixelFromCoordinate","viewCoordinate","getPixelFromCoordinateInternal","coordinateToPixelTransform","getSize","getViewport","getOverlayContainer","getOverlayContainerStopEvent","getOwnerDocument","targetElement","ownerDocument","tile","tileSourceKey","tileCenter","tileResolution","browserEvent","type","mapBrowserEvent","handleMapBrowserEvent","originalEvent","eventType","POINTERDOWN","WHEEL","KEYDOWN","doc","rootNode","getRootNode","contains","documentElement","dispatchEvent","interactionsArray","getMap","getActive","cont","handleEvent","propagationStopped","handlePostRender","tileQueue","maxTotalLoading","maxNewLoads","hints","viewHints","ANIMATING","INTERACTING","lowOnFrameBudget","Date","now","time","getTilesLoading","reprioritize","loadMoreTiles","animate","hasListener","RENDERCOMPLETE","dispatchRenderEvent","LOADEND","LOADSTART","postRenderFunctions","getAnimating","resolveConstraints","render","removeEventListener","CONTEXTMENU","dispose","clearTimeout","cancelAnimationFrame","key","passive","defaultView","KEYPRESS","RESIZE","updateSize","handleViewPropertyChanged_","updateViewportSize_","PROPERTYCHANGE","CHANGE","handleLayerRemove_","isRendered","renderFrame_","renderSync","redrawText","layerStates","hasRenderer","handleFontsChanged","requestAnimationFrame","removeControl","remove","removeInteraction","removeLayer","removeOverlay","size","previousFrameState","isDef","getHints","viewState","getState","declutterTree","extent","center","resolution","rotation","index","layerIndex","usedTiles","wantedTiles","mapId","renderTargets","nextCenter","nextResolution","isNaN","nextRotation","nextExtent","renderFrame","Array","prototype","moveStart","MOVESTART","idle","MOVEEND","POSTRENDER","getCount","setTimeout","setLayerGroup","oldLayerGroup","set","setSize","computedStyle","getComputedStyle","offsetWidth","parseFloat","offsetHeight","getClientRects","console","warn","parseInt","setViewportSize","isArray"],"sources":["D:/Work/Learning/demo/node_modules/ol/Map.js"],"sourcesContent":["/**\n * @module ol/Map\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport CompositeMapRenderer from './renderer/Composite.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, {GroupEvent} from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, {getTilePriority} from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport {DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS} from './has.js';\nimport {TRUE} from './functions.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n} from './transform.js';\nimport {assert} from './asserts.js';\nimport {\n  clone,\n  createOrUpdateEmpty,\n  equals,\n  getForViewAndSize,\n  isEmpty,\n} from './extent.js';\nimport {defaults as defaultControls} from './control/defaults.js';\nimport {defaults as defaultInteractions} from './interaction/defaults.js';\nimport {fromUserCoordinate, toUserCoordinate} from './proj.js';\nimport {getUid} from './util.js';\nimport {hasArea} from './size.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {removeNode} from './dom.js';\n\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent.\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */\n\n/**\n * @typedef {function(Map, ?FrameState): any} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} MapEventHandler\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control/defaults.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction/defaults.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */\nfunction removeLayerMapProperty(layer) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(null);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    layer.getLayers().forEach(removeLayerMapProperty);\n  }\n}\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {Map} map Map.\n */\nfunction setLayerMapProperty(layer, map) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(map);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    const layers = layer.getLayers().getArray();\n    for (let i = 0, ii = layers.length; i < ii; ++i) {\n      setLayerMapProperty(layers[i], map);\n    }\n  }\n}\n\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map';\n *     import View from 'ol/View';\n *     import TileLayer from 'ol/layer/Tile';\n *     import OSM from 'ol/source/OSM';\n *\n *     const map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1,\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM(),\n *         }),\n *       ],\n *       target: 'map',\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nclass Map extends BaseObject {\n  /**\n   * @param {MapOptions} [options] Map options.\n   */\n  constructor(options) {\n    super();\n\n    options = options || {};\n\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {MapEventHandler<void>}\n     */\n    this.un;\n\n    const optionsInternal = createOptionsInternal(options);\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.renderComplete_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.loaded_ = true;\n\n    /** @private */\n    this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxTilesLoading_ =\n      options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ =\n      options.pixelRatio !== undefined\n        ? options.pixelRatio\n        : DEVICE_PIXEL_RATIO;\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.postRenderTimeoutHandle_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.animationDelayKey_;\n\n    /**\n     * @private\n     */\n    this.animationDelay_ = this.animationDelay_.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.coordinateToPixelTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.pixelToCoordinateTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.frameIndex_ = 0;\n\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    this.frameState_ = null;\n\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.previousExtent_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewPropertyListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewChangeListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.layerGroupPropertyListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className =\n      'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%';\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.style.position = 'absolute';\n    this.overlayContainer_.style.zIndex = '0';\n    this.overlayContainer_.style.width = '100%';\n    this.overlayContainer_.style.height = '100%';\n    this.overlayContainer_.style.pointerEvents = 'none';\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.style.position = 'absolute';\n    this.overlayContainerStopEvent_.style.zIndex = '0';\n    this.overlayContainerStopEvent_.style.width = '100%';\n    this.overlayContainerStopEvent_.style.height = '100%';\n    this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    this.mapBrowserEventHandler_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.moveTolerance_ = options.moveTolerance;\n\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.targetChangeHandlerKeys_ = null;\n\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    this.controls = optionsInternal.controls || defaultControls();\n\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    this.interactions =\n      optionsInternal.interactions ||\n      defaultInteractions({\n        onFocusOnly: true,\n      });\n\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    this.overlays_ = optionsInternal.overlays;\n\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    this.overlayIdIndex_ = {};\n\n    /**\n     * @type {import(\"./renderer/Map.js\").default|null}\n     * @private\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    this.postRenderFunctions_ = [];\n\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    this.tileQueue_ = new TileQueue(\n      this.getTilePriority.bind(this),\n      this.handleTileChange_.bind(this)\n    );\n\n    this.addChangeListener(\n      MapProperty.LAYERGROUP,\n      this.handleLayerGroupChanged_\n    );\n    this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);\n    this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);\n    this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_);\n\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    this.setProperties(optionsInternal.values);\n\n    const map = this;\n    if (options.view && !(options.view instanceof View)) {\n      options.view.then(function (viewOptions) {\n        map.setView(new View(viewOptions));\n      });\n    }\n\n    this.controls.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent\n       */\n      function (event) {\n        event.element.setMap(this);\n      }.bind(this)\n    );\n\n    this.controls.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(this);\n      }.bind(this)\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.overlays_.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n       */\n      function (event) {\n        this.addOverlayInternal_(event.element);\n      }.bind(this)\n    );\n\n    this.overlays_.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n       */\n      function (event) {\n        const id = event.element.getId();\n        if (id !== undefined) {\n          delete this.overlayIdIndex_[id.toString()];\n        }\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.controls.forEach(\n      /**\n       * @param {import(\"./control/Control.js\").default} control Control.\n       * @this {Map}\n       */\n      function (control) {\n        control.setMap(this);\n      }.bind(this)\n    );\n\n    this.interactions.forEach(\n      /**\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n       * @this {Map}\n       */\n      function (interaction) {\n        interaction.setMap(this);\n      }.bind(this)\n    );\n\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n  }\n\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  addControl(control) {\n    this.getControls().push(control);\n  }\n\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteractions()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n  addInteraction(interaction) {\n    this.getInteractions().push(interaction);\n  }\n\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n  addLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  }\n\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n   * @private\n   */\n  handleLayerAdd_(event) {\n    setLayerMapProperty(event.layer, this);\n  }\n\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n  addOverlay(overlay) {\n    this.getOverlays().push(overlay);\n  }\n\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n  addOverlayInternal_(overlay) {\n    const id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  }\n\n  /**\n   *\n   * Clean up.\n   */\n  disposeInternal() {\n    this.controls.clear();\n    this.interactions.clear();\n    this.overlays_.clear();\n    this.setTarget(null);\n    super.disposeInternal();\n  }\n\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature~Feature feature} or\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template T\n   * @api\n   */\n  forEachFeatureAtPixel(pixel, callback, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const hitTolerance =\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const layerFilter =\n      options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      callback,\n      null,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n  getFeaturesAtPixel(pixel, options) {\n    const features = [];\n    this.forEachFeatureAtPixel(\n      pixel,\n      function (feature) {\n        features.push(feature);\n      },\n      options\n    );\n    return features;\n  }\n\n  /**\n   * Get all layers from all layer groups.\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n   * @api\n   */\n  getAllLayers() {\n    const layers = [];\n    function addLayersFrom(layerGroup) {\n      layerGroup.forEach(function (layer) {\n        if (layer instanceof LayerGroup) {\n          addLayersFrom(layer.getLayers());\n        } else {\n          layers.push(layer);\n        }\n      });\n    }\n    addLayersFrom(this.getLayers());\n    return layers;\n  }\n\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through the `layerFilter` option.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n  hasFeatureAtPixel(pixel, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return false;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const layerFilter =\n      options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const hitTolerance =\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getEventCoordinate(event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n  getEventCoordinateInternal(event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n  getEventPixel(event) {\n    const viewportPosition = this.viewport_.getBoundingClientRect();\n    const eventPosition =\n      //FIXME Are we really calling this with a TouchEvent anywhere?\n      'changedTouches' in event\n        ? /** @type {TouchEvent} */ (event).changedTouches[0]\n        : /** @type {MouseEvent} */ (event);\n\n    return [\n      eventPosition.clientX - viewportPosition.left,\n      eventPosition.clientY - viewportPosition.top,\n    ];\n  }\n\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n  getTarget() {\n    return /** @type {HTMLElement|string|undefined} */ (\n      this.get(MapProperty.TARGET)\n    );\n  }\n\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n  getTargetElement() {\n    const target = this.getTarget();\n    if (target !== undefined) {\n      return typeof target === 'string'\n        ? document.getElementById(target)\n        : target;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n  getCoordinateFromPixel(pixel) {\n    return toUserCoordinate(\n      this.getCoordinateFromPixelInternal(pixel),\n      this.getView().getProjection()\n    );\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n  getCoordinateFromPixelInternal(pixel) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(\n        frameState.pixelToCoordinateTransform,\n        pixel.slice()\n      );\n    }\n  }\n\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n  getControls() {\n    return this.controls;\n  }\n\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n  getOverlays() {\n    return this.overlays_;\n  }\n\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n  getOverlayById(id) {\n    const overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  }\n\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n  getInteractions() {\n    return this.interactions;\n  }\n\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  getLayerGroup() {\n    return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));\n  }\n\n  /**\n   * Clear any existing layers and add layers to the map.\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n   * @api\n   */\n  setLayers(layers) {\n    const group = this.getLayerGroup();\n    if (layers instanceof Collection) {\n      group.setLayers(layers);\n      return;\n    }\n\n    const collection = group.getLayers();\n    collection.clear();\n    collection.extend(layers);\n  }\n\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n  getLayers() {\n    const layers = this.getLayerGroup().getLayers();\n    return layers;\n  }\n\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n  getLoadingOrNotReady() {\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const state = layerStatesArray[i];\n      if (!state.visible) {\n        continue;\n      }\n      const renderer = state.layer.getRenderer();\n      if (renderer && !renderer.ready) {\n        return true;\n      }\n      const source = state.layer.getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n  getPixelFromCoordinate(coordinate) {\n    const viewCoordinate = fromUserCoordinate(\n      coordinate,\n      this.getView().getProjection()\n    );\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n  getPixelFromCoordinateInternal(coordinate) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(\n        frameState.coordinateToPixelTransform,\n        coordinate.slice(0, 2)\n      );\n    }\n  }\n\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  getSize() {\n    return /** @type {import(\"./size.js\").Size|undefined} */ (\n      this.get(MapProperty.SIZE)\n    );\n  }\n\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n  getView() {\n    return /** @type {View} */ (this.get(MapProperty.VIEW));\n  }\n\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n  getViewport() {\n    return this.viewport_;\n  }\n\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n  getOverlayContainer() {\n    return this.overlayContainer_;\n  }\n\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n  getOverlayContainerStopEvent() {\n    return this.overlayContainerStopEvent_;\n  }\n\n  /**\n   * @return {!Document} The document where the map is displayed.\n   */\n  getOwnerDocument() {\n    const targetElement = this.getTargetElement();\n    return targetElement ? targetElement.ownerDocument : document;\n  }\n\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(\n      this.frameState_,\n      tile,\n      tileSourceKey,\n      tileCenter,\n      tileResolution\n    );\n  }\n\n  /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string} [type] Type.\n   */\n  handleBrowserEvent(browserEvent, type) {\n    type = type || browserEvent.type;\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  }\n\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n  handleMapBrowserEvent(mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    const originalEvent = /** @type {PointerEvent} */ (\n      mapBrowserEvent.originalEvent\n    );\n    const eventType = originalEvent.type;\n    if (\n      eventType === PointerEventType.POINTERDOWN ||\n      eventType === EventType.WHEEL ||\n      eventType === EventType.KEYDOWN\n    ) {\n      const doc = this.getOwnerDocument();\n      const rootNode = this.viewport_.getRootNode\n        ? this.viewport_.getRootNode()\n        : doc;\n      const target = /** @type {Node} */ (originalEvent.target);\n      if (\n        // Abort if the target is a child of the container for elements whose events are not meant\n        // to be handled by map interactions.\n        this.overlayContainerStopEvent_.contains(target) ||\n        // Abort if the event target is a child of the container that is no longer in the page.\n        // It's possible for the target to no longer be in the page if it has been removed in an\n        // event listener, this might happen in a Control that recreates it's content based on\n        // user interaction either manually or via a render in something like https://reactjs.org/\n        !(rootNode === doc ? doc.documentElement : rootNode).contains(target)\n      ) {\n        return;\n      }\n    }\n    mapBrowserEvent.frameState = this.frameState_;\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      const interactionsArray = this.getInteractions().getArray().slice();\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\n        const interaction = interactionsArray[i];\n        if (\n          interaction.getMap() !== this ||\n          !interaction.getActive() ||\n          !this.getTargetElement()\n        ) {\n          continue;\n        }\n        const cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont || mapBrowserEvent.propagationStopped) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handlePostRender() {\n    const frameState = this.frameState_;\n\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    const tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      let maxTotalLoading = this.maxTilesLoading_;\n      let maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        const hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          const lowOnFrameBudget = Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n\n    if (frameState && this.renderer_ && !frameState.animate) {\n      if (this.renderComplete_ === true) {\n        if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n          this.renderer_.dispatchRenderEvent(\n            RenderEventType.RENDERCOMPLETE,\n            frameState\n          );\n        }\n        if (this.loaded_ === false) {\n          this.loaded_ = true;\n          this.dispatchEvent(\n            new MapEvent(MapEventType.LOADEND, this, frameState)\n          );\n        }\n      } else if (this.loaded_ === true) {\n        this.loaded_ = false;\n        this.dispatchEvent(\n          new MapEvent(MapEventType.LOADSTART, this, frameState)\n        );\n      }\n    }\n\n    const postRenderFunctions = this.postRenderFunctions_;\n    for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  handleSizeChanged_() {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleTargetChanged_() {\n    if (this.mapBrowserEventHandler_) {\n      for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.targetChangeHandlerKeys_[i]);\n      }\n      this.targetChangeHandlerKeys_ = null;\n      this.viewport_.removeEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_\n      );\n      this.viewport_.removeEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_\n      );\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    }\n\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n    const targetElement = this.getTargetElement();\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderTimeoutHandle_ = undefined;\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n      if (!this.renderer_) {\n        this.renderer_ = new CompositeMapRenderer(this);\n      }\n\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(\n        this,\n        this.moveTolerance_\n      );\n      for (const key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(\n          MapBrowserEventType[key],\n          this.handleMapBrowserEvent.bind(this)\n        );\n      }\n      this.viewport_.addEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_,\n        false\n      );\n      this.viewport_.addEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_,\n        PASSIVE_EVENT_LISTENERS ? {passive: false} : false\n      );\n\n      const defaultView = this.getOwnerDocument().defaultView;\n      const keyboardEventTarget = !this.keyboardEventTarget_\n        ? targetElement\n        : this.keyboardEventTarget_;\n      this.targetChangeHandlerKeys_ = [\n        listen(\n          keyboardEventTarget,\n          EventType.KEYDOWN,\n          this.handleBrowserEvent,\n          this\n        ),\n        listen(\n          keyboardEventTarget,\n          EventType.KEYPRESS,\n          this.handleBrowserEvent,\n          this\n        ),\n        listen(defaultView, EventType.RESIZE, this.updateSize, this),\n      ];\n    }\n\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  }\n\n  /**\n   * @private\n   */\n  handleTileChange_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewPropertyChanged_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewChanged_() {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    const view = this.getView();\n    if (view) {\n      this.updateViewportSize_();\n\n      this.viewPropertyListenerKey_ = listen(\n        view,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n      this.viewChangeListenerKey_ = listen(\n        view,\n        EventType.CHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n\n      view.resolveConstraints(0);\n    }\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleLayerGroupChanged_() {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    const layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n      this.layerGroupPropertyListenerKeys_ = [\n        listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),\n        listen(layerGroup, EventType.CHANGE, this.render, this),\n        listen(layerGroup, 'addlayer', this.handleLayerAdd_, this),\n        listen(layerGroup, 'removelayer', this.handleLayerRemove_, this),\n      ];\n    }\n    this.render();\n  }\n\n  /**\n   * @return {boolean} Is rendered.\n   */\n  isRendered() {\n    return !!this.frameState_;\n  }\n\n  /**\n   * @private\n   */\n  animationDelay_() {\n    this.animationDelayKey_ = undefined;\n    this.renderFrame_(Date.now());\n  }\n\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n  renderSync() {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  }\n\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n  redrawText() {\n    const layerStates = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStates.length; i < ii; ++i) {\n      const layer = layerStates[i].layer;\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  }\n\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n  render() {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  }\n\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n  removeControl(control) {\n    return this.getControls().remove(control);\n  }\n\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n  removeInteraction(interaction) {\n    return this.getInteractions().remove(interaction);\n  }\n\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n  removeLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  }\n\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n   * @private\n   */\n  handleLayerRemove_(event) {\n    removeLayerMapProperty(event.layer);\n  }\n\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n  removeOverlay(overlay) {\n    return this.getOverlays().remove(overlay);\n  }\n\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n  renderFrame_(time) {\n    const size = this.getSize();\n    const view = this.getView();\n    const previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    let frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      const viewHints = view.getHints(\n        this.frameState_ ? this.frameState_.viewHints : undefined\n      );\n      const viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterTree: null,\n        extent: getForViewAndSize(\n          viewState.center,\n          viewState.resolution,\n          viewState.rotation,\n          size\n        ),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {},\n        mapId: getUid(this),\n        renderTargets: {},\n      };\n      if (viewState.nextCenter && viewState.nextResolution) {\n        const rotation = isNaN(viewState.nextRotation)\n          ? viewState.rotation\n          : viewState.nextRotation;\n\n        frameState.nextExtent = getForViewAndSize(\n          viewState.nextCenter,\n          viewState.nextResolution,\n          rotation,\n          size\n        );\n      }\n    }\n\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(\n        this.postRenderFunctions_,\n        frameState.postRenderFunctions\n      );\n\n      if (previousFrameState) {\n        const moveStart =\n          !this.previousExtent_ ||\n          (!isEmpty(this.previousExtent_) &&\n            !equals(frameState.extent, this.previousExtent_));\n        if (moveStart) {\n          this.dispatchEvent(\n            new MapEvent(MapEventType.MOVESTART, this, previousFrameState)\n          );\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      const idle =\n        this.previousExtent_ &&\n        !frameState.viewHints[ViewHint.ANIMATING] &&\n        !frameState.viewHints[ViewHint.INTERACTING] &&\n        !equals(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(\n          new MapEvent(MapEventType.MOVEEND, this, frameState)\n        );\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n\n    this.renderComplete_ =\n      this.hasListener(MapEventType.LOADSTART) ||\n      this.hasListener(MapEventType.LOADEND) ||\n      this.hasListener(RenderEventType.RENDERCOMPLETE)\n        ? !this.tileQueue_.getTilesLoading() &&\n          !this.tileQueue_.getCount() &&\n          !this.getLoadingOrNotReady()\n        : undefined;\n\n    if (!this.postRenderTimeoutHandle_) {\n      this.postRenderTimeoutHandle_ = setTimeout(() => {\n        this.postRenderTimeoutHandle_ = undefined;\n        this.handlePostRender();\n      }, 0);\n    }\n  }\n\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  setLayerGroup(layerGroup) {\n    const oldLayerGroup = this.getLayerGroup();\n    if (oldLayerGroup) {\n      this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n    }\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  }\n\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  setSize(size) {\n    this.set(MapProperty.SIZE, size);\n  }\n\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string} [target] The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n  setTarget(target) {\n    this.set(MapProperty.TARGET, target);\n  }\n\n  /**\n   * Set the view for this map.\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\n   * alternative allows view properties to be resolved by sources or other components that load\n   * view-related metadata.\n   * @observable\n   * @api\n   */\n  setView(view) {\n    if (!view || view instanceof View) {\n      this.set(MapProperty.VIEW, view);\n      return;\n    }\n    this.set(MapProperty.VIEW, new View());\n\n    const map = this;\n    view.then(function (viewOptions) {\n      map.setView(new View(viewOptions));\n    });\n  }\n\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n  updateSize() {\n    const targetElement = this.getTargetElement();\n\n    let size = undefined;\n    if (targetElement) {\n      const computedStyle = getComputedStyle(targetElement);\n      const width =\n        targetElement.offsetWidth -\n        parseFloat(computedStyle['borderLeftWidth']) -\n        parseFloat(computedStyle['paddingLeft']) -\n        parseFloat(computedStyle['paddingRight']) -\n        parseFloat(computedStyle['borderRightWidth']);\n      const height =\n        targetElement.offsetHeight -\n        parseFloat(computedStyle['borderTopWidth']) -\n        parseFloat(computedStyle['paddingTop']) -\n        parseFloat(computedStyle['paddingBottom']) -\n        parseFloat(computedStyle['borderBottomWidth']);\n      if (!isNaN(width) && !isNaN(height)) {\n        size = [width, height];\n        if (\n          !hasArea(size) &&\n          !!(\n            targetElement.offsetWidth ||\n            targetElement.offsetHeight ||\n            targetElement.getClientRects().length\n          )\n        ) {\n          // eslint-disable-next-line\n          console.warn(\n            \"No map visible because the map container's width or height are 0.\"\n          );\n        }\n      }\n    }\n\n    this.setSize(size);\n    this.updateViewportSize_();\n  }\n\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */\n  updateViewportSize_() {\n    const view = this.getView();\n    if (view) {\n      let size = undefined;\n      const computedStyle = getComputedStyle(this.viewport_);\n      if (computedStyle.width && computedStyle.height) {\n        size = [\n          parseInt(computedStyle.width, 10),\n          parseInt(computedStyle.height, 10),\n        ];\n      }\n      view.setViewportSize(size);\n    }\n  }\n}\n\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  let keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget =\n      typeof options.keyboardEventTarget === 'string'\n        ? document.getElementById(options.keyboardEventTarget)\n        : options.keyboardEventTarget;\n  }\n\n  /**\n   * @type {Object<string, *>}\n   */\n  const values = {};\n\n  const layerGroup =\n    options.layers &&\n    typeof (/** @type {?} */ (options.layers).getLayers) === 'function'\n      ? /** @type {LayerGroup} */ (options.layers)\n      : new LayerGroup({\n          layers:\n            /** @type {Collection<import(\"./layer/Base.js\").default>|Array<import(\"./layer/Base.js\").default>} */ (\n              options.layers\n            ),\n        });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n\n  values[MapProperty.TARGET] = options.target;\n\n  values[MapProperty.VIEW] =\n    options.view instanceof View ? options.view : new View();\n\n  /** @type {Collection<import(\"./control/Control.js\").default>} */\n  let controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.controls).getArray) === 'function',\n        47\n      ); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n      controls = options.controls;\n    }\n  }\n\n  /** @type {Collection<import(\"./interaction/Interaction\").default>} */\n  let interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.interactions).getArray) ===\n          'function',\n        48\n      ); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n      interactions = options.interactions;\n    }\n  }\n\n  /** @type {Collection<import(\"./Overlay.js\").default>} */\n  let overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.overlays).getArray) === 'function',\n        49\n      ); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values,\n  };\n}\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}