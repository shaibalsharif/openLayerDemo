{"ast":null,"code":"/**\n * @module ol/proj/Projection\n */\nimport { METERS_PER_UNIT } from './Units.js';\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution} function will be used.\n */\n\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4.register} function.\n *\n * @api\n */\n\nclass Projection {\n  /**\n   * @param {Options} options Projection options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {string}\n     */\n    this.code_ = options.code;\n    /**\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\n     * tile.\n     * @private\n     * @type {import(\"./Units.js\").Units}\n     */\n\n    this.units_ =\n    /** @type {import(\"./Units.js\").Units} */\n    options.units;\n    /**\n     * Validity extent of the projection in projected coordinates. For projections\n     * with `TILE_PIXELS` units, this is the extent of the tile in\n     * tile pixel space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.extent_ = options.extent !== undefined ? options.extent : null;\n    /**\n     * Extent of the world in EPSG:4326. For projections with\n     * `TILE_PIXELS` units, this is the extent of the tile in\n     * projected coordinate space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.worldExtent_ = options.worldExtent !== undefined ? options.worldExtent : null;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.axisOrientation_ = options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.global_ = options.global !== undefined ? options.global : false;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.canWrapX_ = !!(this.global_ && this.extent_);\n    /**\n     * @private\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n     */\n\n    this.getPointResolutionFunc_ = options.getPointResolution;\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n\n    this.defaultTileGrid_ = null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.metersPerUnit_ = options.metersPerUnit;\n  }\n  /**\n   * @return {boolean} The projection is suitable for wrapping the x-axis\n   */\n\n\n  canWrapX() {\n    return this.canWrapX_;\n  }\n  /**\n   * Get the code for this projection, e.g. 'EPSG:4326'.\n   * @return {string} Code.\n   * @api\n   */\n\n\n  getCode() {\n    return this.code_;\n  }\n  /**\n   * Get the validity extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  getExtent() {\n    return this.extent_;\n  }\n  /**\n   * Get the units of this projection.\n   * @return {import(\"./Units.js\").Units} Units.\n   * @api\n   */\n\n\n  getUnits() {\n    return this.units_;\n  }\n  /**\n   * Get the amount of meters per unit of this projection.  If the projection is\n   * not configured with `metersPerUnit` or a units identifier, the return is\n   * `undefined`.\n   * @return {number|undefined} Meters.\n   * @api\n   */\n\n\n  getMetersPerUnit() {\n    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n  }\n  /**\n   * Get the world extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  getWorldExtent() {\n    return this.worldExtent_;\n  }\n  /**\n   * Get the axis orientation of this projection.\n   * Example values are:\n   * enu - the default easting, northing, elevation.\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n   *     or south orientated transverse mercator.\n   * wnu - westing, northing, up - some planetary coordinate systems have\n   *     \"west positive\" coordinate systems\n   * @return {string} Axis orientation.\n   * @api\n   */\n\n\n  getAxisOrientation() {\n    return this.axisOrientation_;\n  }\n  /**\n   * Is this projection a global projection which spans the whole world?\n   * @return {boolean} Whether the projection is global.\n   * @api\n   */\n\n\n  isGlobal() {\n    return this.global_;\n  }\n  /**\n   * Set if the projection is a global projection which spans the whole world\n   * @param {boolean} global Whether the projection is global.\n   * @api\n   */\n\n\n  setGlobal(global) {\n    this.global_ = global;\n    this.canWrapX_ = !!(global && this.extent_);\n  }\n  /**\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n   */\n\n\n  getDefaultTileGrid() {\n    return this.defaultTileGrid_;\n  }\n  /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n   */\n\n\n  setDefaultTileGrid(tileGrid) {\n    this.defaultTileGrid_ = tileGrid;\n  }\n  /**\n   * Set the validity extent for this projection.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n\n\n  setExtent(extent) {\n    this.extent_ = extent;\n    this.canWrapX_ = !!(this.global_ && extent);\n  }\n  /**\n   * Set the world extent for this projection.\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\n   *     [minlon, minlat, maxlon, maxlat].\n   * @api\n   */\n\n\n  setWorldExtent(worldExtent) {\n    this.worldExtent_ = worldExtent;\n  }\n  /**\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n   * for this projection.\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n   * @api\n   */\n\n\n  setGetPointResolution(func) {\n    this.getPointResolutionFunc_ = func;\n  }\n  /**\n   * Get the custom point resolution function for this projection (if set).\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n   * resolution function (if set).\n   */\n\n\n  getPointResolutionFunc() {\n    return this.getPointResolutionFunc_;\n  }\n\n}\n\nexport default Projection;","map":{"version":3,"names":["METERS_PER_UNIT","Projection","constructor","options","code_","code","units_","units","extent_","extent","undefined","worldExtent_","worldExtent","axisOrientation_","axisOrientation","global_","global","canWrapX_","getPointResolutionFunc_","getPointResolution","defaultTileGrid_","metersPerUnit_","metersPerUnit","canWrapX","getCode","getExtent","getUnits","getMetersPerUnit","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setExtent","setWorldExtent","setGetPointResolution","func","getPointResolutionFunc"],"sources":["D:/Work/Learning/demo/node_modules/ol/proj/Projection.js"],"sourcesContent":["/**\n * @module ol/proj/Projection\n */\nimport {METERS_PER_UNIT} from './Units.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution} function will be used.\n */\n\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4.register} function.\n *\n * @api\n */\nclass Projection {\n  /**\n   * @param {Options} options Projection options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {string}\n     */\n    this.code_ = options.code;\n\n    /**\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\n     * tile.\n     * @private\n     * @type {import(\"./Units.js\").Units}\n     */\n    this.units_ = /** @type {import(\"./Units.js\").Units} */ (options.units);\n\n    /**\n     * Validity extent of the projection in projected coordinates. For projections\n     * with `TILE_PIXELS` units, this is the extent of the tile in\n     * tile pixel space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = options.extent !== undefined ? options.extent : null;\n\n    /**\n     * Extent of the world in EPSG:4326. For projections with\n     * `TILE_PIXELS` units, this is the extent of the tile in\n     * projected coordinate space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.worldExtent_ =\n      options.worldExtent !== undefined ? options.worldExtent : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.axisOrientation_ =\n      options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.global_ = options.global !== undefined ? options.global : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.canWrapX_ = !!(this.global_ && this.extent_);\n\n    /**\n     * @private\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n     */\n    this.getPointResolutionFunc_ = options.getPointResolution;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.defaultTileGrid_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.metersPerUnit_ = options.metersPerUnit;\n  }\n\n  /**\n   * @return {boolean} The projection is suitable for wrapping the x-axis\n   */\n  canWrapX() {\n    return this.canWrapX_;\n  }\n\n  /**\n   * Get the code for this projection, e.g. 'EPSG:4326'.\n   * @return {string} Code.\n   * @api\n   */\n  getCode() {\n    return this.code_;\n  }\n\n  /**\n   * Get the validity extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the units of this projection.\n   * @return {import(\"./Units.js\").Units} Units.\n   * @api\n   */\n  getUnits() {\n    return this.units_;\n  }\n\n  /**\n   * Get the amount of meters per unit of this projection.  If the projection is\n   * not configured with `metersPerUnit` or a units identifier, the return is\n   * `undefined`.\n   * @return {number|undefined} Meters.\n   * @api\n   */\n  getMetersPerUnit() {\n    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n  }\n\n  /**\n   * Get the world extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getWorldExtent() {\n    return this.worldExtent_;\n  }\n\n  /**\n   * Get the axis orientation of this projection.\n   * Example values are:\n   * enu - the default easting, northing, elevation.\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n   *     or south orientated transverse mercator.\n   * wnu - westing, northing, up - some planetary coordinate systems have\n   *     \"west positive\" coordinate systems\n   * @return {string} Axis orientation.\n   * @api\n   */\n  getAxisOrientation() {\n    return this.axisOrientation_;\n  }\n\n  /**\n   * Is this projection a global projection which spans the whole world?\n   * @return {boolean} Whether the projection is global.\n   * @api\n   */\n  isGlobal() {\n    return this.global_;\n  }\n\n  /**\n   * Set if the projection is a global projection which spans the whole world\n   * @param {boolean} global Whether the projection is global.\n   * @api\n   */\n  setGlobal(global) {\n    this.global_ = global;\n    this.canWrapX_ = !!(global && this.extent_);\n  }\n\n  /**\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n   */\n  getDefaultTileGrid() {\n    return this.defaultTileGrid_;\n  }\n\n  /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n   */\n  setDefaultTileGrid(tileGrid) {\n    this.defaultTileGrid_ = tileGrid;\n  }\n\n  /**\n   * Set the validity extent for this projection.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  setExtent(extent) {\n    this.extent_ = extent;\n    this.canWrapX_ = !!(this.global_ && extent);\n  }\n\n  /**\n   * Set the world extent for this projection.\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\n   *     [minlon, minlat, maxlon, maxlat].\n   * @api\n   */\n  setWorldExtent(worldExtent) {\n    this.worldExtent_ = worldExtent;\n  }\n\n  /**\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n   * for this projection.\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n   * @api\n   */\n  setGetPointResolution(func) {\n    this.getPointResolutionFunc_ = func;\n  }\n\n  /**\n   * Get the custom point resolution function for this projection (if set).\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n   * resolution function (if set).\n   */\n  getPointResolutionFunc() {\n    return this.getPointResolutionFunc_;\n  }\n}\n\nexport default Projection;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}