{"ast":null,"code":"/**\n * @module ol/transform\n */\nimport { WORKER_OFFSCREEN_CANVAS } from './has.js';\nimport { assert } from './asserts.js';\n/**\n * An array representing an affine 2d transformation for use with\n * {@link module:ol/transform} functions. The array has 6 elements.\n * @typedef {!Array<number>} Transform\n * @api\n */\n\n/**\n * Collection of affine 2d transformation functions. The functions work on an\n * array of 6 elements. The element order is compatible with the [SVGMatrix\n * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is\n * a subset (elements a to f) of a 3Ã—3 matrix:\n * ```\n * [ a c e ]\n * [ b d f ]\n * [ 0 0 1 ]\n * ```\n */\n\n/**\n * @private\n * @type {Transform}\n */\n\nconst tmp_ = new Array(6);\n/**\n * Create an identity transform.\n * @return {!Transform} Identity transform.\n */\n\nexport function create() {\n  return [1, 0, 0, 1, 0, 0];\n}\n/**\n * Resets the given transform to an identity transform.\n * @param {!Transform} transform Transform.\n * @return {!Transform} Transform.\n */\n\nexport function reset(transform) {\n  return set(transform, 1, 0, 0, 1, 0, 0);\n}\n/**\n * Multiply the underlying matrices of two transforms and return the result in\n * the first transform.\n * @param {!Transform} transform1 Transform parameters of matrix 1.\n * @param {!Transform} transform2 Transform parameters of matrix 2.\n * @return {!Transform} transform1 multiplied with transform2.\n */\n\nexport function multiply(transform1, transform2) {\n  const a1 = transform1[0];\n  const b1 = transform1[1];\n  const c1 = transform1[2];\n  const d1 = transform1[3];\n  const e1 = transform1[4];\n  const f1 = transform1[5];\n  const a2 = transform2[0];\n  const b2 = transform2[1];\n  const c2 = transform2[2];\n  const d2 = transform2[3];\n  const e2 = transform2[4];\n  const f2 = transform2[5];\n  transform1[0] = a1 * a2 + c1 * b2;\n  transform1[1] = b1 * a2 + d1 * b2;\n  transform1[2] = a1 * c2 + c1 * d2;\n  transform1[3] = b1 * c2 + d1 * d2;\n  transform1[4] = a1 * e2 + c1 * f2 + e1;\n  transform1[5] = b1 * e2 + d1 * f2 + f1;\n  return transform1;\n}\n/**\n * Set the transform components a-f on a given transform.\n * @param {!Transform} transform Transform.\n * @param {number} a The a component of the transform.\n * @param {number} b The b component of the transform.\n * @param {number} c The c component of the transform.\n * @param {number} d The d component of the transform.\n * @param {number} e The e component of the transform.\n * @param {number} f The f component of the transform.\n * @return {!Transform} Matrix with transform applied.\n */\n\nexport function set(transform, a, b, c, d, e, f) {\n  transform[0] = a;\n  transform[1] = b;\n  transform[2] = c;\n  transform[3] = d;\n  transform[4] = e;\n  transform[5] = f;\n  return transform;\n}\n/**\n * Set transform on one matrix from another matrix.\n * @param {!Transform} transform1 Matrix to set transform to.\n * @param {!Transform} transform2 Matrix to set transform from.\n * @return {!Transform} transform1 with transform from transform2 applied.\n */\n\nexport function setFromArray(transform1, transform2) {\n  transform1[0] = transform2[0];\n  transform1[1] = transform2[1];\n  transform1[2] = transform2[2];\n  transform1[3] = transform2[3];\n  transform1[4] = transform2[4];\n  transform1[5] = transform2[5];\n  return transform1;\n}\n/**\n * Transforms the given coordinate with the given transform returning the\n * resulting, transformed coordinate. The coordinate will be modified in-place.\n *\n * @param {Transform} transform The transformation.\n * @param {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} coordinate The coordinate to transform.\n * @return {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} return coordinate so that operations can be\n *     chained together.\n */\n\nexport function apply(transform, coordinate) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  coordinate[0] = transform[0] * x + transform[2] * y + transform[4];\n  coordinate[1] = transform[1] * x + transform[3] * y + transform[5];\n  return coordinate;\n}\n/**\n * Applies rotation to the given transform.\n * @param {!Transform} transform Transform.\n * @param {number} angle Angle in radians.\n * @return {!Transform} The rotated transform.\n */\n\nexport function rotate(transform, angle) {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));\n}\n/**\n * Applies scale to a given transform.\n * @param {!Transform} transform Transform.\n * @param {number} x Scale factor x.\n * @param {number} y Scale factor y.\n * @return {!Transform} The scaled transform.\n */\n\nexport function scale(transform, x, y) {\n  return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));\n}\n/**\n * Creates a scale transform.\n * @param {!Transform} target Transform to overwrite.\n * @param {number} x Scale factor x.\n * @param {number} y Scale factor y.\n * @return {!Transform} The scale transform.\n */\n\nexport function makeScale(target, x, y) {\n  return set(target, x, 0, 0, y, 0, 0);\n}\n/**\n * Applies translation to the given transform.\n * @param {!Transform} transform Transform.\n * @param {number} dx Translation x.\n * @param {number} dy Translation y.\n * @return {!Transform} The translated transform.\n */\n\nexport function translate(transform, dx, dy) {\n  return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));\n}\n/**\n * Creates a composite transform given an initial translation, scale, rotation, and\n * final translation (in that order only, not commutative).\n * @param {!Transform} transform The transform (will be modified in place).\n * @param {number} dx1 Initial translation x.\n * @param {number} dy1 Initial translation y.\n * @param {number} sx Scale factor x.\n * @param {number} sy Scale factor y.\n * @param {number} angle Rotation (in counter-clockwise radians).\n * @param {number} dx2 Final translation x.\n * @param {number} dy2 Final translation y.\n * @return {!Transform} The composite transform.\n */\n\nexport function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {\n  const sin = Math.sin(angle);\n  const cos = Math.cos(angle);\n  transform[0] = sx * cos;\n  transform[1] = sy * sin;\n  transform[2] = -sx * sin;\n  transform[3] = sy * cos;\n  transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;\n  transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;\n  return transform;\n}\n/**\n * Creates a composite transform given an initial translation, scale, rotation, and\n * final translation (in that order only, not commutative). The resulting transform\n * string can be applied as `transform` property of an HTMLElement's style.\n * @param {number} dx1 Initial translation x.\n * @param {number} dy1 Initial translation y.\n * @param {number} sx Scale factor x.\n * @param {number} sy Scale factor y.\n * @param {number} angle Rotation (in counter-clockwise radians).\n * @param {number} dx2 Final translation x.\n * @param {number} dy2 Final translation y.\n * @return {string} The composite css transform.\n * @api\n */\n\nexport function composeCssTransform(dx1, dy1, sx, sy, angle, dx2, dy2) {\n  return toString(compose(create(), dx1, dy1, sx, sy, angle, dx2, dy2));\n}\n/**\n * Invert the given transform.\n * @param {!Transform} source The source transform to invert.\n * @return {!Transform} The inverted (source) transform.\n */\n\nexport function invert(source) {\n  return makeInverse(source, source);\n}\n/**\n * Invert the given transform.\n * @param {!Transform} target Transform to be set as the inverse of\n *     the source transform.\n * @param {!Transform} source The source transform to invert.\n * @return {!Transform} The inverted (target) transform.\n */\n\nexport function makeInverse(target, source) {\n  const det = determinant(source);\n  assert(det !== 0, 32); // Transformation matrix cannot be inverted\n\n  const a = source[0];\n  const b = source[1];\n  const c = source[2];\n  const d = source[3];\n  const e = source[4];\n  const f = source[5];\n  target[0] = d / det;\n  target[1] = -b / det;\n  target[2] = -c / det;\n  target[3] = a / det;\n  target[4] = (c * f - d * e) / det;\n  target[5] = -(a * f - b * e) / det;\n  return target;\n}\n/**\n * Returns the determinant of the given matrix.\n * @param {!Transform} mat Matrix.\n * @return {number} Determinant.\n */\n\nexport function determinant(mat) {\n  return mat[0] * mat[3] - mat[1] * mat[2];\n}\n/**\n * @type {HTMLElement}\n * @private\n */\n\nlet transformStringDiv;\n/**\n * A rounded string version of the transform.  This can be used\n * for CSS transforms.\n * @param {!Transform} mat Matrix.\n * @return {string} The transform as a string.\n */\n\nexport function toString(mat) {\n  const transformString = 'matrix(' + mat.join(', ') + ')';\n\n  if (WORKER_OFFSCREEN_CANVAS) {\n    return transformString;\n  }\n\n  const node = transformStringDiv || (transformStringDiv = document.createElement('div'));\n  node.style.transform = transformString;\n  return node.style.transform;\n}","map":{"version":3,"names":["WORKER_OFFSCREEN_CANVAS","assert","tmp_","Array","create","reset","transform","set","multiply","transform1","transform2","a1","b1","c1","d1","e1","f1","a2","b2","c2","d2","e2","f2","a","b","c","d","e","f","setFromArray","apply","coordinate","x","y","rotate","angle","cos","Math","sin","scale","makeScale","target","translate","dx","dy","compose","dx1","dy1","sx","sy","dx2","dy2","composeCssTransform","toString","invert","source","makeInverse","det","determinant","mat","transformStringDiv","transformString","join","node","document","createElement","style"],"sources":["D:/Work/Learning/demo/node_modules/ol/transform.js"],"sourcesContent":["/**\n * @module ol/transform\n */\nimport {WORKER_OFFSCREEN_CANVAS} from './has.js';\nimport {assert} from './asserts.js';\n\n/**\n * An array representing an affine 2d transformation for use with\n * {@link module:ol/transform} functions. The array has 6 elements.\n * @typedef {!Array<number>} Transform\n * @api\n */\n\n/**\n * Collection of affine 2d transformation functions. The functions work on an\n * array of 6 elements. The element order is compatible with the [SVGMatrix\n * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is\n * a subset (elements a to f) of a 3Ã—3 matrix:\n * ```\n * [ a c e ]\n * [ b d f ]\n * [ 0 0 1 ]\n * ```\n */\n\n/**\n * @private\n * @type {Transform}\n */\nconst tmp_ = new Array(6);\n\n/**\n * Create an identity transform.\n * @return {!Transform} Identity transform.\n */\nexport function create() {\n  return [1, 0, 0, 1, 0, 0];\n}\n\n/**\n * Resets the given transform to an identity transform.\n * @param {!Transform} transform Transform.\n * @return {!Transform} Transform.\n */\nexport function reset(transform) {\n  return set(transform, 1, 0, 0, 1, 0, 0);\n}\n\n/**\n * Multiply the underlying matrices of two transforms and return the result in\n * the first transform.\n * @param {!Transform} transform1 Transform parameters of matrix 1.\n * @param {!Transform} transform2 Transform parameters of matrix 2.\n * @return {!Transform} transform1 multiplied with transform2.\n */\nexport function multiply(transform1, transform2) {\n  const a1 = transform1[0];\n  const b1 = transform1[1];\n  const c1 = transform1[2];\n  const d1 = transform1[3];\n  const e1 = transform1[4];\n  const f1 = transform1[5];\n  const a2 = transform2[0];\n  const b2 = transform2[1];\n  const c2 = transform2[2];\n  const d2 = transform2[3];\n  const e2 = transform2[4];\n  const f2 = transform2[5];\n\n  transform1[0] = a1 * a2 + c1 * b2;\n  transform1[1] = b1 * a2 + d1 * b2;\n  transform1[2] = a1 * c2 + c1 * d2;\n  transform1[3] = b1 * c2 + d1 * d2;\n  transform1[4] = a1 * e2 + c1 * f2 + e1;\n  transform1[5] = b1 * e2 + d1 * f2 + f1;\n\n  return transform1;\n}\n\n/**\n * Set the transform components a-f on a given transform.\n * @param {!Transform} transform Transform.\n * @param {number} a The a component of the transform.\n * @param {number} b The b component of the transform.\n * @param {number} c The c component of the transform.\n * @param {number} d The d component of the transform.\n * @param {number} e The e component of the transform.\n * @param {number} f The f component of the transform.\n * @return {!Transform} Matrix with transform applied.\n */\nexport function set(transform, a, b, c, d, e, f) {\n  transform[0] = a;\n  transform[1] = b;\n  transform[2] = c;\n  transform[3] = d;\n  transform[4] = e;\n  transform[5] = f;\n  return transform;\n}\n\n/**\n * Set transform on one matrix from another matrix.\n * @param {!Transform} transform1 Matrix to set transform to.\n * @param {!Transform} transform2 Matrix to set transform from.\n * @return {!Transform} transform1 with transform from transform2 applied.\n */\nexport function setFromArray(transform1, transform2) {\n  transform1[0] = transform2[0];\n  transform1[1] = transform2[1];\n  transform1[2] = transform2[2];\n  transform1[3] = transform2[3];\n  transform1[4] = transform2[4];\n  transform1[5] = transform2[5];\n  return transform1;\n}\n\n/**\n * Transforms the given coordinate with the given transform returning the\n * resulting, transformed coordinate. The coordinate will be modified in-place.\n *\n * @param {Transform} transform The transformation.\n * @param {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} coordinate The coordinate to transform.\n * @return {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} return coordinate so that operations can be\n *     chained together.\n */\nexport function apply(transform, coordinate) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  coordinate[0] = transform[0] * x + transform[2] * y + transform[4];\n  coordinate[1] = transform[1] * x + transform[3] * y + transform[5];\n  return coordinate;\n}\n\n/**\n * Applies rotation to the given transform.\n * @param {!Transform} transform Transform.\n * @param {number} angle Angle in radians.\n * @return {!Transform} The rotated transform.\n */\nexport function rotate(transform, angle) {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));\n}\n\n/**\n * Applies scale to a given transform.\n * @param {!Transform} transform Transform.\n * @param {number} x Scale factor x.\n * @param {number} y Scale factor y.\n * @return {!Transform} The scaled transform.\n */\nexport function scale(transform, x, y) {\n  return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));\n}\n\n/**\n * Creates a scale transform.\n * @param {!Transform} target Transform to overwrite.\n * @param {number} x Scale factor x.\n * @param {number} y Scale factor y.\n * @return {!Transform} The scale transform.\n */\nexport function makeScale(target, x, y) {\n  return set(target, x, 0, 0, y, 0, 0);\n}\n\n/**\n * Applies translation to the given transform.\n * @param {!Transform} transform Transform.\n * @param {number} dx Translation x.\n * @param {number} dy Translation y.\n * @return {!Transform} The translated transform.\n */\nexport function translate(transform, dx, dy) {\n  return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));\n}\n\n/**\n * Creates a composite transform given an initial translation, scale, rotation, and\n * final translation (in that order only, not commutative).\n * @param {!Transform} transform The transform (will be modified in place).\n * @param {number} dx1 Initial translation x.\n * @param {number} dy1 Initial translation y.\n * @param {number} sx Scale factor x.\n * @param {number} sy Scale factor y.\n * @param {number} angle Rotation (in counter-clockwise radians).\n * @param {number} dx2 Final translation x.\n * @param {number} dy2 Final translation y.\n * @return {!Transform} The composite transform.\n */\nexport function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {\n  const sin = Math.sin(angle);\n  const cos = Math.cos(angle);\n  transform[0] = sx * cos;\n  transform[1] = sy * sin;\n  transform[2] = -sx * sin;\n  transform[3] = sy * cos;\n  transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;\n  transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;\n  return transform;\n}\n\n/**\n * Creates a composite transform given an initial translation, scale, rotation, and\n * final translation (in that order only, not commutative). The resulting transform\n * string can be applied as `transform` property of an HTMLElement's style.\n * @param {number} dx1 Initial translation x.\n * @param {number} dy1 Initial translation y.\n * @param {number} sx Scale factor x.\n * @param {number} sy Scale factor y.\n * @param {number} angle Rotation (in counter-clockwise radians).\n * @param {number} dx2 Final translation x.\n * @param {number} dy2 Final translation y.\n * @return {string} The composite css transform.\n * @api\n */\nexport function composeCssTransform(dx1, dy1, sx, sy, angle, dx2, dy2) {\n  return toString(compose(create(), dx1, dy1, sx, sy, angle, dx2, dy2));\n}\n\n/**\n * Invert the given transform.\n * @param {!Transform} source The source transform to invert.\n * @return {!Transform} The inverted (source) transform.\n */\nexport function invert(source) {\n  return makeInverse(source, source);\n}\n\n/**\n * Invert the given transform.\n * @param {!Transform} target Transform to be set as the inverse of\n *     the source transform.\n * @param {!Transform} source The source transform to invert.\n * @return {!Transform} The inverted (target) transform.\n */\nexport function makeInverse(target, source) {\n  const det = determinant(source);\n  assert(det !== 0, 32); // Transformation matrix cannot be inverted\n\n  const a = source[0];\n  const b = source[1];\n  const c = source[2];\n  const d = source[3];\n  const e = source[4];\n  const f = source[5];\n\n  target[0] = d / det;\n  target[1] = -b / det;\n  target[2] = -c / det;\n  target[3] = a / det;\n  target[4] = (c * f - d * e) / det;\n  target[5] = -(a * f - b * e) / det;\n\n  return target;\n}\n\n/**\n * Returns the determinant of the given matrix.\n * @param {!Transform} mat Matrix.\n * @return {number} Determinant.\n */\nexport function determinant(mat) {\n  return mat[0] * mat[3] - mat[1] * mat[2];\n}\n\n/**\n * @type {HTMLElement}\n * @private\n */\nlet transformStringDiv;\n\n/**\n * A rounded string version of the transform.  This can be used\n * for CSS transforms.\n * @param {!Transform} mat Matrix.\n * @return {string} The transform as a string.\n */\nexport function toString(mat) {\n  const transformString = 'matrix(' + mat.join(', ') + ')';\n  if (WORKER_OFFSCREEN_CANVAS) {\n    return transformString;\n  }\n  const node =\n    transformStringDiv || (transformStringDiv = document.createElement('div'));\n  node.style.transform = transformString;\n  return node.style.transform;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}