{"ast":null,"code":"/**\n * @module ol/functions\n */\nimport { equals as arrayEquals } from './array.js';\n/**\n * Always returns true.\n * @return {boolean} true.\n */\n\nexport function TRUE() {\n  return true;\n}\n/**\n * Always returns false.\n * @return {boolean} false.\n */\n\nexport function FALSE() {\n  return false;\n}\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\n\nexport function VOID() {}\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\n\nexport function memoizeOne(fn) {\n  let called = false;\n  /** @type {ReturnType} */\n\n  let lastResult;\n  /** @type {Array<any>} */\n\n  let lastArgs;\n  let lastThis;\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n\n    return lastResult;\n  };\n}\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\n\nexport function toPromise(getter) {\n  function promiseGetter() {\n    let value;\n\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    if (value instanceof Promise) {\n      return value;\n    }\n\n    return Promise.resolve(value);\n  }\n\n  return promiseGetter();\n}","map":{"version":3,"names":["equals","arrayEquals","TRUE","FALSE","VOID","memoizeOne","fn","called","lastResult","lastArgs","lastThis","nextArgs","Array","prototype","slice","call","arguments","apply","toPromise","getter","promiseGetter","value","err","Promise","reject","resolve"],"sources":["D:/Work/Learning/demo/node_modules/ol/functions.js"],"sourcesContent":["/**\n * @module ol/functions\n */\n\nimport {equals as arrayEquals} from './array.js';\n\n/**\n * Always returns true.\n * @return {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n\n/**\n * Always returns false.\n * @return {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n  let called = false;\n\n  /** @type {ReturnType} */\n  let lastResult;\n\n  /** @type {Array<any>} */\n  let lastArgs;\n\n  let lastThis;\n\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}\n\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\nexport function toPromise(getter) {\n  function promiseGetter() {\n    let value;\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    if (value instanceof Promise) {\n      return value;\n    }\n    return Promise.resolve(value);\n  }\n  return promiseGetter();\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,MAAM,IAAIC,WAAlB,QAAoC,YAApC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,GAAgB;EACrB,OAAO,IAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,GAAiB;EACtB,OAAO,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,GAAgB,CAAE;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,EAApB,EAAwB;EAC7B,IAAIC,MAAM,GAAG,KAAb;EAEA;;EACA,IAAIC,UAAJ;EAEA;;EACA,IAAIC,QAAJ;EAEA,IAAIC,QAAJ;EAEA,OAAO,YAAY;IACjB,MAAMC,QAAQ,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAjB;;IACA,IAAI,CAACT,MAAD,IAAW,SAASG,QAApB,IAAgC,CAACT,WAAW,CAACU,QAAD,EAAWF,QAAX,CAAhD,EAAsE;MACpEF,MAAM,GAAG,IAAT;MACAG,QAAQ,GAAG,IAAX;MACAD,QAAQ,GAAGE,QAAX;MACAH,UAAU,GAAGF,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeD,SAAf,CAAb;IACD;;IACD,OAAOR,UAAP;EACD,CATD;AAUD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASU,SAAT,CAAmBC,MAAnB,EAA2B;EAChC,SAASC,aAAT,GAAyB;IACvB,IAAIC,KAAJ;;IACA,IAAI;MACFA,KAAK,GAAGF,MAAM,EAAd;IACD,CAFD,CAEE,OAAOG,GAAP,EAAY;MACZ,OAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;IACD;;IACD,IAAID,KAAK,YAAYE,OAArB,EAA8B;MAC5B,OAAOF,KAAP;IACD;;IACD,OAAOE,OAAO,CAACE,OAAR,CAAgBJ,KAAhB,CAAP;EACD;;EACD,OAAOD,aAAa,EAApB;AACD"},"metadata":{},"sourceType":"module"}