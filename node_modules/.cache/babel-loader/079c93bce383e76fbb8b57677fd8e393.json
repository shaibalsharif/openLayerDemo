{"ast":null,"code":"/**\n * @module ol/control/ScaleLine\n */\nimport Control from './Control.js';\nimport { CLASS_UNSELECTABLE } from '../css.js';\nimport { METERS_PER_UNIT, getPointResolution } from '../proj.js';\nimport { assert } from '../asserts.js';\n/**\n * @type {string}\n */\n\nconst UNITS_PROP = 'units';\n/**\n * @typedef {'degrees' | 'imperial' | 'nautical' | 'metric' | 'us'} Units\n * Units for the scale line.\n */\n\n/**\n * @const\n * @type {Array<number>}\n */\n\nconst LEADING_DIGITS = [1, 2, 5];\n/**\n * @const\n * @type {number}\n */\n\nconst DEFAULT_DPI = 25.4 / 0.28;\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:units', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |'change:units', Return>} ScaleLineOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className] CSS class name. The default is `ol-scale-bar` when configured with\n * `bar: true`. Otherwise the default is `ol-scale-line`.\n * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {number} [maxWidth] Maximum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {Units} [units='metric'] Units.\n * @property {boolean} [bar=false] Render scalebars instead of a line.\n * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers\n * for best results. Only applies when `bar` is `true`.\n * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies\n * when `bar` is `true`.\n * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies\n * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.\n */\n\n/**\n * @classdesc\n * A control displaying rough y-axis distances, calculated for the center of the\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\n * projection in OpenLayers), the scale is valid for all directions.\n * No scale line will be shown when the y-axis distance of a pixel at the\n * viewport center cannot be calculated in the view projection.\n * By default the scale line will show in the bottom left portion of the map,\n * but this can be changed by using the css selector `.ol-scale-line`.\n * When specifying `bar` as `true`, a scalebar will be rendered instead\n * of a scaleline.\n *\n * @api\n */\n\nclass ScaleLine extends Control {\n  /**\n   * @param {Options} [options] Scale line options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const element = document.createElement('div');\n    element.style.pointerEvents = 'none';\n    super({\n      element: element,\n      render: options.render,\n      target: options.target\n    });\n    /***\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {ScaleLineOnSignature<void>}\n     */\n\n    this.un;\n    const className = options.className !== undefined ? options.className : options.bar ? 'ol-scale-bar' : 'ol-scale-line';\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    this.innerElement_ = document.createElement('div');\n    this.innerElement_.className = className + '-inner';\n    this.element.className = className + ' ' + CLASS_UNSELECTABLE;\n    this.element.appendChild(this.innerElement_);\n    /**\n     * @private\n     * @type {?import(\"../View.js\").State}\n     */\n\n    this.viewState_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.maxWidth_ = options.maxWidth;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.renderedVisible_ = false;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.renderedWidth_ = undefined;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.renderedHTML_ = '';\n    this.addChangeListener(UNITS_PROP, this.handleUnitsChanged_);\n    this.setUnits(options.units || 'metric');\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.scaleBar_ = options.bar || false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.scaleBarSteps_ = options.steps || 4;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.scaleBarText_ = options.text || false;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.dpi_ = options.dpi || undefined;\n  }\n  /**\n   * Return the units to use in the scale line.\n   * @return {Units} The units\n   * to use in the scale line.\n   * @observable\n   * @api\n   */\n\n\n  getUnits() {\n    return this.get(UNITS_PROP);\n  }\n  /**\n   * @private\n   */\n\n\n  handleUnitsChanged_() {\n    this.updateElement_();\n  }\n  /**\n   * Set the units to use in the scale line.\n   * @param {Units} units The units to use in the scale line.\n   * @observable\n   * @api\n   */\n\n\n  setUnits(units) {\n    this.set(UNITS_PROP, units);\n  }\n  /**\n   * Specify the dpi of output device such as printer.\n   * @param {number|undefined} dpi The dpi of output device.\n   * @api\n   */\n\n\n  setDpi(dpi) {\n    this.dpi_ = dpi;\n  }\n  /**\n   * @private\n   */\n\n\n  updateElement_() {\n    const viewState = this.viewState_;\n\n    if (!viewState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n\n      return;\n    }\n\n    const center = viewState.center;\n    const projection = viewState.projection;\n    const units = this.getUnits();\n    const pointResolutionUnits = units == 'degrees' ? 'degrees' : 'm';\n    let pointResolution = getPointResolution(projection, viewState.resolution, center, pointResolutionUnits);\n    const minWidth = this.minWidth_ * (this.dpi_ || DEFAULT_DPI) / DEFAULT_DPI;\n    const maxWidth = this.maxWidth_ !== undefined ? this.maxWidth_ * (this.dpi_ || DEFAULT_DPI) / DEFAULT_DPI : undefined;\n    let nominalCount = minWidth * pointResolution;\n    let suffix = '';\n\n    if (units == 'degrees') {\n      const metersPerDegree = METERS_PER_UNIT.degrees;\n      nominalCount *= metersPerDegree;\n\n      if (nominalCount < metersPerDegree / 60) {\n        suffix = '\\u2033'; // seconds\n\n        pointResolution *= 3600;\n      } else if (nominalCount < metersPerDegree) {\n        suffix = '\\u2032'; // minutes\n\n        pointResolution *= 60;\n      } else {\n        suffix = '\\u00b0'; // degrees\n      }\n    } else if (units == 'imperial') {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution /= 0.0254;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.3048;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.344;\n      }\n    } else if (units == 'nautical') {\n      pointResolution /= 1852;\n      suffix = 'NM';\n    } else if (units == 'metric') {\n      if (nominalCount < 0.001) {\n        suffix = 'Î¼m';\n        pointResolution *= 1000000;\n      } else if (nominalCount < 1) {\n        suffix = 'mm';\n        pointResolution *= 1000;\n      } else if (nominalCount < 1000) {\n        suffix = 'm';\n      } else {\n        suffix = 'km';\n        pointResolution /= 1000;\n      }\n    } else if (units == 'us') {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution *= 39.37;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.30480061;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.3472;\n      }\n    } else {\n      assert(false, 33); // Invalid units\n    }\n\n    let i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));\n    let count, width, decimalCount;\n    let previousCount, previousWidth, previousDecimalCount;\n\n    while (true) {\n      decimalCount = Math.floor(i / 3);\n      const decimal = Math.pow(10, decimalCount);\n      count = LEADING_DIGITS[(i % 3 + 3) % 3] * decimal;\n      width = Math.round(count / pointResolution);\n\n      if (isNaN(width)) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n        return;\n      }\n\n      if (maxWidth !== undefined && width >= maxWidth) {\n        count = previousCount;\n        width = previousWidth;\n        decimalCount = previousDecimalCount;\n        break;\n      } else if (width >= minWidth) {\n        break;\n      }\n\n      previousCount = count;\n      previousWidth = width;\n      previousDecimalCount = decimalCount;\n      ++i;\n    }\n\n    const html = this.scaleBar_ ? this.createScaleBar(width, count, suffix) : count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;\n\n    if (this.renderedHTML_ != html) {\n      this.innerElement_.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n\n    if (this.renderedWidth_ != width) {\n      this.innerElement_.style.width = width + 'px';\n      this.renderedWidth_ = width;\n    }\n\n    if (!this.renderedVisible_) {\n      this.element.style.display = '';\n      this.renderedVisible_ = true;\n    }\n  }\n  /**\n   * @private\n   * @param {number} width The current width of the scalebar.\n   * @param {number} scale The current scale.\n   * @param {string} suffix The suffix to append to the scale text.\n   * @return {string} The stringified HTML of the scalebar.\n   */\n\n\n  createScaleBar(width, scale, suffix) {\n    const resolutionScale = this.getScaleForResolution();\n    const mapScale = resolutionScale < 1 ? Math.round(1 / resolutionScale).toLocaleString() + ' : 1' : '1 : ' + Math.round(resolutionScale).toLocaleString();\n    const steps = this.scaleBarSteps_;\n    const stepWidth = width / steps;\n    const scaleSteps = [this.createMarker('absolute')];\n\n    for (let i = 0; i < steps; ++i) {\n      const cls = i % 2 === 0 ? 'ol-scale-singlebar-odd' : 'ol-scale-singlebar-even';\n      scaleSteps.push('<div>' + '<div ' + `class=\"ol-scale-singlebar ${cls}\" ` + `style=\"width: ${stepWidth}px;\"` + '>' + '</div>' + this.createMarker('relative') + ( // render text every second step, except when only 2 steps\n      i % 2 === 0 || steps === 2 ? this.createStepText(i, width, false, scale, suffix) : '') + '</div>');\n    } // render text at the end\n\n\n    scaleSteps.push(this.createStepText(steps, width, true, scale, suffix));\n    const scaleBarText = this.scaleBarText_ ? `<div class=\"ol-scale-text\" style=\"width: ${width}px;\">` + mapScale + '</div>' : '';\n    return scaleBarText + scaleSteps.join('');\n  }\n  /**\n   * Creates a marker at given position\n   * @param {'absolute'|'relative'} position The position, absolute or relative\n   * @return {string} The stringified div containing the marker\n   */\n\n\n  createMarker(position) {\n    const top = position === 'absolute' ? 3 : -10;\n    return '<div ' + 'class=\"ol-scale-step-marker\" ' + `style=\"position: ${position}; top: ${top}px;\"` + '></div>';\n  }\n  /**\n   * Creates the label for a marker marker at given position\n   * @param {number} i The iterator\n   * @param {number} width The width the scalebar will currently use\n   * @param {boolean} isLast Flag indicating if we add the last step text\n   * @param {number} scale The current scale for the whole scalebar\n   * @param {string} suffix The suffix for the scale\n   * @return {string} The stringified div containing the step text\n   */\n\n\n  createStepText(i, width, isLast, scale, suffix) {\n    const length = i === 0 ? 0 : Math.round(scale / this.scaleBarSteps_ * i * 100) / 100;\n    const lengthString = length + (i === 0 ? '' : ' ' + suffix);\n    const margin = i === 0 ? -3 : width / this.scaleBarSteps_ * -1;\n    const minWidth = i === 0 ? 0 : width / this.scaleBarSteps_ * 2;\n    return '<div ' + 'class=\"ol-scale-step-text\" ' + 'style=\"' + `margin-left: ${margin}px;` + `text-align: ${i === 0 ? 'left' : 'center'};` + `min-width: ${minWidth}px;` + `left: ${isLast ? width + 'px' : 'unset'};` + '\">' + lengthString + '</div>';\n  }\n  /**\n   * Returns the appropriate scale for the given resolution and units.\n   * @return {number} The appropriate scale.\n   */\n\n\n  getScaleForResolution() {\n    const resolution = getPointResolution(this.viewState_.projection, this.viewState_.resolution, this.viewState_.center, 'm');\n    const dpi = this.dpi_ || DEFAULT_DPI;\n    const inchesPerMeter = 1000 / 25.4;\n    return resolution * inchesPerMeter * dpi;\n  }\n  /**\n   * Update the scale line element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n\n\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n\n    if (!frameState) {\n      this.viewState_ = null;\n    } else {\n      this.viewState_ = frameState.viewState;\n    }\n\n    this.updateElement_();\n  }\n\n}\n\nexport default ScaleLine;","map":{"version":3,"names":["Control","CLASS_UNSELECTABLE","METERS_PER_UNIT","getPointResolution","assert","UNITS_PROP","LEADING_DIGITS","DEFAULT_DPI","ScaleLine","constructor","options","element","document","createElement","style","pointerEvents","render","target","on","once","un","className","undefined","bar","innerElement_","appendChild","viewState_","minWidth_","minWidth","maxWidth_","maxWidth","renderedVisible_","renderedWidth_","renderedHTML_","addChangeListener","handleUnitsChanged_","setUnits","units","scaleBar_","scaleBarSteps_","steps","scaleBarText_","text","dpi_","dpi","getUnits","get","updateElement_","set","setDpi","viewState","display","center","projection","pointResolutionUnits","pointResolution","resolution","nominalCount","suffix","metersPerDegree","degrees","i","Math","floor","log","count","width","decimalCount","previousCount","previousWidth","previousDecimalCount","decimal","pow","round","isNaN","html","createScaleBar","toFixed","innerHTML","scale","resolutionScale","getScaleForResolution","mapScale","toLocaleString","stepWidth","scaleSteps","createMarker","cls","push","createStepText","scaleBarText","join","position","top","isLast","length","lengthString","margin","inchesPerMeter","mapEvent","frameState"],"sources":["D:/Work/Learning/demo/node_modules/ol/control/ScaleLine.js"],"sourcesContent":["/**\n * @module ol/control/ScaleLine\n */\nimport Control from './Control.js';\nimport {CLASS_UNSELECTABLE} from '../css.js';\nimport {METERS_PER_UNIT, getPointResolution} from '../proj.js';\nimport {assert} from '../asserts.js';\n\n/**\n * @type {string}\n */\nconst UNITS_PROP = 'units';\n\n/**\n * @typedef {'degrees' | 'imperial' | 'nautical' | 'metric' | 'us'} Units\n * Units for the scale line.\n */\n\n/**\n * @const\n * @type {Array<number>}\n */\nconst LEADING_DIGITS = [1, 2, 5];\n\n/**\n * @const\n * @type {number}\n */\nconst DEFAULT_DPI = 25.4 / 0.28;\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:units', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |'change:units', Return>} ScaleLineOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className] CSS class name. The default is `ol-scale-bar` when configured with\n * `bar: true`. Otherwise the default is `ol-scale-line`.\n * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {number} [maxWidth] Maximum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {Units} [units='metric'] Units.\n * @property {boolean} [bar=false] Render scalebars instead of a line.\n * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers\n * for best results. Only applies when `bar` is `true`.\n * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies\n * when `bar` is `true`.\n * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies\n * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.\n */\n\n/**\n * @classdesc\n * A control displaying rough y-axis distances, calculated for the center of the\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\n * projection in OpenLayers), the scale is valid for all directions.\n * No scale line will be shown when the y-axis distance of a pixel at the\n * viewport center cannot be calculated in the view projection.\n * By default the scale line will show in the bottom left portion of the map,\n * but this can be changed by using the css selector `.ol-scale-line`.\n * When specifying `bar` as `true`, a scalebar will be rendered instead\n * of a scaleline.\n *\n * @api\n */\nclass ScaleLine extends Control {\n  /**\n   * @param {Options} [options] Scale line options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const element = document.createElement('div');\n    element.style.pointerEvents = 'none';\n\n    super({\n      element: element,\n      render: options.render,\n      target: options.target,\n    });\n\n    /***\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ScaleLineOnSignature<void>}\n     */\n    this.un;\n\n    const className =\n      options.className !== undefined\n        ? options.className\n        : options.bar\n        ? 'ol-scale-bar'\n        : 'ol-scale-line';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.innerElement_ = document.createElement('div');\n    this.innerElement_.className = className + '-inner';\n\n    this.element.className = className + ' ' + CLASS_UNSELECTABLE;\n    this.element.appendChild(this.innerElement_);\n\n    /**\n     * @private\n     * @type {?import(\"../View.js\").State}\n     */\n    this.viewState_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.maxWidth_ = options.maxWidth;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderedWidth_ = undefined;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = '';\n\n    this.addChangeListener(UNITS_PROP, this.handleUnitsChanged_);\n\n    this.setUnits(options.units || 'metric');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.scaleBar_ = options.bar || false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.scaleBarSteps_ = options.steps || 4;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.scaleBarText_ = options.text || false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.dpi_ = options.dpi || undefined;\n  }\n\n  /**\n   * Return the units to use in the scale line.\n   * @return {Units} The units\n   * to use in the scale line.\n   * @observable\n   * @api\n   */\n  getUnits() {\n    return this.get(UNITS_PROP);\n  }\n\n  /**\n   * @private\n   */\n  handleUnitsChanged_() {\n    this.updateElement_();\n  }\n\n  /**\n   * Set the units to use in the scale line.\n   * @param {Units} units The units to use in the scale line.\n   * @observable\n   * @api\n   */\n  setUnits(units) {\n    this.set(UNITS_PROP, units);\n  }\n\n  /**\n   * Specify the dpi of output device such as printer.\n   * @param {number|undefined} dpi The dpi of output device.\n   * @api\n   */\n  setDpi(dpi) {\n    this.dpi_ = dpi;\n  }\n\n  /**\n   * @private\n   */\n  updateElement_() {\n    const viewState = this.viewState_;\n\n    if (!viewState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const center = viewState.center;\n    const projection = viewState.projection;\n    const units = this.getUnits();\n    const pointResolutionUnits = units == 'degrees' ? 'degrees' : 'm';\n    let pointResolution = getPointResolution(\n      projection,\n      viewState.resolution,\n      center,\n      pointResolutionUnits\n    );\n\n    const minWidth =\n      (this.minWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI;\n\n    const maxWidth =\n      this.maxWidth_ !== undefined\n        ? (this.maxWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI\n        : undefined;\n\n    let nominalCount = minWidth * pointResolution;\n    let suffix = '';\n    if (units == 'degrees') {\n      const metersPerDegree = METERS_PER_UNIT.degrees;\n      nominalCount *= metersPerDegree;\n      if (nominalCount < metersPerDegree / 60) {\n        suffix = '\\u2033'; // seconds\n        pointResolution *= 3600;\n      } else if (nominalCount < metersPerDegree) {\n        suffix = '\\u2032'; // minutes\n        pointResolution *= 60;\n      } else {\n        suffix = '\\u00b0'; // degrees\n      }\n    } else if (units == 'imperial') {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution /= 0.0254;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.3048;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.344;\n      }\n    } else if (units == 'nautical') {\n      pointResolution /= 1852;\n      suffix = 'NM';\n    } else if (units == 'metric') {\n      if (nominalCount < 0.001) {\n        suffix = 'Î¼m';\n        pointResolution *= 1000000;\n      } else if (nominalCount < 1) {\n        suffix = 'mm';\n        pointResolution *= 1000;\n      } else if (nominalCount < 1000) {\n        suffix = 'm';\n      } else {\n        suffix = 'km';\n        pointResolution /= 1000;\n      }\n    } else if (units == 'us') {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution *= 39.37;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.30480061;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.3472;\n      }\n    } else {\n      assert(false, 33); // Invalid units\n    }\n\n    let i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));\n    let count, width, decimalCount;\n    let previousCount, previousWidth, previousDecimalCount;\n    while (true) {\n      decimalCount = Math.floor(i / 3);\n      const decimal = Math.pow(10, decimalCount);\n      count = LEADING_DIGITS[((i % 3) + 3) % 3] * decimal;\n      width = Math.round(count / pointResolution);\n      if (isNaN(width)) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n        return;\n      }\n      if (maxWidth !== undefined && width >= maxWidth) {\n        count = previousCount;\n        width = previousWidth;\n        decimalCount = previousDecimalCount;\n        break;\n      } else if (width >= minWidth) {\n        break;\n      }\n      previousCount = count;\n      previousWidth = width;\n      previousDecimalCount = decimalCount;\n      ++i;\n    }\n    const html = this.scaleBar_\n      ? this.createScaleBar(width, count, suffix)\n      : count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;\n\n    if (this.renderedHTML_ != html) {\n      this.innerElement_.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n\n    if (this.renderedWidth_ != width) {\n      this.innerElement_.style.width = width + 'px';\n      this.renderedWidth_ = width;\n    }\n\n    if (!this.renderedVisible_) {\n      this.element.style.display = '';\n      this.renderedVisible_ = true;\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} width The current width of the scalebar.\n   * @param {number} scale The current scale.\n   * @param {string} suffix The suffix to append to the scale text.\n   * @return {string} The stringified HTML of the scalebar.\n   */\n  createScaleBar(width, scale, suffix) {\n    const resolutionScale = this.getScaleForResolution();\n    const mapScale =\n      resolutionScale < 1\n        ? Math.round(1 / resolutionScale).toLocaleString() + ' : 1'\n        : '1 : ' + Math.round(resolutionScale).toLocaleString();\n    const steps = this.scaleBarSteps_;\n    const stepWidth = width / steps;\n    const scaleSteps = [this.createMarker('absolute')];\n    for (let i = 0; i < steps; ++i) {\n      const cls =\n        i % 2 === 0 ? 'ol-scale-singlebar-odd' : 'ol-scale-singlebar-even';\n      scaleSteps.push(\n        '<div>' +\n          '<div ' +\n          `class=\"ol-scale-singlebar ${cls}\" ` +\n          `style=\"width: ${stepWidth}px;\"` +\n          '>' +\n          '</div>' +\n          this.createMarker('relative') +\n          // render text every second step, except when only 2 steps\n          (i % 2 === 0 || steps === 2\n            ? this.createStepText(i, width, false, scale, suffix)\n            : '') +\n          '</div>'\n      );\n    }\n    // render text at the end\n    scaleSteps.push(this.createStepText(steps, width, true, scale, suffix));\n\n    const scaleBarText = this.scaleBarText_\n      ? `<div class=\"ol-scale-text\" style=\"width: ${width}px;\">` +\n        mapScale +\n        '</div>'\n      : '';\n    return scaleBarText + scaleSteps.join('');\n  }\n\n  /**\n   * Creates a marker at given position\n   * @param {'absolute'|'relative'} position The position, absolute or relative\n   * @return {string} The stringified div containing the marker\n   */\n  createMarker(position) {\n    const top = position === 'absolute' ? 3 : -10;\n    return (\n      '<div ' +\n      'class=\"ol-scale-step-marker\" ' +\n      `style=\"position: ${position}; top: ${top}px;\"` +\n      '></div>'\n    );\n  }\n\n  /**\n   * Creates the label for a marker marker at given position\n   * @param {number} i The iterator\n   * @param {number} width The width the scalebar will currently use\n   * @param {boolean} isLast Flag indicating if we add the last step text\n   * @param {number} scale The current scale for the whole scalebar\n   * @param {string} suffix The suffix for the scale\n   * @return {string} The stringified div containing the step text\n   */\n  createStepText(i, width, isLast, scale, suffix) {\n    const length =\n      i === 0 ? 0 : Math.round((scale / this.scaleBarSteps_) * i * 100) / 100;\n    const lengthString = length + (i === 0 ? '' : ' ' + suffix);\n    const margin = i === 0 ? -3 : (width / this.scaleBarSteps_) * -1;\n    const minWidth = i === 0 ? 0 : (width / this.scaleBarSteps_) * 2;\n    return (\n      '<div ' +\n      'class=\"ol-scale-step-text\" ' +\n      'style=\"' +\n      `margin-left: ${margin}px;` +\n      `text-align: ${i === 0 ? 'left' : 'center'};` +\n      `min-width: ${minWidth}px;` +\n      `left: ${isLast ? width + 'px' : 'unset'};` +\n      '\">' +\n      lengthString +\n      '</div>'\n    );\n  }\n\n  /**\n   * Returns the appropriate scale for the given resolution and units.\n   * @return {number} The appropriate scale.\n   */\n  getScaleForResolution() {\n    const resolution = getPointResolution(\n      this.viewState_.projection,\n      this.viewState_.resolution,\n      this.viewState_.center,\n      'm'\n    );\n    const dpi = this.dpi_ || DEFAULT_DPI;\n    const inchesPerMeter = 1000 / 25.4;\n    return resolution * inchesPerMeter * dpi;\n  }\n\n  /**\n   * Update the scale line element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.viewState_ = null;\n    } else {\n      this.viewState_ = frameState.viewState;\n    }\n    this.updateElement_();\n  }\n}\n\nexport default ScaleLine;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}