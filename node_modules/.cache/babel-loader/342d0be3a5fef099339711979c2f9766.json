{"ast":null,"code":"/**\n * @module ol/geom/Polygon\n */\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { arrayMaxSquaredDelta, assignClosestArrayPoint } from './flat/closest.js';\nimport { closestSquaredDistanceXY, getCenter } from '../extent.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointOfArray } from './flat/interiorpoint.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { intersectsLinearRingArray } from './flat/intersectsextent.js';\nimport { linearRingsAreOriented, orientLinearRings } from './flat/orient.js';\nimport { linearRings as linearRingsArea } from './flat/area.js';\nimport { linearRingsContainsXY } from './flat/contains.js';\nimport { modulo } from '../math.js';\nimport { quantizeArray } from './flat/simplify.js';\nimport { offset as sphereOffset } from '../sphere.js';\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\n\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n\n    this.ends_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.flatInteriorPointRevision_ = -1;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n\n    this.flatInteriorPoint_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDeltaRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.orientedRevision_ = -1;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.orientedFlatCoordinates_ = null;\n\n    if (layout !== undefined && ends) {\n      this.setFlatCoordinates(layout,\n      /** @type {Array<number>} */\n      coordinates);\n      this.ends_ = ends;\n    } else {\n      this.setCoordinates(\n      /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */\n      coordinates, layout);\n    }\n  }\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n\n\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n\n\n  clone() {\n    const polygon = new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n    polygon.applyProperties(this);\n    return polygon;\n  }\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  }\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n\n\n  containsXY(x, y) {\n    return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n  }\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n\n\n  getArea() {\n    return linearRingsArea(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n  }\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n\n\n  getCoordinates(right) {\n    let flatCoordinates;\n\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n  /**\n   * @return {Array<number>} Ends.\n   */\n\n\n  getEnds() {\n    return this.ends_;\n  }\n  /**\n   * @return {Array<number>} Interior point.\n   */\n\n\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n\n    return this.flatInteriorPoint_;\n  }\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n\n\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\n  }\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n\n\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */\n\n\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n\n    return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  }\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n\n\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);\n      linearRings.push(linearRing);\n      offset = end;\n    }\n\n    return linearRings;\n  }\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n\n\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n      }\n\n      this.orientedRevision_ = this.getRevision();\n    }\n\n    return this.orientedFlatCoordinates_;\n  }\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n\n\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n\n\n  getType() {\n    return 'Polygon';\n  }\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n  }\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n\n\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    const ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n\n}\n\nexport default Polygon;\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\n\nexport function circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  /** @type {Array<number>} */\n\n  const flatCoordinates = [];\n\n  for (let i = 0; i < n; ++i) {\n    extend(flatCoordinates, sphereOffset(center, radius, 2 * Math.PI * i / n, sphereRadius));\n  }\n\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\n\nexport function fromExtent(extent) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\n\nexport function fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\n\nexport function makeRegular(polygon, center, radius, angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = angle ? angle : 0;\n\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + modulo(i, sides) * 2 * Math.PI / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n\n  polygon.changed();\n}","map":{"version":3,"names":["LinearRing","Point","SimpleGeometry","arrayMaxSquaredDelta","assignClosestArrayPoint","closestSquaredDistanceXY","getCenter","deflateCoordinatesArray","extend","getInteriorPointOfArray","inflateCoordinatesArray","intersectsLinearRingArray","linearRingsAreOriented","orientLinearRings","linearRings","linearRingsArea","linearRingsContainsXY","modulo","quantizeArray","offset","sphereOffset","Polygon","constructor","coordinates","layout","ends","ends_","flatInteriorPointRevision_","flatInteriorPoint_","maxDelta_","maxDeltaRevision_","orientedRevision_","orientedFlatCoordinates_","undefined","setFlatCoordinates","setCoordinates","appendLinearRing","linearRing","flatCoordinates","getFlatCoordinates","slice","push","length","changed","clone","polygon","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","containsXY","getOrientedFlatCoordinates","getArea","getCoordinates","right","getEnds","getFlatInteriorPoint","flatCenter","getInteriorPoint","getLinearRingCount","getLinearRing","index","getLinearRings","i","ii","end","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","getType","intersectsExtent","extent","setLayout","circular","center","radius","n","sphereRadius","PI","fromExtent","minX","minY","maxX","maxY","fromCircle","circle","sides","angle","getStride","getLayout","arrayLength","Array","j","makeRegular","getRadius","startAngle","cos","sin"],"sources":["D:/Work/Learning/demo/node_modules/ol/geom/Polygon.js"],"sourcesContent":["/**\n * @module ol/geom/Polygon\n */\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY, getCenter} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {modulo} from '../math.js';\nimport {quantizeArray} from './flat/simplify.js';\nimport {offset as sphereOffset} from '../sphere.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = ends;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n  clone() {\n    const polygon = new Polygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n    polygon.applyProperties(this);\n    return polygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.ends_,\n        this.stride,\n        flatCenter,\n        0\n      );\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(\n          this.orientedFlatCoordinates_,\n          0,\n          this.ends_,\n          this.stride\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Polygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(\n      flatCoordinates,\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, sphereRadius)\n    );\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [\n    minX,\n    minY,\n    minX,\n    maxY,\n    maxX,\n    maxY,\n    maxX,\n    minY,\n    minX,\n    minY,\n  ];\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = angle ? angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,SAAQC,oBAAR,EAA8BC,uBAA9B,QAA4D,mBAA5D;AACA,SAAQC,wBAAR,EAAkCC,SAAlC,QAAkD,cAAlD;AACA,SAAQC,uBAAR,QAAsC,mBAAtC;AACA,SAAQC,MAAR,QAAqB,aAArB;AACA,SAAQC,uBAAR,QAAsC,yBAAtC;AACA,SAAQC,uBAAR,QAAsC,mBAAtC;AACA,SAAQC,yBAAR,QAAwC,4BAAxC;AACA,SAAQC,sBAAR,EAAgCC,iBAAhC,QAAwD,kBAAxD;AACA,SAAQC,WAAW,IAAIC,eAAvB,QAA6C,gBAA7C;AACA,SAAQC,qBAAR,QAAoC,oBAApC;AACA,SAAQC,MAAR,QAAqB,YAArB;AACA,SAAQC,aAAR,QAA4B,oBAA5B;AACA,SAAQC,MAAM,IAAIC,YAAlB,QAAqC,cAArC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,SAAsBnB,cAAtB,CAAqC;EACnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoB,WAAW,CAACC,WAAD,EAAcC,MAAd,EAAsBC,IAAtB,EAA4B;IACrC;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,KAAL,GAAa,EAAb;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,0BAAL,GAAkC,CAAC,CAAnC;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,kBAAL,GAA0B,IAA1B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,SAAL,GAAiB,CAAC,CAAlB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,iBAAL,GAAyB,CAAC,CAA1B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,iBAAL,GAAyB,CAAC,CAA1B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,wBAAL,GAAgC,IAAhC;;IAEA,IAAIR,MAAM,KAAKS,SAAX,IAAwBR,IAA5B,EAAkC;MAChC,KAAKS,kBAAL,CACEV,MADF;MAEE;MAA8BD,WAFhC;MAIA,KAAKG,KAAL,GAAaD,IAAb;IACD,CAND,MAMO;MACL,KAAKU,cAAL;MACE;MACEZ,WAFJ,EAIEC,MAJF;IAMD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEY,gBAAgB,CAACC,UAAD,EAAa;IAC3B,IAAI,CAAC,KAAKC,eAAV,EAA2B;MACzB,KAAKA,eAAL,GAAuBD,UAAU,CAACE,kBAAX,GAAgCC,KAAhC,EAAvB;IACD,CAFD,MAEO;MACLhC,MAAM,CAAC,KAAK8B,eAAN,EAAuBD,UAAU,CAACE,kBAAX,EAAvB,CAAN;IACD;;IACD,KAAKb,KAAL,CAAWe,IAAX,CAAgB,KAAKH,eAAL,CAAqBI,MAArC;IACA,KAAKC,OAAL;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,KAAK,GAAG;IACN,MAAMC,OAAO,GAAG,IAAIxB,OAAJ,CACd,KAAKiB,eAAL,CAAqBE,KAArB,EADc,EAEd,KAAKhB,MAFS,EAGd,KAAKE,KAAL,CAAWc,KAAX,EAHc,CAAhB;IAKAK,OAAO,CAACC,eAAR,CAAwB,IAAxB;IACA,OAAOD,OAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEE,cAAc,CAACC,CAAD,EAAIC,CAAJ,EAAOC,YAAP,EAAqBC,kBAArB,EAAyC;IACrD,IAAIA,kBAAkB,GAAG9C,wBAAwB,CAAC,KAAK+C,SAAL,EAAD,EAAmBJ,CAAnB,EAAsBC,CAAtB,CAAjD,EAA2E;MACzE,OAAOE,kBAAP;IACD;;IACD,IAAI,KAAKrB,iBAAL,IAA0B,KAAKuB,WAAL,EAA9B,EAAkD;MAChD,KAAKxB,SAAL,GAAiByB,IAAI,CAACC,IAAL,CACfpD,oBAAoB,CAClB,KAAKmC,eADa,EAElB,CAFkB,EAGlB,KAAKZ,KAHa,EAIlB,KAAK8B,MAJa,EAKlB,CALkB,CADL,CAAjB;MASA,KAAK1B,iBAAL,GAAyB,KAAKuB,WAAL,EAAzB;IACD;;IACD,OAAOjD,uBAAuB,CAC5B,KAAKkC,eADuB,EAE5B,CAF4B,EAG5B,KAAKZ,KAHuB,EAI5B,KAAK8B,MAJuB,EAK5B,KAAK3B,SALuB,EAM5B,IAN4B,EAO5BmB,CAP4B,EAQ5BC,CAR4B,EAS5BC,YAT4B,EAU5BC,kBAV4B,CAA9B;EAYD;EAED;AACF;AACA;AACA;AACA;;;EACEM,UAAU,CAACT,CAAD,EAAIC,CAAJ,EAAO;IACf,OAAOjC,qBAAqB,CAC1B,KAAK0C,0BAAL,EAD0B,EAE1B,CAF0B,EAG1B,KAAKhC,KAHqB,EAI1B,KAAK8B,MAJqB,EAK1BR,CAL0B,EAM1BC,CAN0B,CAA5B;EAQD;EAED;AACF;AACA;AACA;AACA;;;EACEU,OAAO,GAAG;IACR,OAAO5C,eAAe,CACpB,KAAK2C,0BAAL,EADoB,EAEpB,CAFoB,EAGpB,KAAKhC,KAHe,EAIpB,KAAK8B,MAJe,CAAtB;EAMD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEI,cAAc,CAACC,KAAD,EAAQ;IACpB,IAAIvB,eAAJ;;IACA,IAAIuB,KAAK,KAAK5B,SAAd,EAAyB;MACvBK,eAAe,GAAG,KAAKoB,0BAAL,GAAkClB,KAAlC,EAAlB;MACA3B,iBAAiB,CAACyB,eAAD,EAAkB,CAAlB,EAAqB,KAAKZ,KAA1B,EAAiC,KAAK8B,MAAtC,EAA8CK,KAA9C,CAAjB;IACD,CAHD,MAGO;MACLvB,eAAe,GAAG,KAAKA,eAAvB;IACD;;IAED,OAAO5B,uBAAuB,CAAC4B,eAAD,EAAkB,CAAlB,EAAqB,KAAKZ,KAA1B,EAAiC,KAAK8B,MAAtC,CAA9B;EACD;EAED;AACF;AACA;;;EACEM,OAAO,GAAG;IACR,OAAO,KAAKpC,KAAZ;EACD;EAED;AACF;AACA;;;EACEqC,oBAAoB,GAAG;IACrB,IAAI,KAAKpC,0BAAL,IAAmC,KAAK0B,WAAL,EAAvC,EAA2D;MACzD,MAAMW,UAAU,GAAG1D,SAAS,CAAC,KAAK8C,SAAL,EAAD,CAA5B;MACA,KAAKxB,kBAAL,GAA0BnB,uBAAuB,CAC/C,KAAKiD,0BAAL,EAD+C,EAE/C,CAF+C,EAG/C,KAAKhC,KAH0C,EAI/C,KAAK8B,MAJ0C,EAK/CQ,UAL+C,EAM/C,CAN+C,CAAjD;MAQA,KAAKrC,0BAAL,GAAkC,KAAK0B,WAAL,EAAlC;IACD;;IACD,OAAO,KAAKzB,kBAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEqC,gBAAgB,GAAG;IACjB,OAAO,IAAIhE,KAAJ,CAAU,KAAK8D,oBAAL,EAAV,EAAuC,KAAvC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEG,kBAAkB,GAAG;IACnB,OAAO,KAAKxC,KAAL,CAAWgB,MAAlB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEyB,aAAa,CAACC,KAAD,EAAQ;IACnB,IAAIA,KAAK,GAAG,CAAR,IAAa,KAAK1C,KAAL,CAAWgB,MAAX,IAAqB0B,KAAtC,EAA6C;MAC3C,OAAO,IAAP;IACD;;IACD,OAAO,IAAIpE,UAAJ,CACL,KAAKsC,eAAL,CAAqBE,KAArB,CACE4B,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkB,KAAK1C,KAAL,CAAW0C,KAAK,GAAG,CAAnB,CADpB,EAEE,KAAK1C,KAAL,CAAW0C,KAAX,CAFF,CADK,EAKL,KAAK5C,MALA,CAAP;EAOD;EAED;AACF;AACA;AACA;AACA;;;EACE6C,cAAc,GAAG;IACf,MAAM7C,MAAM,GAAG,KAAKA,MAApB;IACA,MAAMc,eAAe,GAAG,KAAKA,eAA7B;IACA,MAAMb,IAAI,GAAG,KAAKC,KAAlB;IACA,MAAMZ,WAAW,GAAG,EAApB;IACA,IAAIK,MAAM,GAAG,CAAb;;IACA,KAAK,IAAImD,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG9C,IAAI,CAACiB,MAA1B,EAAkC4B,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;MAC7C,MAAME,GAAG,GAAG/C,IAAI,CAAC6C,CAAD,CAAhB;MACA,MAAMjC,UAAU,GAAG,IAAIrC,UAAJ,CACjBsC,eAAe,CAACE,KAAhB,CAAsBrB,MAAtB,EAA8BqD,GAA9B,CADiB,EAEjBhD,MAFiB,CAAnB;MAIAV,WAAW,CAAC2B,IAAZ,CAAiBJ,UAAjB;MACAlB,MAAM,GAAGqD,GAAT;IACD;;IACD,OAAO1D,WAAP;EACD;EAED;AACF;AACA;;;EACE4C,0BAA0B,GAAG;IAC3B,IAAI,KAAK3B,iBAAL,IAA0B,KAAKsB,WAAL,EAA9B,EAAkD;MAChD,MAAMf,eAAe,GAAG,KAAKA,eAA7B;;MACA,IAAI1B,sBAAsB,CAAC0B,eAAD,EAAkB,CAAlB,EAAqB,KAAKZ,KAA1B,EAAiC,KAAK8B,MAAtC,CAA1B,EAAyE;QACvE,KAAKxB,wBAAL,GAAgCM,eAAhC;MACD,CAFD,MAEO;QACL,KAAKN,wBAAL,GAAgCM,eAAe,CAACE,KAAhB,EAAhC;QACA,KAAKR,wBAAL,CAA8BU,MAA9B,GAAuC7B,iBAAiB,CACtD,KAAKmB,wBADiD,EAEtD,CAFsD,EAGtD,KAAKN,KAHiD,EAItD,KAAK8B,MAJiD,CAAxD;MAMD;;MACD,KAAKzB,iBAAL,GAAyB,KAAKsB,WAAL,EAAzB;IACD;;IACD,OAAO,KAAKrB,wBAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEyC,6BAA6B,CAACC,gBAAD,EAAmB;IAC9C,MAAMC,yBAAyB,GAAG,EAAlC;IACA,MAAMC,cAAc,GAAG,EAAvB;IACAD,yBAAyB,CAACjC,MAA1B,GAAmCxB,aAAa,CAC9C,KAAKoB,eADyC,EAE9C,CAF8C,EAG9C,KAAKZ,KAHyC,EAI9C,KAAK8B,MAJyC,EAK9CF,IAAI,CAACC,IAAL,CAAUmB,gBAAV,CAL8C,EAM9CC,yBAN8C,EAO9C,CAP8C,EAQ9CC,cAR8C,CAAhD;IAUA,OAAO,IAAIvD,OAAJ,CAAYsD,yBAAZ,EAAuC,IAAvC,EAA6CC,cAA7C,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,OAAO,GAAG;IACR,OAAO,SAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEC,gBAAgB,CAACC,MAAD,EAAS;IACvB,OAAOpE,yBAAyB,CAC9B,KAAK+C,0BAAL,EAD8B,EAE9B,CAF8B,EAG9B,KAAKhC,KAHyB,EAI9B,KAAK8B,MAJyB,EAK9BuB,MAL8B,CAAhC;EAOD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE5C,cAAc,CAACZ,WAAD,EAAcC,MAAd,EAAsB;IAClC,KAAKwD,SAAL,CAAexD,MAAf,EAAuBD,WAAvB,EAAoC,CAApC;;IACA,IAAI,CAAC,KAAKe,eAAV,EAA2B;MACzB,KAAKA,eAAL,GAAuB,EAAvB;IACD;;IACD,MAAMb,IAAI,GAAGlB,uBAAuB,CAClC,KAAK+B,eAD6B,EAElC,CAFkC,EAGlCf,WAHkC,EAIlC,KAAKiC,MAJ6B,EAKlC,KAAK9B,KAL6B,CAApC;IAOA,KAAKY,eAAL,CAAqBI,MAArB,GAA8BjB,IAAI,CAACiB,MAAL,KAAgB,CAAhB,GAAoB,CAApB,GAAwBjB,IAAI,CAACA,IAAI,CAACiB,MAAL,GAAc,CAAf,CAA1D;IACA,KAAKC,OAAL;EACD;;AAxXkC;;AA2XrC,eAAetB,OAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS4D,QAAT,CAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,CAAlC,EAAqCC,YAArC,EAAmD;EACxDD,CAAC,GAAGA,CAAC,GAAGA,CAAH,GAAO,EAAZ;EACA;;EACA,MAAM9C,eAAe,GAAG,EAAxB;;EACA,KAAK,IAAIgC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,CAApB,EAAuB,EAAEd,CAAzB,EAA4B;IAC1B9D,MAAM,CACJ8B,eADI,EAEJlB,YAAY,CAAC8D,MAAD,EAASC,MAAT,EAAkB,IAAI7B,IAAI,CAACgC,EAAT,GAAchB,CAAf,GAAoBc,CAArC,EAAwCC,YAAxC,CAFR,CAAN;EAID;;EACD/C,eAAe,CAACG,IAAhB,CAAqBH,eAAe,CAAC,CAAD,CAApC,EAAyCA,eAAe,CAAC,CAAD,CAAxD;EACA,OAAO,IAAIjB,OAAJ,CAAYiB,eAAZ,EAA6B,IAA7B,EAAmC,CAACA,eAAe,CAACI,MAAjB,CAAnC,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS6C,UAAT,CAAoBR,MAApB,EAA4B;EACjC,MAAMS,IAAI,GAAGT,MAAM,CAAC,CAAD,CAAnB;EACA,MAAMU,IAAI,GAAGV,MAAM,CAAC,CAAD,CAAnB;EACA,MAAMW,IAAI,GAAGX,MAAM,CAAC,CAAD,CAAnB;EACA,MAAMY,IAAI,GAAGZ,MAAM,CAAC,CAAD,CAAnB;EACA,MAAMzC,eAAe,GAAG,CACtBkD,IADsB,EAEtBC,IAFsB,EAGtBD,IAHsB,EAItBG,IAJsB,EAKtBD,IALsB,EAMtBC,IANsB,EAOtBD,IAPsB,EAQtBD,IARsB,EAStBD,IATsB,EAUtBC,IAVsB,CAAxB;EAYA,OAAO,IAAIpE,OAAJ,CAAYiB,eAAZ,EAA6B,IAA7B,EAAmC,CAACA,eAAe,CAACI,MAAjB,CAAnC,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkD,UAAT,CAAoBC,MAApB,EAA4BC,KAA5B,EAAmCC,KAAnC,EAA0C;EAC/CD,KAAK,GAAGA,KAAK,GAAGA,KAAH,GAAW,EAAxB;EACA,MAAMtC,MAAM,GAAGqC,MAAM,CAACG,SAAP,EAAf;EACA,MAAMxE,MAAM,GAAGqE,MAAM,CAACI,SAAP,EAAf;EACA,MAAMf,MAAM,GAAGW,MAAM,CAACvF,SAAP,EAAf;EACA,MAAM4F,WAAW,GAAG1C,MAAM,IAAIsC,KAAK,GAAG,CAAZ,CAA1B;EACA,MAAMxD,eAAe,GAAG,IAAI6D,KAAJ,CAAUD,WAAV,CAAxB;;EACA,KAAK,IAAI5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4B,WAApB,EAAiC5B,CAAC,IAAId,MAAtC,EAA8C;IAC5ClB,eAAe,CAACgC,CAAD,CAAf,GAAqB,CAArB;IACAhC,eAAe,CAACgC,CAAC,GAAG,CAAL,CAAf,GAAyB,CAAzB;;IACA,KAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5C,MAApB,EAA4B4C,CAAC,EAA7B,EAAiC;MAC/B9D,eAAe,CAACgC,CAAC,GAAG8B,CAAL,CAAf,GAAyBlB,MAAM,CAACkB,CAAD,CAA/B;IACD;EACF;;EACD,MAAM3E,IAAI,GAAG,CAACa,eAAe,CAACI,MAAjB,CAAb;EACA,MAAMG,OAAO,GAAG,IAAIxB,OAAJ,CAAYiB,eAAZ,EAA6Bd,MAA7B,EAAqCC,IAArC,CAAhB;EACA4E,WAAW,CAACxD,OAAD,EAAUqC,MAAV,EAAkBW,MAAM,CAACS,SAAP,EAAlB,EAAsCP,KAAtC,CAAX;EACA,OAAOlD,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASwD,WAAT,CAAqBxD,OAArB,EAA8BqC,MAA9B,EAAsCC,MAAtC,EAA8CY,KAA9C,EAAqD;EAC1D,MAAMzD,eAAe,GAAGO,OAAO,CAACN,kBAAR,EAAxB;EACA,MAAMiB,MAAM,GAAGX,OAAO,CAACmD,SAAR,EAAf;EACA,MAAMF,KAAK,GAAGxD,eAAe,CAACI,MAAhB,GAAyBc,MAAzB,GAAkC,CAAhD;EACA,MAAM+C,UAAU,GAAGR,KAAK,GAAGA,KAAH,GAAW,CAAnC;;EACA,KAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIwB,KAArB,EAA4B,EAAExB,CAA9B,EAAiC;IAC/B,MAAMnD,MAAM,GAAGmD,CAAC,GAAGd,MAAnB;IACA,MAAMuC,KAAK,GAAGQ,UAAU,GAAItF,MAAM,CAACqD,CAAD,EAAIwB,KAAJ,CAAN,GAAmB,CAAnB,GAAuBxC,IAAI,CAACgC,EAA7B,GAAmCQ,KAA9D;IACAxD,eAAe,CAACnB,MAAD,CAAf,GAA0B+D,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,GAAG7B,IAAI,CAACkD,GAAL,CAAST,KAAT,CAA/C;IACAzD,eAAe,CAACnB,MAAM,GAAG,CAAV,CAAf,GAA8B+D,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,GAAG7B,IAAI,CAACmD,GAAL,CAASV,KAAT,CAAnD;EACD;;EACDlD,OAAO,CAACF,OAAR;AACD"},"metadata":{},"sourceType":"module"}