{"ast":null,"code":"/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/Map~Map} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */\n\nclass MapBrowserEvent extends MapEvent {\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./Map.js\").default} map Map.\n   * @param {EVENT} originalEvent Original event.\n   * @param {boolean} [dragging] Is the map currently being dragged?\n   * @param {import(\"./Map.js\").FrameState} [frameState] Frame state.\n   * @param {Array<PointerEvent>} [activePointers] Active pointers.\n   */\n  constructor(type, map, originalEvent, dragging, frameState, activePointers) {\n    super(type, map, frameState);\n    /**\n     * The original browser event.\n     * @const\n     * @type {EVENT}\n     * @api\n     */\n\n    this.originalEvent = originalEvent;\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     */\n\n    this.pixel_ = null;\n    /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n\n    this.coordinate_ = null;\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n\n    this.dragging = dragging !== undefined ? dragging : false;\n    /**\n     * @type {Array<PointerEvent>|undefined}\n     */\n\n    this.activePointers = activePointers;\n  }\n  /**\n   * The map pixel relative to the viewport corresponding to the original event.\n   * @type {import(\"./pixel.js\").Pixel}\n   * @api\n   */\n\n\n  get pixel() {\n    if (!this.pixel_) {\n      this.pixel_ = this.map.getEventPixel(this.originalEvent);\n    }\n\n    return this.pixel_;\n  }\n\n  set pixel(pixel) {\n    this.pixel_ = pixel;\n  }\n  /**\n   * The coordinate corresponding to the original browser event.  This will be in the user\n   * projection if one is set.  Otherwise it will be in the view projection.\n   * @type {import(\"./coordinate.js\").Coordinate}\n   * @api\n   */\n\n\n  get coordinate() {\n    if (!this.coordinate_) {\n      this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n    }\n\n    return this.coordinate_;\n  }\n\n  set coordinate(coordinate) {\n    this.coordinate_ = coordinate;\n  }\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @api\n   */\n\n\n  preventDefault() {\n    super.preventDefault();\n\n    if ('preventDefault' in this.originalEvent) {\n      /** @type {UIEvent} */\n      this.originalEvent.preventDefault();\n    }\n  }\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @api\n   */\n\n\n  stopPropagation() {\n    super.stopPropagation();\n\n    if ('stopPropagation' in this.originalEvent) {\n      /** @type {UIEvent} */\n      this.originalEvent.stopPropagation();\n    }\n  }\n\n}\n\nexport default MapBrowserEvent;","map":{"version":3,"names":["MapEvent","MapBrowserEvent","constructor","type","map","originalEvent","dragging","frameState","activePointers","pixel_","coordinate_","undefined","pixel","getEventPixel","coordinate","getCoordinateFromPixel","preventDefault","stopPropagation"],"sources":["D:/Work/Learning/demo/node_modules/ol/MapBrowserEvent.js"],"sourcesContent":["/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/Map~Map} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */\nclass MapBrowserEvent extends MapEvent {\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./Map.js\").default} map Map.\n   * @param {EVENT} originalEvent Original event.\n   * @param {boolean} [dragging] Is the map currently being dragged?\n   * @param {import(\"./Map.js\").FrameState} [frameState] Frame state.\n   * @param {Array<PointerEvent>} [activePointers] Active pointers.\n   */\n  constructor(type, map, originalEvent, dragging, frameState, activePointers) {\n    super(type, map, frameState);\n\n    /**\n     * The original browser event.\n     * @const\n     * @type {EVENT}\n     * @api\n     */\n    this.originalEvent = originalEvent;\n\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     */\n    this.pixel_ = null;\n\n    /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    this.coordinate_ = null;\n\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n    this.dragging = dragging !== undefined ? dragging : false;\n\n    /**\n     * @type {Array<PointerEvent>|undefined}\n     */\n    this.activePointers = activePointers;\n  }\n\n  /**\n   * The map pixel relative to the viewport corresponding to the original event.\n   * @type {import(\"./pixel.js\").Pixel}\n   * @api\n   */\n  get pixel() {\n    if (!this.pixel_) {\n      this.pixel_ = this.map.getEventPixel(this.originalEvent);\n    }\n    return this.pixel_;\n  }\n  set pixel(pixel) {\n    this.pixel_ = pixel;\n  }\n\n  /**\n   * The coordinate corresponding to the original browser event.  This will be in the user\n   * projection if one is set.  Otherwise it will be in the view projection.\n   * @type {import(\"./coordinate.js\").Coordinate}\n   * @api\n   */\n  get coordinate() {\n    if (!this.coordinate_) {\n      this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n    }\n    return this.coordinate_;\n  }\n  set coordinate(coordinate) {\n    this.coordinate_ = coordinate;\n  }\n\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @api\n   */\n  preventDefault() {\n    super.preventDefault();\n    if ('preventDefault' in this.originalEvent) {\n      /** @type {UIEvent} */ (this.originalEvent).preventDefault();\n    }\n  }\n\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @api\n   */\n  stopPropagation() {\n    super.stopPropagation();\n    if ('stopPropagation' in this.originalEvent) {\n      /** @type {UIEvent} */ (this.originalEvent).stopPropagation();\n    }\n  }\n}\n\nexport default MapBrowserEvent;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,QAAP,MAAqB,eAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAN,SAA8BD,QAA9B,CAAuC;EACrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,WAAW,CAACC,IAAD,EAAOC,GAAP,EAAYC,aAAZ,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,cAAjD,EAAiE;IAC1E,MAAML,IAAN,EAAYC,GAAZ,EAAiBG,UAAjB;IAEA;AACJ;AACA;AACA;AACA;AACA;;IACI,KAAKF,aAAL,GAAqBA,aAArB;IAEA;AACJ;AACA;AACA;;IACI,KAAKI,MAAL,GAAc,IAAd;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,WAAL,GAAmB,IAAnB;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,KAAKJ,QAAL,GAAgBA,QAAQ,KAAKK,SAAb,GAAyBL,QAAzB,GAAoC,KAApD;IAEA;AACJ;AACA;;IACI,KAAKE,cAAL,GAAsBA,cAAtB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACW,IAALI,KAAK,GAAG;IACV,IAAI,CAAC,KAAKH,MAAV,EAAkB;MAChB,KAAKA,MAAL,GAAc,KAAKL,GAAL,CAASS,aAAT,CAAuB,KAAKR,aAA5B,CAAd;IACD;;IACD,OAAO,KAAKI,MAAZ;EACD;;EACQ,IAALG,KAAK,CAACA,KAAD,EAAQ;IACf,KAAKH,MAAL,GAAcG,KAAd;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACgB,IAAVE,UAAU,GAAG;IACf,IAAI,CAAC,KAAKJ,WAAV,EAAuB;MACrB,KAAKA,WAAL,GAAmB,KAAKN,GAAL,CAASW,sBAAT,CAAgC,KAAKH,KAArC,CAAnB;IACD;;IACD,OAAO,KAAKF,WAAZ;EACD;;EACa,IAAVI,UAAU,CAACA,UAAD,EAAa;IACzB,KAAKJ,WAAL,GAAmBI,UAAnB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,cAAc,GAAG;IACf,MAAMA,cAAN;;IACA,IAAI,oBAAoB,KAAKX,aAA7B,EAA4C;MAC1C;MAAwB,KAAKA,aAAN,CAAqBW,cAArB;IACxB;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEC,eAAe,GAAG;IAChB,MAAMA,eAAN;;IACA,IAAI,qBAAqB,KAAKZ,aAA9B,EAA6C;MAC3C;MAAwB,KAAKA,aAAN,CAAqBY,eAArB;IACxB;EACF;;AApGoC;;AAuGvC,eAAehB,eAAf"},"metadata":{},"sourceType":"module"}