{"ast":null,"code":"/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n\n  dest[0] = size[0] + 2 * num;\n  dest[1] = size[1] + 2 * num;\n  return dest;\n}\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\n\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The scaled size.\n */\n\nexport function scale(size, ratio, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n\n  dest[0] = size[0] * ratio + 0.5 | 0;\n  dest[1] = size[1] * ratio + 0.5 | 0;\n  return dest;\n}\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\n\nexport function toSize(size, dest) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (dest === undefined) {\n      dest = [size, size];\n    } else {\n      dest[0] = size;\n      dest[1] = size;\n    }\n\n    return dest;\n  }\n}","map":{"version":3,"names":["buffer","size","num","dest","undefined","hasArea","scale","ratio","toSize","Array","isArray"],"sources":["D:/Work/Learning/demo/node_modules/ol/size.js"],"sourcesContent":["/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = size[0] + 2 * num;\n  dest[1] = size[1] + 2 * num;\n  return dest;\n}\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = (size[0] * ratio + 0.5) | 0;\n  dest[1] = (size[1] * ratio + 0.5) | 0;\n  return dest;\n}\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, dest) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (dest === undefined) {\n      dest = [size, size];\n    } else {\n      dest[0] = size;\n      dest[1] = size;\n    }\n    return dest;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;EACtC,IAAIA,IAAI,KAAKC,SAAb,EAAwB;IACtBD,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAP;EACD;;EACDA,IAAI,CAAC,CAAD,CAAJ,GAAUF,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIC,GAAxB;EACAC,IAAI,CAAC,CAAD,CAAJ,GAAUF,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIC,GAAxB;EACA,OAAOC,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,OAAT,CAAiBJ,IAAjB,EAAuB;EAC5B,OAAOA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAhC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,KAAT,CAAeL,IAAf,EAAqBM,KAArB,EAA4BJ,IAA5B,EAAkC;EACvC,IAAIA,IAAI,KAAKC,SAAb,EAAwB;IACtBD,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAP;EACD;;EACDA,IAAI,CAAC,CAAD,CAAJ,GAAWF,IAAI,CAAC,CAAD,CAAJ,GAAUM,KAAV,GAAkB,GAAnB,GAA0B,CAApC;EACAJ,IAAI,CAAC,CAAD,CAAJ,GAAWF,IAAI,CAAC,CAAD,CAAJ,GAAUM,KAAV,GAAkB,GAAnB,GAA0B,CAApC;EACA,OAAOJ,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,MAAT,CAAgBP,IAAhB,EAAsBE,IAAtB,EAA4B;EACjC,IAAIM,KAAK,CAACC,OAAN,CAAcT,IAAd,CAAJ,EAAyB;IACvB,OAAOA,IAAP;EACD,CAFD,MAEO;IACL,IAAIE,IAAI,KAAKC,SAAb,EAAwB;MACtBD,IAAI,GAAG,CAACF,IAAD,EAAOA,IAAP,CAAP;IACD,CAFD,MAEO;MACLE,IAAI,CAAC,CAAD,CAAJ,GAAUF,IAAV;MACAE,IAAI,CAAC,CAAD,CAAJ,GAAUF,IAAV;IACD;;IACD,OAAOE,IAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}