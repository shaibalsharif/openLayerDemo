{"ast":null,"code":"/**\n * @module ol/source/TileWMS\n */\nimport TileImage from './TileImage.js';\nimport { DEFAULT_VERSION } from './wms.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { buffer, createEmpty } from '../extent.js';\nimport { buffer as bufferSize, scale as scaleSize, toSize } from '../size.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { compareVersions } from '../string.js';\nimport { get as getProjection, transform, transformExtent } from '../proj.js';\nimport { modulo } from '../math.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\n\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options} [options] Tile WMS options.\n   */\n  constructor(options) {\n    options = options ? options :\n    /** @type {Options} */\n    {};\n    const params = Object.assign({}, options.params);\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    });\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    this.params_ = params;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.v13_ = true;\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n\n    this.serverType_ = options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.tmpExtent_ = createEmpty();\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n\n\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n    let tileGrid = this.getTileGrid();\n\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    const z = tileGrid.getZForResolution(resolution, this.zDirection);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    const gutter = this.gutter_;\n\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n      tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    Object.assign(baseParams, this.params_, params);\n    const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, 1, sourceProjectionObj || projectionObj, baseParams);\n  }\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n\n\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png'\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n\n      if (!isSingleLayer) {\n        return undefined;\n      }\n\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = resolution * mpu / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n    return appendParams(\n    /** @type {string} */\n    this.urls[0], baseParams);\n  }\n  /**\n   * @return {number} Gutter.\n   */\n\n\n  getGutter() {\n    return this.gutter_;\n  }\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  getParams() {\n    return this.params_;\n  }\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n\n\n  getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n    const urls = this.urls;\n\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case 'geoserver':\n          const dpi = 90 * pixelRatio + 0.5 | 0;\n\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n\n          break;\n\n        case 'mapserver':\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n\n        case 'carmentaserver':\n        case 'qgis':\n          params['DPI'] = 90 * pixelRatio;\n          break;\n\n        default:\n          // Unknown `serverType` configured\n          assert(false, 52);\n          break;\n      }\n    }\n\n    const axisOrientation = projection.getAxisOrientation();\n    const bbox = tileExtent;\n\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      let tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n\n    params['BBOX'] = bbox.join(',');\n    let url;\n\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    return appendParams(url, params);\n  }\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n\n\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n\n\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n\n    return res.join('/');\n  }\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n  /**\n   * @private\n   */\n\n\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n\n\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    const gutter = this.gutter_;\n\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    Object.assign(baseParams, this.params_);\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n  }\n\n}\n\nexport default TileWMS;","map":{"version":3,"names":["TileImage","DEFAULT_VERSION","appendParams","assert","buffer","createEmpty","bufferSize","scale","scaleSize","toSize","calculateSourceResolution","compareVersions","get","getProjection","transform","transformExtent","modulo","hash","tileCoordHash","TileWMS","constructor","options","params","Object","assign","transparent","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","opaque","projection","reprojectionErrorThreshold","tileClass","tileGrid","tileLoadFunction","url","urls","wrapX","undefined","transition","zDirection","gutter_","gutter","params_","v13_","serverType_","serverType","hidpi_","hidpi","tmpExtent_","updateV13_","setKey","getKeyForParams_","getFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","getTileGrid","getTileGridForProjection","z","getZForResolution","tileCoord","getTileCoordForCoordAndZ","getResolutions","length","tileResolution","getResolution","tileExtent","getTileCoordExtent","tileSize","getTileSize","tmpSize","baseParams","x","Math","floor","y","getRequestUrl_","getLegendUrl","layers","LAYERS","isSingleLayer","Array","isArray","mpu","getMetersPerUnit","pixelSize","getGutter","getParams","pixelRatio","getCode","dpi","axisOrientation","getAxisOrientation","bbox","substr","tmp","join","index","getTilePixelRatio","i","res","key","updateParams","version","tileUrlFunction"],"sources":["D:/Work/Learning/demo/node_modules/ol/source/TileWMS.js"],"sourcesContent":["/**\n * @module ol/source/TileWMS\n */\n\nimport TileImage from './TileImage.js';\nimport {DEFAULT_VERSION} from './wms.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {buffer as bufferSize, scale as scaleSize, toSize} from '../size.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport {modulo} from '../math.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options} [options] Tile WMS options.\n   */\n  constructor(options) {\n    options = options ? options : /** @type {Options} */ ({});\n\n    const params = Object.assign({}, options.params);\n\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    const z = tileGrid.getZForResolution(resolution, this.zDirection);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        tileResolution\n      );\n      tileExtent = transformExtent(\n        tileExtent,\n        projectionObj,\n        sourceProjectionObj\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    Object.assign(baseParams, this.params_, params);\n\n    const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.urls[0]), baseParams);\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(\n    tileCoord,\n    tileSize,\n    tileExtent,\n    pixelRatio,\n    projection,\n    params\n  ) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case 'geoserver':\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case 'mapserver':\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case 'carmentaserver':\n        case 'qgis':\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default: // Unknown `serverType` configured\n          assert(false, 52);\n          break;\n      }\n    }\n\n    const axisOrientation = projection.getAxisOrientation();\n    const bbox = tileExtent;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      let tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    return appendParams(url, params);\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n    };\n    Object.assign(baseParams, this.params_);\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams\n    );\n  }\n}\n\nexport default TileWMS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}