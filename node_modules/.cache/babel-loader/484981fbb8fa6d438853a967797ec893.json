{"ast":null,"code":"/**\n * @module ol/math\n */\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\n\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n\n  return squaredDistance(x, y, x1, y1);\n}\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\n\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>} The resulting vector.\n */\n\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    } // Swap max row with i-th (current) row\n\n\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp; // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  } // Solve Ax=b for upper triangular matrix A (mat)\n\n\n  const x = new Array(n);\n\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n\n  return x;\n}\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\n\nexport function toDegrees(angleInRadians) {\n  return angleInRadians * 180 / Math.PI;\n}\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\n\nexport function toRadians(angleInDegrees) {\n  return angleInDegrees * Math.PI / 180;\n}\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\n\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\n\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n/**\n * Returns a number with a limited number of decimal digits.\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The input number with a limited number of decimal digits.\n */\n\nexport function toFixed(n, decimals) {\n  const factor = Math.pow(10, decimals);\n  return Math.round(n * factor) / factor;\n}\n/**\n * Rounds a number to the nearest integer value considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The nearest integer.\n */\n\nexport function round(n, decimals) {\n  return Math.round(toFixed(n, decimals));\n}\n/**\n * Rounds a number to the next smaller integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next smaller integer.\n */\n\nexport function floor(n, decimals) {\n  return Math.floor(toFixed(n, decimals));\n}\n/**\n * Rounds a number to the next bigger integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next bigger integer.\n */\n\nexport function ceil(n, decimals) {\n  return Math.ceil(toFixed(n, decimals));\n}","map":{"version":3,"names":["clamp","value","min","max","Math","squaredSegmentDistance","x","y","x1","y1","x2","y2","dx","dy","t","squaredDistance","solveLinearSystem","mat","n","length","i","maxRow","maxEl","abs","r","absValue","tmp","j","coef","k","Array","l","m","toDegrees","angleInRadians","PI","toRadians","angleInDegrees","modulo","a","b","lerp","toFixed","decimals","factor","pow","round","floor","ceil"],"sources":["D:/Work/Learning/demo/node_modules/ol/math.js"],"sourcesContent":["/**\n * @module ol/math\n */\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  const x = new Array(n);\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return (angleInRadians * 180) / Math.PI;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return (angleInDegrees * Math.PI) / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n\n/**\n * Returns a number with a limited number of decimal digits.\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The input number with a limited number of decimal digits.\n */\nexport function toFixed(n, decimals) {\n  const factor = Math.pow(10, decimals);\n  return Math.round(n * factor) / factor;\n}\n\n/**\n * Rounds a number to the nearest integer value considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The nearest integer.\n */\nexport function round(n, decimals) {\n  return Math.round(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next smaller integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next smaller integer.\n */\nexport function floor(n, decimals) {\n  return Math.floor(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next bigger integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next bigger integer.\n */\nexport function ceil(n, decimals) {\n  return Math.ceil(toFixed(n, decimals));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}