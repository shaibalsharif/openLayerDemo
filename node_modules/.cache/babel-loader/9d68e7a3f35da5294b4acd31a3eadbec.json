{"ast":null,"code":"/**\n * @module ol/structs/LRUCache\n */\nimport { assert } from '../asserts.js';\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\n\nclass LRUCache {\n  /**\n   * @param {number} [highWaterMark] High water mark.\n   */\n  constructor(highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.count_ = 0;\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n\n    this.entries_ = {};\n    /**\n     * @private\n     * @type {?Entry}\n     */\n\n    this.oldest_ = null;\n    /**\n     * @private\n     * @type {?Entry}\n     */\n\n    this.newest_ = null;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  canExpireCache() {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  }\n  /**\n   * Expire the cache.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n\n\n  expireCache(keep) {\n    while (this.canExpireCache()) {\n      this.pop();\n    }\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  }\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n\n\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n\n\n  forEach(f) {\n    let entry = this.oldest_;\n\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n  /**\n   * @param {string} key Key.\n   * @param {*} [options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n\n\n  get(key, options) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ =\n      /** @type {Entry} */\n      this.oldest_.newer;\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n\n\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n\n    if (entry === this.newest_) {\n      this.newest_ =\n      /** @type {Entry} */\n      entry.older;\n\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ =\n      /** @type {Entry} */\n      entry.newer;\n\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n  /**\n   * @return {number} Count.\n   */\n\n\n  getCount() {\n    return this.count_;\n  }\n  /**\n   * @return {Array<string>} Keys.\n   */\n\n\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n\n    return keys;\n  }\n  /**\n   * @return {Array<T>} Values.\n   */\n\n\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n\n    return values;\n  }\n  /**\n   * @return {T} Last value.\n   */\n\n\n  peekLast() {\n    return this.oldest_.value_;\n  }\n  /**\n   * @return {string} Last key.\n   */\n\n\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n\n\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n  /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n\n\n  peek(key) {\n    if (!this.containsKey(key)) {\n      return undefined;\n    }\n\n    return this.entries_[key].value_;\n  }\n  /**\n   * @return {T} value Value.\n   */\n\n\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n\n    this.oldest_ =\n    /** @type {Entry} */\n    entry.newer;\n\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n\n    --this.count_;\n    return entry.value_;\n  }\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n\n\n  replace(key, value) {\n    this.get(key); // update `newest_`\n\n    this.entries_[key].value_ = value;\n  }\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n\n\n  set(key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n\n    const entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    };\n\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n\n\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n\n}\n\nexport default LRUCache;","map":{"version":3,"names":["assert","LRUCache","constructor","highWaterMark","undefined","count_","entries_","oldest_","newest_","canExpireCache","getCount","expireCache","keep","pop","clear","containsKey","key","hasOwnProperty","forEach","f","entry","value_","key_","newer","get","options","older","remove","getKeys","keys","Array","i","getValues","values","peekLast","peekLastKey","peekFirstKey","peek","replace","value","set","setSize","size"],"sources":["D:/Work/Learning/demo/node_modules/ol/structs/LRUCache.js"],"sourcesContent":["/**\n * @module ol/structs/LRUCache\n */\n\nimport {assert} from '../asserts.js';\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nclass LRUCache {\n  /**\n   * @param {number} [highWaterMark] High water mark.\n   */\n  constructor(highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  }\n\n  /**\n   * Expire the cache.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n  expireCache(keep) {\n    while (this.canExpireCache()) {\n      this.pop();\n    }\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  forEach(f) {\n    let entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {*} [options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n  get(key, options) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n  /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n  peek(key) {\n    if (!this.containsKey(key)) {\n      return undefined;\n    }\n    return this.entries_[key].value_;\n  }\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n    const entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value,\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n}\n\nexport default LRUCache;\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,MAAR,QAAqB,eAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAN,CAAe;EACb;AACF;AACA;EACEC,WAAW,CAACC,aAAD,EAAgB;IACzB;AACJ;AACA;AACA;AACA;IACI,KAAKA,aAAL,GAAqBA,aAAa,KAAKC,SAAlB,GAA8BD,aAA9B,GAA8C,IAAnE;IAEA;AACJ;AACA;AACA;;IACI,KAAKE,MAAL,GAAc,CAAd;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,QAAL,GAAgB,EAAhB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,IAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,IAAf;EACD;EAED;AACF;AACA;;;EACEC,cAAc,GAAG;IACf,OAAO,KAAKN,aAAL,GAAqB,CAArB,IAA0B,KAAKO,QAAL,KAAkB,KAAKP,aAAxD;EACD;EAED;AACF;AACA;AACA;;;EACEQ,WAAW,CAACC,IAAD,EAAO;IAChB,OAAO,KAAKH,cAAL,EAAP,EAA8B;MAC5B,KAAKI,GAAL;IACD;EACF;EAED;AACF;AACA;;;EACEC,KAAK,GAAG;IACN,KAAKT,MAAL,GAAc,CAAd;IACA,KAAKC,QAAL,GAAgB,EAAhB;IACA,KAAKC,OAAL,GAAe,IAAf;IACA,KAAKC,OAAL,GAAe,IAAf;EACD;EAED;AACF;AACA;AACA;;;EACEO,WAAW,CAACC,GAAD,EAAM;IACf,OAAO,KAAKV,QAAL,CAAcW,cAAd,CAA6BD,GAA7B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEE,OAAO,CAACC,CAAD,EAAI;IACT,IAAIC,KAAK,GAAG,KAAKb,OAAjB;;IACA,OAAOa,KAAP,EAAc;MACZD,CAAC,CAACC,KAAK,CAACC,MAAP,EAAeD,KAAK,CAACE,IAArB,EAA2B,IAA3B,CAAD;MACAF,KAAK,GAAGA,KAAK,CAACG,KAAd;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEC,GAAG,CAACR,GAAD,EAAMS,OAAN,EAAe;IAChB,MAAML,KAAK,GAAG,KAAKd,QAAL,CAAcU,GAAd,CAAd;IACAhB,MAAM,CAACoB,KAAK,KAAKhB,SAAX,EAAsB,EAAtB,CAAN,CAFgB,CAEiB;;IACjC,IAAIgB,KAAK,KAAK,KAAKZ,OAAnB,EAA4B;MAC1B,OAAOY,KAAK,CAACC,MAAb;IACD,CAFD,MAEO,IAAID,KAAK,KAAK,KAAKb,OAAnB,EAA4B;MACjC,KAAKA,OAAL;MAAe;MAAsB,KAAKA,OAAL,CAAagB,KAAlD;MACA,KAAKhB,OAAL,CAAamB,KAAb,GAAqB,IAArB;IACD,CAHM,MAGA;MACLN,KAAK,CAACG,KAAN,CAAYG,KAAZ,GAAoBN,KAAK,CAACM,KAA1B;MACAN,KAAK,CAACM,KAAN,CAAYH,KAAZ,GAAoBH,KAAK,CAACG,KAA1B;IACD;;IACDH,KAAK,CAACG,KAAN,GAAc,IAAd;IACAH,KAAK,CAACM,KAAN,GAAc,KAAKlB,OAAnB;IACA,KAAKA,OAAL,CAAae,KAAb,GAAqBH,KAArB;IACA,KAAKZ,OAAL,GAAeY,KAAf;IACA,OAAOA,KAAK,CAACC,MAAb;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEM,MAAM,CAACX,GAAD,EAAM;IACV,MAAMI,KAAK,GAAG,KAAKd,QAAL,CAAcU,GAAd,CAAd;IACAhB,MAAM,CAACoB,KAAK,KAAKhB,SAAX,EAAsB,EAAtB,CAAN,CAFU,CAEuB;;IACjC,IAAIgB,KAAK,KAAK,KAAKZ,OAAnB,EAA4B;MAC1B,KAAKA,OAAL;MAAe;MAAsBY,KAAK,CAACM,KAA3C;;MACA,IAAI,KAAKlB,OAAT,EAAkB;QAChB,KAAKA,OAAL,CAAae,KAAb,GAAqB,IAArB;MACD;IACF,CALD,MAKO,IAAIH,KAAK,KAAK,KAAKb,OAAnB,EAA4B;MACjC,KAAKA,OAAL;MAAe;MAAsBa,KAAK,CAACG,KAA3C;;MACA,IAAI,KAAKhB,OAAT,EAAkB;QAChB,KAAKA,OAAL,CAAamB,KAAb,GAAqB,IAArB;MACD;IACF,CALM,MAKA;MACLN,KAAK,CAACG,KAAN,CAAYG,KAAZ,GAAoBN,KAAK,CAACM,KAA1B;MACAN,KAAK,CAACM,KAAN,CAAYH,KAAZ,GAAoBH,KAAK,CAACG,KAA1B;IACD;;IACD,OAAO,KAAKjB,QAAL,CAAcU,GAAd,CAAP;IACA,EAAE,KAAKX,MAAP;IACA,OAAOe,KAAK,CAACC,MAAb;EACD;EAED;AACF;AACA;;;EACEX,QAAQ,GAAG;IACT,OAAO,KAAKL,MAAZ;EACD;EAED;AACF;AACA;;;EACEuB,OAAO,GAAG;IACR,MAAMC,IAAI,GAAG,IAAIC,KAAJ,CAAU,KAAKzB,MAAf,CAAb;IACA,IAAI0B,CAAC,GAAG,CAAR;IACA,IAAIX,KAAJ;;IACA,KAAKA,KAAK,GAAG,KAAKZ,OAAlB,EAA2BY,KAA3B,EAAkCA,KAAK,GAAGA,KAAK,CAACM,KAAhD,EAAuD;MACrDG,IAAI,CAACE,CAAC,EAAF,CAAJ,GAAYX,KAAK,CAACE,IAAlB;IACD;;IACD,OAAOO,IAAP;EACD;EAED;AACF;AACA;;;EACEG,SAAS,GAAG;IACV,MAAMC,MAAM,GAAG,IAAIH,KAAJ,CAAU,KAAKzB,MAAf,CAAf;IACA,IAAI0B,CAAC,GAAG,CAAR;IACA,IAAIX,KAAJ;;IACA,KAAKA,KAAK,GAAG,KAAKZ,OAAlB,EAA2BY,KAA3B,EAAkCA,KAAK,GAAGA,KAAK,CAACM,KAAhD,EAAuD;MACrDO,MAAM,CAACF,CAAC,EAAF,CAAN,GAAcX,KAAK,CAACC,MAApB;IACD;;IACD,OAAOY,MAAP;EACD;EAED;AACF;AACA;;;EACEC,QAAQ,GAAG;IACT,OAAO,KAAK3B,OAAL,CAAac,MAApB;EACD;EAED;AACF;AACA;;;EACEc,WAAW,GAAG;IACZ,OAAO,KAAK5B,OAAL,CAAae,IAApB;EACD;EAED;AACF;AACA;AACA;;;EACEc,YAAY,GAAG;IACb,OAAO,KAAK5B,OAAL,CAAac,IAApB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEe,IAAI,CAACrB,GAAD,EAAM;IACR,IAAI,CAAC,KAAKD,WAAL,CAAiBC,GAAjB,CAAL,EAA4B;MAC1B,OAAOZ,SAAP;IACD;;IACD,OAAO,KAAKE,QAAL,CAAcU,GAAd,EAAmBK,MAA1B;EACD;EAED;AACF;AACA;;;EACER,GAAG,GAAG;IACJ,MAAMO,KAAK,GAAG,KAAKb,OAAnB;IACA,OAAO,KAAKD,QAAL,CAAcc,KAAK,CAACE,IAApB,CAAP;;IACA,IAAIF,KAAK,CAACG,KAAV,EAAiB;MACfH,KAAK,CAACG,KAAN,CAAYG,KAAZ,GAAoB,IAApB;IACD;;IACD,KAAKnB,OAAL;IAAe;IAAsBa,KAAK,CAACG,KAA3C;;IACA,IAAI,CAAC,KAAKhB,OAAV,EAAmB;MACjB,KAAKC,OAAL,GAAe,IAAf;IACD;;IACD,EAAE,KAAKH,MAAP;IACA,OAAOe,KAAK,CAACC,MAAb;EACD;EAED;AACF;AACA;AACA;;;EACEiB,OAAO,CAACtB,GAAD,EAAMuB,KAAN,EAAa;IAClB,KAAKf,GAAL,CAASR,GAAT,EADkB,CACH;;IACf,KAAKV,QAAL,CAAcU,GAAd,EAAmBK,MAAnB,GAA4BkB,KAA5B;EACD;EAED;AACF;AACA;AACA;;;EACEC,GAAG,CAACxB,GAAD,EAAMuB,KAAN,EAAa;IACdvC,MAAM,CAAC,EAAEgB,GAAG,IAAI,KAAKV,QAAd,CAAD,EAA0B,EAA1B,CAAN,CADc,CACuB;;IACrC,MAAMc,KAAK,GAAG;MACZE,IAAI,EAAEN,GADM;MAEZO,KAAK,EAAE,IAFK;MAGZG,KAAK,EAAE,KAAKlB,OAHA;MAIZa,MAAM,EAAEkB;IAJI,CAAd;;IAMA,IAAI,CAAC,KAAK/B,OAAV,EAAmB;MACjB,KAAKD,OAAL,GAAea,KAAf;IACD,CAFD,MAEO;MACL,KAAKZ,OAAL,CAAae,KAAb,GAAqBH,KAArB;IACD;;IACD,KAAKZ,OAAL,GAAeY,KAAf;IACA,KAAKd,QAAL,CAAcU,GAAd,IAAqBI,KAArB;IACA,EAAE,KAAKf,MAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEoC,OAAO,CAACC,IAAD,EAAO;IACZ,KAAKvC,aAAL,GAAqBuC,IAArB;EACD;;AAnQY;;AAsQf,eAAezC,QAAf"},"metadata":{},"sourceType":"module"}