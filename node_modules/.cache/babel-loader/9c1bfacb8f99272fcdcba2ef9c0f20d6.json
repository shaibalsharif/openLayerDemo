{"ast":null,"code":"/**\n * @module ol/sphere\n */\nimport { toDegrees, toRadians } from './math.js';\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\n\nexport const DEFAULT_RADIUS = 6371008.8;\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\n\nexport function getDistance(c1, c2, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lat2 = toRadians(c2[1]);\n  const deltaLatBy2 = (lat2 - lat1) / 2;\n  const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n  const a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) + Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) * Math.cos(lat1) * Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\n\nfunction getLengthInternal(coordinates, radius) {\n  let length = 0;\n\n  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\n  }\n\n  return length;\n}\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\n\n\nexport function getLength(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n\n  let length = 0;\n  let coordinates, coords, i, ii, j, jj;\n\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n      {\n        break;\n      }\n\n    case 'LineString':\n    case 'LinearRing':\n      {\n        coordinates =\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n        geometry.getCoordinates();\n        length = getLengthInternal(coordinates, radius);\n        break;\n      }\n\n    case 'MultiLineString':\n    case 'Polygon':\n      {\n        coordinates =\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n        geometry.getCoordinates();\n\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          length += getLengthInternal(coordinates[i], radius);\n        }\n\n        break;\n      }\n\n    case 'MultiPolygon':\n      {\n        coordinates =\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n        geometry.getCoordinates();\n\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          coords = coordinates[i];\n\n          for (j = 0, jj = coords.length; j < jj; ++j) {\n            length += getLengthInternal(coords[j], radius);\n          }\n        }\n\n        break;\n      }\n\n    case 'GeometryCollection':\n      {\n        const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */\n        geometry.getGeometries();\n\n        for (i = 0, ii = geometries.length; i < ii; ++i) {\n          length += getLength(geometries[i], options);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n\n  return length;\n}\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\n\nfunction getAreaInternal(coordinates, radius) {\n  let area = 0;\n  const len = coordinates.length;\n  let x1 = coordinates[len - 1][0];\n  let y1 = coordinates[len - 1][1];\n\n  for (let i = 0; i < len; i++) {\n    const x2 = coordinates[i][0];\n    const y2 = coordinates[i][1];\n    area += toRadians(x2 - x1) * (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n\n  return area * radius * radius / 2.0;\n}\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\n\n\nexport function getArea(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n\n  let area = 0;\n  let coordinates, coords, i, ii, j, jj;\n\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n    case 'LineString':\n    case 'MultiLineString':\n    case 'LinearRing':\n      {\n        break;\n      }\n\n    case 'Polygon':\n      {\n        coordinates =\n        /** @type {import(\"./geom/Polygon.js\").default} */\n        geometry.getCoordinates();\n        area = Math.abs(getAreaInternal(coordinates[0], radius));\n\n        for (i = 1, ii = coordinates.length; i < ii; ++i) {\n          area -= Math.abs(getAreaInternal(coordinates[i], radius));\n        }\n\n        break;\n      }\n\n    case 'MultiPolygon':\n      {\n        coordinates =\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n        geometry.getCoordinates();\n\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          coords = coordinates[i];\n          area += Math.abs(getAreaInternal(coords[0], radius));\n\n          for (j = 1, jj = coords.length; j < jj; ++j) {\n            area -= Math.abs(getAreaInternal(coords[j], radius));\n          }\n        }\n\n        break;\n      }\n\n    case 'GeometryCollection':\n      {\n        const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */\n        geometry.getGeometries();\n\n        for (i = 0, ii = geometries.length; i < ii; ++i) {\n          area += getArea(geometries[i], options);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n\n  return area;\n}\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */\n\nexport function offset(c1, distance, bearing, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lon1 = toRadians(c1[0]);\n  const dByR = distance / radius;\n  const lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n  const lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n  return [toDegrees(lon), toDegrees(lat)];\n}","map":{"version":3,"names":["toDegrees","toRadians","DEFAULT_RADIUS","getDistance","c1","c2","radius","lat1","lat2","deltaLatBy2","deltaLonBy2","a","Math","sin","cos","atan2","sqrt","getLengthInternal","coordinates","length","i","ii","getLength","geometry","options","projection","type","getType","clone","transform","coords","j","jj","getCoordinates","geometries","getGeometries","Error","getAreaInternal","area","len","x1","y1","x2","y2","getArea","abs","offset","distance","bearing","lon1","dByR","lat","asin","lon"],"sources":["D:/Work/Learning/demo/node_modules/ol/sphere.js"],"sourcesContent":["/**\n * @module ol/sphere\n */\nimport {toDegrees, toRadians} from './math.js';\n\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\nexport const DEFAULT_RADIUS = 6371008.8;\n\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\nexport function getDistance(c1, c2, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lat2 = toRadians(c2[1]);\n  const deltaLatBy2 = (lat2 - lat1) / 2;\n  const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n  const a =\n    Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\n    Math.sin(deltaLonBy2) *\n      Math.sin(deltaLonBy2) *\n      Math.cos(lat1) *\n      Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\nfunction getLengthInternal(coordinates, radius) {\n  let length = 0;\n  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\n  }\n  return length;\n}\n\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\nexport function getLength(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let length = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint': {\n      break;\n    }\n    case 'LineString':\n    case 'LinearRing': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      length = getLengthInternal(coordinates, radius);\n      break;\n    }\n    case 'MultiLineString':\n    case 'Polygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        length += getLengthInternal(coordinates[i], radius);\n      }\n      break;\n    }\n    case 'MultiPolygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        for (j = 0, jj = coords.length; j < jj; ++j) {\n          length += getLengthInternal(coords[j], radius);\n        }\n      }\n      break;\n    }\n    case 'GeometryCollection': {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        length += getLength(geometries[i], options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return length;\n}\n\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\nfunction getAreaInternal(coordinates, radius) {\n  let area = 0;\n  const len = coordinates.length;\n  let x1 = coordinates[len - 1][0];\n  let y1 = coordinates[len - 1][1];\n  for (let i = 0; i < len; i++) {\n    const x2 = coordinates[i][0];\n    const y2 = coordinates[i][1];\n    area +=\n      toRadians(x2 - x1) *\n      (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n  return (area * radius * radius) / 2.0;\n}\n\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\nexport function getArea(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let area = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n    case 'LineString':\n    case 'MultiLineString':\n    case 'LinearRing': {\n      break;\n    }\n    case 'Polygon': {\n      coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      area = Math.abs(getAreaInternal(coordinates[0], radius));\n      for (i = 1, ii = coordinates.length; i < ii; ++i) {\n        area -= Math.abs(getAreaInternal(coordinates[i], radius));\n      }\n      break;\n    }\n    case 'MultiPolygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        area += Math.abs(getAreaInternal(coords[0], radius));\n        for (j = 1, jj = coords.length; j < jj; ++j) {\n          area -= Math.abs(getAreaInternal(coords[j], radius));\n        }\n      }\n      break;\n    }\n    case 'GeometryCollection': {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        area += getArea(geometries[i], options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return area;\n}\n\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */\nexport function offset(c1, distance, bearing, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lon1 = toRadians(c1[0]);\n  const dByR = distance / radius;\n  const lat = Math.asin(\n    Math.sin(lat1) * Math.cos(dByR) +\n      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing)\n  );\n  const lon =\n    lon1 +\n    Math.atan2(\n      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\n      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat)\n    );\n  return [toDegrees(lon), toDegrees(lat)];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}