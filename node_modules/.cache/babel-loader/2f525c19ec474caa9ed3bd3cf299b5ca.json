{"ast":null,"code":"/**\n * @module ol/structs/PriorityQueue\n */\nimport { assert } from '../asserts.js';\nimport { clear } from '../obj.js';\n/**\n * @type {number}\n */\n\nexport const DROP = Infinity;\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\n\nclass PriorityQueue {\n  /**\n   * @param {function(T): number} priorityFunction Priority function.\n   * @param {function(T): string} keyFunction Key function.\n   */\n  constructor(priorityFunction, keyFunction) {\n    /**\n     * @type {function(T): number}\n     * @private\n     */\n    this.priorityFunction_ = priorityFunction;\n    /**\n     * @type {function(T): string}\n     * @private\n     */\n\n    this.keyFunction_ = keyFunction;\n    /**\n     * @type {Array<T>}\n     * @private\n     */\n\n    this.elements_ = [];\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n\n    this.priorities_ = [];\n    /**\n     * @type {!Object<string, boolean>}\n     * @private\n     */\n\n    this.queuedElements_ = {};\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  clear() {\n    this.elements_.length = 0;\n    this.priorities_.length = 0;\n    clear(this.queuedElements_);\n  }\n  /**\n   * Remove and return the highest-priority element. O(log N).\n   * @return {T} Element.\n   */\n\n\n  dequeue() {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[0];\n\n    if (elements.length == 1) {\n      elements.length = 0;\n      priorities.length = 0;\n    } else {\n      elements[0] = elements.pop();\n      priorities[0] = priorities.pop();\n      this.siftUp_(0);\n    }\n\n    const elementKey = this.keyFunction_(element);\n    delete this.queuedElements_[elementKey];\n    return element;\n  }\n  /**\n   * Enqueue an element. O(log N).\n   * @param {T} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n\n\n  enqueue(element) {\n    assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n\n    const priority = this.priorityFunction_(element);\n\n    if (priority != DROP) {\n      this.elements_.push(element);\n      this.priorities_.push(priority);\n      this.queuedElements_[this.keyFunction_(element)] = true;\n      this.siftDown_(0, this.elements_.length - 1);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @return {number} Count.\n   */\n\n\n  getCount() {\n    return this.elements_.length;\n  }\n  /**\n   * Gets the index of the left child of the node at the given index.\n   * @param {number} index The index of the node to get the left child for.\n   * @return {number} The index of the left child.\n   * @private\n   */\n\n\n  getLeftChildIndex_(index) {\n    return index * 2 + 1;\n  }\n  /**\n   * Gets the index of the right child of the node at the given index.\n   * @param {number} index The index of the node to get the right child for.\n   * @return {number} The index of the right child.\n   * @private\n   */\n\n\n  getRightChildIndex_(index) {\n    return index * 2 + 2;\n  }\n  /**\n   * Gets the index of the parent of the node at the given index.\n   * @param {number} index The index of the node to get the parent for.\n   * @return {number} The index of the parent.\n   * @private\n   */\n\n\n  getParentIndex_(index) {\n    return index - 1 >> 1;\n  }\n  /**\n   * Make this a heap. O(N).\n   * @private\n   */\n\n\n  heapify_() {\n    let i;\n\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n      this.siftUp_(i);\n    }\n  }\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  isEmpty() {\n    return this.elements_.length === 0;\n  }\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Is key queued.\n   */\n\n\n  isKeyQueued(key) {\n    return key in this.queuedElements_;\n  }\n  /**\n   * @param {T} element Element.\n   * @return {boolean} Is queued.\n   */\n\n\n  isQueued(element) {\n    return this.isKeyQueued(this.keyFunction_(element));\n  }\n  /**\n   * @param {number} index The index of the node to move down.\n   * @private\n   */\n\n\n  siftUp_(index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const count = elements.length;\n    const element = elements[index];\n    const priority = priorities[index];\n    const startIndex = index;\n\n    while (index < count >> 1) {\n      const lIndex = this.getLeftChildIndex_(index);\n      const rIndex = this.getRightChildIndex_(index);\n      const smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;\n      elements[index] = elements[smallerChildIndex];\n      priorities[index] = priorities[smallerChildIndex];\n      index = smallerChildIndex;\n    }\n\n    elements[index] = element;\n    priorities[index] = priority;\n    this.siftDown_(startIndex, index);\n  }\n  /**\n   * @param {number} startIndex The index of the root.\n   * @param {number} index The index of the node to move up.\n   * @private\n   */\n\n\n  siftDown_(startIndex, index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[index];\n    const priority = priorities[index];\n\n    while (index > startIndex) {\n      const parentIndex = this.getParentIndex_(index);\n\n      if (priorities[parentIndex] > priority) {\n        elements[index] = elements[parentIndex];\n        priorities[index] = priorities[parentIndex];\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n\n    elements[index] = element;\n    priorities[index] = priority;\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  reprioritize() {\n    const priorityFunction = this.priorityFunction_;\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    let index = 0;\n    const n = elements.length;\n    let element, i, priority;\n\n    for (i = 0; i < n; ++i) {\n      element = elements[i];\n      priority = priorityFunction(element);\n\n      if (priority == DROP) {\n        delete this.queuedElements_[this.keyFunction_(element)];\n      } else {\n        priorities[index] = priority;\n        elements[index++] = element;\n      }\n    }\n\n    elements.length = index;\n    priorities.length = index;\n    this.heapify_();\n  }\n\n}\n\nexport default PriorityQueue;","map":{"version":3,"names":["assert","clear","DROP","Infinity","PriorityQueue","constructor","priorityFunction","keyFunction","priorityFunction_","keyFunction_","elements_","priorities_","queuedElements_","length","dequeue","elements","priorities","element","pop","siftUp_","elementKey","enqueue","priority","push","siftDown_","getCount","getLeftChildIndex_","index","getRightChildIndex_","getParentIndex_","heapify_","i","isEmpty","isKeyQueued","key","isQueued","count","startIndex","lIndex","rIndex","smallerChildIndex","parentIndex","reprioritize","n"],"sources":["D:/Work/Learning/demo/node_modules/ol/structs/PriorityQueue.js"],"sourcesContent":["/**\n * @module ol/structs/PriorityQueue\n */\nimport {assert} from '../asserts.js';\nimport {clear} from '../obj.js';\n\n/**\n * @type {number}\n */\nexport const DROP = Infinity;\n\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nclass PriorityQueue {\n  /**\n   * @param {function(T): number} priorityFunction Priority function.\n   * @param {function(T): string} keyFunction Key function.\n   */\n  constructor(priorityFunction, keyFunction) {\n    /**\n     * @type {function(T): number}\n     * @private\n     */\n    this.priorityFunction_ = priorityFunction;\n\n    /**\n     * @type {function(T): string}\n     * @private\n     */\n    this.keyFunction_ = keyFunction;\n\n    /**\n     * @type {Array<T>}\n     * @private\n     */\n    this.elements_ = [];\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.priorities_ = [];\n\n    /**\n     * @type {!Object<string, boolean>}\n     * @private\n     */\n    this.queuedElements_ = {};\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.elements_.length = 0;\n    this.priorities_.length = 0;\n    clear(this.queuedElements_);\n  }\n\n  /**\n   * Remove and return the highest-priority element. O(log N).\n   * @return {T} Element.\n   */\n  dequeue() {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[0];\n    if (elements.length == 1) {\n      elements.length = 0;\n      priorities.length = 0;\n    } else {\n      elements[0] = elements.pop();\n      priorities[0] = priorities.pop();\n      this.siftUp_(0);\n    }\n    const elementKey = this.keyFunction_(element);\n    delete this.queuedElements_[elementKey];\n    return element;\n  }\n\n  /**\n   * Enqueue an element. O(log N).\n   * @param {T} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  enqueue(element) {\n    assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n    const priority = this.priorityFunction_(element);\n    if (priority != DROP) {\n      this.elements_.push(element);\n      this.priorities_.push(priority);\n      this.queuedElements_[this.keyFunction_(element)] = true;\n      this.siftDown_(0, this.elements_.length - 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.elements_.length;\n  }\n\n  /**\n   * Gets the index of the left child of the node at the given index.\n   * @param {number} index The index of the node to get the left child for.\n   * @return {number} The index of the left child.\n   * @private\n   */\n  getLeftChildIndex_(index) {\n    return index * 2 + 1;\n  }\n\n  /**\n   * Gets the index of the right child of the node at the given index.\n   * @param {number} index The index of the node to get the right child for.\n   * @return {number} The index of the right child.\n   * @private\n   */\n  getRightChildIndex_(index) {\n    return index * 2 + 2;\n  }\n\n  /**\n   * Gets the index of the parent of the node at the given index.\n   * @param {number} index The index of the node to get the parent for.\n   * @return {number} The index of the parent.\n   * @private\n   */\n  getParentIndex_(index) {\n    return (index - 1) >> 1;\n  }\n\n  /**\n   * Make this a heap. O(N).\n   * @private\n   */\n  heapify_() {\n    let i;\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n      this.siftUp_(i);\n    }\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.elements_.length === 0;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Is key queued.\n   */\n  isKeyQueued(key) {\n    return key in this.queuedElements_;\n  }\n\n  /**\n   * @param {T} element Element.\n   * @return {boolean} Is queued.\n   */\n  isQueued(element) {\n    return this.isKeyQueued(this.keyFunction_(element));\n  }\n\n  /**\n   * @param {number} index The index of the node to move down.\n   * @private\n   */\n  siftUp_(index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const count = elements.length;\n    const element = elements[index];\n    const priority = priorities[index];\n    const startIndex = index;\n\n    while (index < count >> 1) {\n      const lIndex = this.getLeftChildIndex_(index);\n      const rIndex = this.getRightChildIndex_(index);\n\n      const smallerChildIndex =\n        rIndex < count && priorities[rIndex] < priorities[lIndex]\n          ? rIndex\n          : lIndex;\n\n      elements[index] = elements[smallerChildIndex];\n      priorities[index] = priorities[smallerChildIndex];\n      index = smallerChildIndex;\n    }\n\n    elements[index] = element;\n    priorities[index] = priority;\n    this.siftDown_(startIndex, index);\n  }\n\n  /**\n   * @param {number} startIndex The index of the root.\n   * @param {number} index The index of the node to move up.\n   * @private\n   */\n  siftDown_(startIndex, index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[index];\n    const priority = priorities[index];\n\n    while (index > startIndex) {\n      const parentIndex = this.getParentIndex_(index);\n      if (priorities[parentIndex] > priority) {\n        elements[index] = elements[parentIndex];\n        priorities[index] = priorities[parentIndex];\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  reprioritize() {\n    const priorityFunction = this.priorityFunction_;\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    let index = 0;\n    const n = elements.length;\n    let element, i, priority;\n    for (i = 0; i < n; ++i) {\n      element = elements[i];\n      priority = priorityFunction(element);\n      if (priority == DROP) {\n        delete this.queuedElements_[this.keyFunction_(element)];\n      } else {\n        priorities[index] = priority;\n        elements[index++] = element;\n      }\n    }\n    elements.length = index;\n    priorities.length = index;\n    this.heapify_();\n  }\n}\n\nexport default PriorityQueue;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}