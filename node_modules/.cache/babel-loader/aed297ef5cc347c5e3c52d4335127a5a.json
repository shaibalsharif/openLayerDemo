{"ast":null,"code":"/**\n * @module ol/Kinetic\n */\n\n/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @api\n */\nclass Kinetic {\n  /**\n   * @param {number} decay Rate of decay (must be negative).\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n   * @param {number} delay Delay to consider to calculate the kinetic\n   *     initial values (milliseconds).\n   */\n  constructor(decay, minVelocity, delay) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.decay_ = decay;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.minVelocity_ = minVelocity;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.delay_ = delay;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.points_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.angle_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.initialVelocity_ = 0;\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  begin() {\n    this.points_.length = 0;\n    this.angle_ = 0;\n    this.initialVelocity_ = 0;\n  }\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   */\n\n\n  update(x, y) {\n    this.points_.push(x, y, Date.now());\n  }\n  /**\n   * @return {boolean} Whether we should do kinetic animation.\n   */\n\n\n  end() {\n    if (this.points_.length < 6) {\n      // at least 2 points are required (i.e. there must be at least 6 elements\n      // in the array)\n      return false;\n    }\n\n    const delay = Date.now() - this.delay_;\n    const lastIndex = this.points_.length - 3;\n\n    if (this.points_[lastIndex + 2] < delay) {\n      // the last tracked point is too old, which means that the user stopped\n      // panning before releasing the map\n      return false;\n    } // get the first point which still falls into the delay time\n\n\n    let firstIndex = lastIndex - 3;\n\n    while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n      firstIndex -= 3;\n    }\n\n    const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2]; // we don't want a duration of 0 (divide by zero)\n    // we also make sure the user panned for a duration of at least one frame\n    // (1/60s) to compute sane displacement values\n\n    if (duration < 1000 / 60) {\n      return false;\n    }\n\n    const dx = this.points_[lastIndex] - this.points_[firstIndex];\n    const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n    this.angle_ = Math.atan2(dy, dx);\n    this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n    return this.initialVelocity_ > this.minVelocity_;\n  }\n  /**\n   * @return {number} Total distance travelled (pixels).\n   */\n\n\n  getDistance() {\n    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n  }\n  /**\n   * @return {number} Angle of the kinetic panning animation (radians).\n   */\n\n\n  getAngle() {\n    return this.angle_;\n  }\n\n}\n\nexport default Kinetic;","map":{"version":3,"names":["Kinetic","constructor","decay","minVelocity","delay","decay_","minVelocity_","delay_","points_","angle_","initialVelocity_","begin","length","update","x","y","push","Date","now","end","lastIndex","firstIndex","duration","dx","dy","Math","atan2","sqrt","getDistance","getAngle"],"sources":["D:/Work/Learning/demo/node_modules/ol/Kinetic.js"],"sourcesContent":["/**\n * @module ol/Kinetic\n */\n\n/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @api\n */\nclass Kinetic {\n  /**\n   * @param {number} decay Rate of decay (must be negative).\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n   * @param {number} delay Delay to consider to calculate the kinetic\n   *     initial values (milliseconds).\n   */\n  constructor(decay, minVelocity, delay) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.decay_ = decay;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minVelocity_ = minVelocity;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delay_ = delay;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.points_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.initialVelocity_ = 0;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  begin() {\n    this.points_.length = 0;\n    this.angle_ = 0;\n    this.initialVelocity_ = 0;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   */\n  update(x, y) {\n    this.points_.push(x, y, Date.now());\n  }\n\n  /**\n   * @return {boolean} Whether we should do kinetic animation.\n   */\n  end() {\n    if (this.points_.length < 6) {\n      // at least 2 points are required (i.e. there must be at least 6 elements\n      // in the array)\n      return false;\n    }\n    const delay = Date.now() - this.delay_;\n    const lastIndex = this.points_.length - 3;\n    if (this.points_[lastIndex + 2] < delay) {\n      // the last tracked point is too old, which means that the user stopped\n      // panning before releasing the map\n      return false;\n    }\n\n    // get the first point which still falls into the delay time\n    let firstIndex = lastIndex - 3;\n    while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n      firstIndex -= 3;\n    }\n\n    const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];\n    // we don't want a duration of 0 (divide by zero)\n    // we also make sure the user panned for a duration of at least one frame\n    // (1/60s) to compute sane displacement values\n    if (duration < 1000 / 60) {\n      return false;\n    }\n\n    const dx = this.points_[lastIndex] - this.points_[firstIndex];\n    const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n    this.angle_ = Math.atan2(dy, dx);\n    this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n    return this.initialVelocity_ > this.minVelocity_;\n  }\n\n  /**\n   * @return {number} Total distance travelled (pixels).\n   */\n  getDistance() {\n    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n  }\n\n  /**\n   * @return {number} Angle of the kinetic panning animation (radians).\n   */\n  getAngle() {\n    return this.angle_;\n  }\n}\n\nexport default Kinetic;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,OAAN,CAAc;EACZ;AACF;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACC,KAAD,EAAQC,WAAR,EAAqBC,KAArB,EAA4B;IACrC;AACJ;AACA;AACA;IACI,KAAKC,MAAL,GAAcH,KAAd;IAEA;AACJ;AACA;AACA;;IACI,KAAKI,YAAL,GAAoBH,WAApB;IAEA;AACJ;AACA;AACA;;IACI,KAAKI,MAAL,GAAcH,KAAd;IAEA;AACJ;AACA;AACA;;IACI,KAAKI,OAAL,GAAe,EAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAc,CAAd;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,gBAAL,GAAwB,CAAxB;EACD;EAED;AACF;AACA;;;EACEC,KAAK,GAAG;IACN,KAAKH,OAAL,CAAaI,MAAb,GAAsB,CAAtB;IACA,KAAKH,MAAL,GAAc,CAAd;IACA,KAAKC,gBAAL,GAAwB,CAAxB;EACD;EAED;AACF;AACA;AACA;;;EACEG,MAAM,CAACC,CAAD,EAAIC,CAAJ,EAAO;IACX,KAAKP,OAAL,CAAaQ,IAAb,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwBE,IAAI,CAACC,GAAL,EAAxB;EACD;EAED;AACF;AACA;;;EACEC,GAAG,GAAG;IACJ,IAAI,KAAKX,OAAL,CAAaI,MAAb,GAAsB,CAA1B,EAA6B;MAC3B;MACA;MACA,OAAO,KAAP;IACD;;IACD,MAAMR,KAAK,GAAGa,IAAI,CAACC,GAAL,KAAa,KAAKX,MAAhC;IACA,MAAMa,SAAS,GAAG,KAAKZ,OAAL,CAAaI,MAAb,GAAsB,CAAxC;;IACA,IAAI,KAAKJ,OAAL,CAAaY,SAAS,GAAG,CAAzB,IAA8BhB,KAAlC,EAAyC;MACvC;MACA;MACA,OAAO,KAAP;IACD,CAZG,CAcJ;;;IACA,IAAIiB,UAAU,GAAGD,SAAS,GAAG,CAA7B;;IACA,OAAOC,UAAU,GAAG,CAAb,IAAkB,KAAKb,OAAL,CAAaa,UAAU,GAAG,CAA1B,IAA+BjB,KAAxD,EAA+D;MAC7DiB,UAAU,IAAI,CAAd;IACD;;IAED,MAAMC,QAAQ,GAAG,KAAKd,OAAL,CAAaY,SAAS,GAAG,CAAzB,IAA8B,KAAKZ,OAAL,CAAaa,UAAU,GAAG,CAA1B,CAA/C,CApBI,CAqBJ;IACA;IACA;;IACA,IAAIC,QAAQ,GAAG,OAAO,EAAtB,EAA0B;MACxB,OAAO,KAAP;IACD;;IAED,MAAMC,EAAE,GAAG,KAAKf,OAAL,CAAaY,SAAb,IAA0B,KAAKZ,OAAL,CAAaa,UAAb,CAArC;IACA,MAAMG,EAAE,GAAG,KAAKhB,OAAL,CAAaY,SAAS,GAAG,CAAzB,IAA8B,KAAKZ,OAAL,CAAaa,UAAU,GAAG,CAA1B,CAAzC;IACA,KAAKZ,MAAL,GAAcgB,IAAI,CAACC,KAAL,CAAWF,EAAX,EAAeD,EAAf,CAAd;IACA,KAAKb,gBAAL,GAAwBe,IAAI,CAACE,IAAL,CAAUJ,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,IAA+BF,QAAvD;IACA,OAAO,KAAKZ,gBAAL,GAAwB,KAAKJ,YAApC;EACD;EAED;AACF;AACA;;;EACEsB,WAAW,GAAG;IACZ,OAAO,CAAC,KAAKtB,YAAL,GAAoB,KAAKI,gBAA1B,IAA8C,KAAKL,MAA1D;EACD;EAED;AACF;AACA;;;EACEwB,QAAQ,GAAG;IACT,OAAO,KAAKpB,MAAZ;EACD;;AAhHW;;AAmHd,eAAeT,OAAf"},"metadata":{},"sourceType":"module"}