{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('ol/control/Control'), require('ol/Observable'), require('ol/layer/Group')) : typeof define === 'function' && define.amd ? define(['ol/control/Control', 'ol/Observable', 'ol/layer/Group'], factory) : global.LayerSwitcher = factory(global.ol.control.Control, global.ol.Observable, global.ol.layer.Group);\n})(this, function (Control, ol_Observable, LayerGroup) {\n  'use strict';\n\n  Control = 'default' in Control ? Control['default'] : Control;\n  LayerGroup = 'default' in LayerGroup ? LayerGroup['default'] : LayerGroup;\n  /**\n   * @protected\n   */\n\n  const CSS_PREFIX = 'layer-switcher-';\n  /**\n   * OpenLayers LayerSwitcher Control, displays a list of layers and groups\n   * associated with a map which have a `title` property.\n   *\n   * To be shown in the LayerSwitcher panel layers must have a `title` property;\n   * base map layers should have a `type` property set to `base`. Group layers\n   * (`LayerGroup`) can be used to visually group layers together; a group\n   * with a `fold` property set to either `'open'` or `'close'` will be displayed\n   * with a toggle.\n   *\n   * See [BaseLayerOptions](#baselayeroptions) for a full list of LayerSwitcher\n   * properties for layers (`TileLayer`, `ImageLayer`, `VectorTile` etc.) and\n   * [GroupLayerOptions](#grouplayeroptions) for group layer (`LayerGroup`)\n   * LayerSwitcher properties.\n   *\n   * Layer and group properties can either be set by adding extra properties\n   * to their options when they are created or via their set method.\n   *\n   * Specify a `title` for a Layer by adding a `title` property to it's options object:\n   * ```javascript\n   * var lyr = new ol.layer.Tile({\n   *   // Specify a title property which will be displayed by the layer switcher\n   *   title: 'OpenStreetMap',\n   *   visible: true,\n   *   source: new ol.source.OSM()\n   * })\n   * ```\n   *\n   * Alternatively the properties can be set via the `set` method after a layer has been created:\n   * ```javascript\n   * var lyr = new ol.layer.Tile({\n   *   visible: true,\n   *   source: new ol.source.OSM()\n   * })\n   * // Specify a title property which will be displayed by the layer switcher\n   * lyr.set('title', 'OpenStreetMap');\n   * ```\n   *\n   * To create a LayerSwitcher and add it to a map, create a new instance then pass it to the map's [`addControl` method](https://openlayers.org/en/latest/apidoc/module-ol_PluggableMap-PluggableMap.html#addControl).\n   * ```javascript\n   * var layerSwitcher = new LayerSwitcher({\n   *   reverse: true,\n   *   groupSelectStyle: 'group'\n   * });\n   * map.addControl(layerSwitcher);\n   * ```\n   *\n   * @constructor\n   * @extends {ol/control/Control~Control}\n   * @param opt_options LayerSwitcher options, see  [LayerSwitcher Options](#options) and [RenderOptions](#renderoptions) which LayerSwitcher `Options` extends for more details.\n   */\n\n  class LayerSwitcher extends Control {\n    constructor(opt_options) {\n      const options = Object.assign({}, opt_options);\n      const element = document.createElement('div');\n      super({\n        element: element,\n        target: options.target\n      });\n      this.activationMode = options.activationMode || 'mouseover';\n      this.startActive = options.startActive === true; // TODO Next: Rename to showButtonContent\n\n      this.label = options.label !== undefined ? options.label : ''; // TODO Next: Rename to hideButtonContent\n\n      this.collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB'; // TODO Next: Rename to showButtonTitle\n\n      this.tipLabel = options.tipLabel ? options.tipLabel : 'Legend'; // TODO Next: Rename to hideButtonTitle\n\n      this.collapseTipLabel = options.collapseTipLabel ? options.collapseTipLabel : 'Collapse legend';\n      this.groupSelectStyle = LayerSwitcher.getGroupSelectStyle(options.groupSelectStyle);\n      this.reverse = options.reverse !== false;\n      this.mapListeners = [];\n      this.hiddenClassName = 'ol-unselectable ol-control layer-switcher';\n\n      if (LayerSwitcher.isTouchDevice_()) {\n        this.hiddenClassName += ' touch';\n      }\n\n      this.shownClassName = 'shown';\n      element.className = this.hiddenClassName;\n      this.button = document.createElement('button');\n      element.appendChild(this.button);\n      this.panel = document.createElement('div');\n      this.panel.className = 'panel';\n      element.appendChild(this.panel);\n      LayerSwitcher.enableTouchScroll_(this.panel);\n      element.classList.add(CSS_PREFIX + 'group-select-style-' + this.groupSelectStyle);\n      element.classList.add(CSS_PREFIX + 'activation-mode-' + this.activationMode);\n\n      if (this.activationMode === 'click') {\n        // TODO Next: Remove in favour of layer-switcher-activation-mode-click\n        element.classList.add('activationModeClick');\n\n        this.button.onclick = e => {\n          const evt = e || window.event;\n\n          if (this.element.classList.contains(this.shownClassName)) {\n            this.hidePanel();\n          } else {\n            this.showPanel();\n          }\n\n          evt.preventDefault();\n        };\n      } else {\n        this.button.onmouseover = () => {\n          this.showPanel();\n        };\n\n        this.button.onclick = e => {\n          const evt = e || window.event;\n          this.showPanel();\n          evt.preventDefault();\n        };\n\n        this.panel.onmouseout = evt => {\n          if (!this.panel.contains(evt.relatedTarget)) {\n            this.hidePanel();\n          }\n        };\n      }\n\n      this.updateButton();\n    }\n    /**\n     * Set the map instance the control is associated with.\n     * @param map The map instance.\n     */\n\n\n    setMap(map) {\n      // Clean up listeners associated with the previous map\n      for (let i = 0; i < this.mapListeners.length; i++) {\n        ol_Observable.unByKey(this.mapListeners[i]);\n      }\n\n      this.mapListeners.length = 0; // Wire up listeners etc. and store reference to new map\n\n      super.setMap(map);\n\n      if (map) {\n        if (this.startActive) {\n          this.showPanel();\n        } else {\n          this.renderPanel();\n        }\n\n        if (this.activationMode !== 'click') {\n          this.mapListeners.push(map.on('pointerdown', () => {\n            this.hidePanel();\n          }));\n        }\n      }\n    }\n    /**\n     * Show the layer panel. Fires `'show'` event.\n     * @fires LayerSwitcher#show\n     */\n\n\n    showPanel() {\n      if (!this.element.classList.contains(this.shownClassName)) {\n        this.element.classList.add(this.shownClassName);\n        this.updateButton();\n        this.renderPanel();\n      }\n      /**\n       * Event triggered after the panel has been shown.\n       * Listen to the event via the `on` or `once` methods; for example:\n       * ```js\n       * var layerSwitcher = new LayerSwitcher();\n       * map.addControl(layerSwitcher);\n       *\n       * layerSwitcher.on('show', evt => {\n       *   console.log('show', evt);\n       * });\n       * @event LayerSwitcher#show\n       */\n\n\n      this.dispatchEvent('show');\n    }\n    /**\n     * Hide the layer panel. Fires `'hide'` event.\n     * @fires LayerSwitcher#hide\n     */\n\n\n    hidePanel() {\n      if (this.element.classList.contains(this.shownClassName)) {\n        this.element.classList.remove(this.shownClassName);\n        this.updateButton();\n      }\n      /**\n       * Event triggered after the panel has been hidden.\n       * @event LayerSwitcher#hide\n       */\n\n\n      this.dispatchEvent('hide');\n    }\n    /**\n     * Update button text content and attributes based on current\n     * state\n     */\n\n\n    updateButton() {\n      if (this.element.classList.contains(this.shownClassName)) {\n        this.button.textContent = this.collapseLabel;\n        this.button.setAttribute('title', this.collapseTipLabel);\n        this.button.setAttribute('aria-label', this.collapseTipLabel);\n      } else {\n        this.button.textContent = this.label;\n        this.button.setAttribute('title', this.tipLabel);\n        this.button.setAttribute('aria-label', this.tipLabel);\n      }\n    }\n    /**\n     * Re-draw the layer panel to represent the current state of the layers.\n     */\n\n\n    renderPanel() {\n      this.dispatchEvent('render');\n      LayerSwitcher.renderPanel(this.getMap(), this.panel, {\n        groupSelectStyle: this.groupSelectStyle,\n        reverse: this.reverse\n      });\n      this.dispatchEvent('rendercomplete');\n    }\n    /**\n     * **_[static]_** - Re-draw the layer panel to represent the current state of the layers.\n     * @param map The OpenLayers Map instance to render layers for\n     * @param panel The DOM Element into which the layer tree will be rendered\n     * @param options Options for panel, group, and layers\n     */\n\n\n    static renderPanel(map, panel, options) {\n      // Create the event.\n      const render_event = new Event('render'); // Dispatch the event.\n\n      panel.dispatchEvent(render_event);\n      options = options || {};\n      options.groupSelectStyle = LayerSwitcher.getGroupSelectStyle(options.groupSelectStyle);\n      LayerSwitcher.ensureTopVisibleBaseLayerShown(map, options.groupSelectStyle);\n\n      while (panel.firstChild) {\n        panel.removeChild(panel.firstChild);\n      } // Reset indeterminate state for all layers and groups before\n      // applying based on groupSelectStyle\n\n\n      LayerSwitcher.forEachRecursive(map, function (l, _idx, _a) {\n        l.set('indeterminate', false);\n      });\n\n      if (options.groupSelectStyle === 'children' || options.groupSelectStyle === 'none') {\n        // Set visibile and indeterminate state of groups based on\n        // their children's visibility\n        LayerSwitcher.setGroupVisibility(map);\n      } else if (options.groupSelectStyle === 'group') {\n        // Set child indetermiate state based on their parent's visibility\n        LayerSwitcher.setChildVisibility(map);\n      }\n\n      const ul = document.createElement('ul');\n      panel.appendChild(ul); // passing two map arguments instead of lyr as we're passing the map as the root of the layers tree\n\n      LayerSwitcher.renderLayers_(map, map, ul, options, function render(_changedLyr) {\n        LayerSwitcher.renderPanel(map, panel, options);\n      }); // Create the event.\n\n      const rendercomplete_event = new Event('rendercomplete'); // Dispatch the event.\n\n      panel.dispatchEvent(rendercomplete_event);\n    }\n    /**\n     * **_[static]_** - Determine if a given layer group contains base layers\n     * @param grp Group to test\n     */\n\n\n    static isBaseGroup(grp) {\n      if (grp instanceof LayerGroup) {\n        const lyrs = grp.getLayers().getArray();\n        return lyrs.length && lyrs[0].get('type') === 'base';\n      } else {\n        return false;\n      }\n    }\n\n    static setGroupVisibility(map) {\n      // Get a list of groups, with the deepest first\n      const groups = LayerSwitcher.getGroupsAndLayers(map, function (l) {\n        return l instanceof LayerGroup && !l.get('combine') && !LayerSwitcher.isBaseGroup(l);\n      }).reverse(); // console.log(groups.map(g => g.get('title')));\n\n      groups.forEach(function (grp) {\n        // TODO Can we use getLayersArray, is it public in the esm build?\n        const descendantVisibility = grp.getLayersArray().map(function (l) {\n          const state = l.getVisible(); // console.log('>', l.get('title'), state);\n\n          return state;\n        }); // console.log(descendantVisibility);\n\n        if (descendantVisibility.every(function (v) {\n          return v === true;\n        })) {\n          grp.setVisible(true);\n          grp.set('indeterminate', false);\n        } else if (descendantVisibility.every(function (v) {\n          return v === false;\n        })) {\n          grp.setVisible(false);\n          grp.set('indeterminate', false);\n        } else {\n          grp.setVisible(true);\n          grp.set('indeterminate', true);\n        }\n      });\n    }\n\n    static setChildVisibility(map) {\n      // console.log('setChildVisibility');\n      const groups = LayerSwitcher.getGroupsAndLayers(map, function (l) {\n        return l instanceof LayerGroup && !l.get('combine') && !LayerSwitcher.isBaseGroup(l);\n      });\n      groups.forEach(function (grp) {\n        const group = grp; // console.log(group.get('title'));\n\n        const groupVisible = group.getVisible();\n        const groupIndeterminate = group.get('indeterminate');\n        group.getLayers().getArray().forEach(function (l) {\n          l.set('indeterminate', false);\n\n          if ((!groupVisible || groupIndeterminate) && l.getVisible()) {\n            l.set('indeterminate', true);\n          }\n        });\n      });\n    }\n    /**\n     * Ensure only the top-most base layer is visible if more than one is visible.\n     * @param map The map instance.\n     * @param groupSelectStyle\n     * @protected\n     */\n\n\n    static ensureTopVisibleBaseLayerShown(map, groupSelectStyle) {\n      let lastVisibleBaseLyr;\n      LayerSwitcher.forEachRecursive(map, function (lyr, _idx, _arr) {\n        if (lyr.get('type') === 'base' && lyr.getVisible()) {\n          lastVisibleBaseLyr = lyr;\n        }\n      });\n      if (lastVisibleBaseLyr) LayerSwitcher.setVisible_(map, lastVisibleBaseLyr, true, groupSelectStyle);\n    }\n    /**\n     * **_[static]_** - Get an Array of all layers and groups displayed by the LayerSwitcher (has a `'title'` property)\n     * contained by the specified map or layer group; optionally filtering via `filterFn`\n     * @param grp The map or layer group for which layers are found.\n     * @param filterFn Optional function used to filter the returned layers\n     */\n\n\n    static getGroupsAndLayers(grp, filterFn) {\n      const layers = [];\n\n      filterFn = filterFn || function (_lyr, _idx, _arr) {\n        return true;\n      };\n\n      LayerSwitcher.forEachRecursive(grp, function (lyr, idx, arr) {\n        if (lyr.get('title')) {\n          if (filterFn(lyr, idx, arr)) {\n            layers.push(lyr);\n          }\n        }\n      });\n      return layers;\n    }\n    /**\n     * Toggle the visible state of a layer.\n     * Takes care of hiding other layers in the same exclusive group if the layer\n     * is toggle to visible.\n     * @protected\n     * @param map The map instance.\n     * @param lyr layer whose visibility will be toggled.\n     * @param visible Set whether the layer is shown\n     * @param groupSelectStyle\n     * @protected\n     */\n\n\n    static setVisible_(map, lyr, visible, groupSelectStyle) {\n      // console.log(lyr.get('title'), visible, groupSelectStyle);\n      lyr.setVisible(visible);\n\n      if (visible && lyr.get('type') === 'base') {\n        // Hide all other base layers regardless of grouping\n        LayerSwitcher.forEachRecursive(map, function (l, _idx, _arr) {\n          if (l != lyr && l.get('type') === 'base') {\n            l.setVisible(false);\n          }\n        });\n      }\n\n      if (lyr instanceof LayerGroup && !lyr.get('combine') && groupSelectStyle === 'children') {\n        lyr.getLayers().forEach(l => {\n          LayerSwitcher.setVisible_(map, l, lyr.getVisible(), groupSelectStyle);\n        });\n      }\n    }\n    /**\n     * Render all layers that are children of a group.\n     * @param map The map instance.\n     * @param lyr Layer to be rendered (should have a title property).\n     * @param idx Position in parent group list.\n     * @param options Options for groups and layers\n     * @protected\n     */\n\n\n    static renderLayer_(map, lyr, idx, options, render) {\n      const li = document.createElement('li');\n      const lyrTitle = lyr.get('title');\n      const checkboxId = LayerSwitcher.uuid();\n      const label = document.createElement('label');\n\n      if (lyr instanceof LayerGroup && !lyr.get('combine')) {\n        const isBaseGroup = LayerSwitcher.isBaseGroup(lyr);\n        li.classList.add('group');\n\n        if (isBaseGroup) {\n          li.classList.add(CSS_PREFIX + 'base-group');\n        } // Group folding\n\n\n        if (lyr.get('fold')) {\n          li.classList.add(CSS_PREFIX + 'fold');\n          li.classList.add(CSS_PREFIX + lyr.get('fold'));\n          const btn = document.createElement('button');\n\n          btn.onclick = function (e) {\n            const evt = e || window.event;\n            LayerSwitcher.toggleFold_(lyr, li);\n            evt.preventDefault();\n          };\n\n          li.appendChild(btn);\n        }\n\n        if (!isBaseGroup && options.groupSelectStyle != 'none') {\n          const input = document.createElement('input');\n          input.type = 'checkbox';\n          input.id = checkboxId;\n          input.checked = lyr.getVisible();\n          input.indeterminate = lyr.get('indeterminate');\n\n          input.onchange = function (e) {\n            const target = e.target;\n            LayerSwitcher.setVisible_(map, lyr, target.checked, options.groupSelectStyle);\n            render(lyr);\n          };\n\n          li.appendChild(input);\n          label.htmlFor = checkboxId;\n        }\n\n        label.innerHTML = lyrTitle;\n        li.appendChild(label);\n        const ul = document.createElement('ul');\n        li.appendChild(ul);\n        LayerSwitcher.renderLayers_(map, lyr, ul, options, render);\n      } else {\n        li.className = 'layer';\n        const input = document.createElement('input');\n\n        if (lyr.get('type') === 'base') {\n          input.type = 'radio';\n        } else {\n          input.type = 'checkbox';\n        }\n\n        input.id = checkboxId;\n        input.checked = lyr.get('visible');\n        input.indeterminate = lyr.get('indeterminate');\n\n        input.onchange = function (e) {\n          const target = e.target;\n          LayerSwitcher.setVisible_(map, lyr, target.checked, options.groupSelectStyle);\n          render(lyr);\n        };\n\n        li.appendChild(input);\n        label.htmlFor = checkboxId;\n        label.innerHTML = lyrTitle;\n        const rsl = map.getView().getResolution();\n\n        if (rsl >= lyr.getMaxResolution() || rsl < lyr.getMinResolution()) {\n          label.className += ' disabled';\n        } else if (lyr.getMinZoom && lyr.getMaxZoom) {\n          const zoom = map.getView().getZoom();\n\n          if (zoom <= lyr.getMinZoom() || zoom > lyr.getMaxZoom()) {\n            label.className += ' disabled';\n          }\n        }\n\n        li.appendChild(label);\n      }\n\n      return li;\n    }\n    /**\n     * Render all layers that are children of a group.\n     * @param map The map instance.\n     * @param lyr Group layer whose children will be rendered.\n     * @param elm DOM element that children will be appended to.\n     * @param options Options for groups and layers\n     * @protected\n     */\n\n\n    static renderLayers_(map, lyr, elm, options, render) {\n      let lyrs = lyr.getLayers().getArray().slice();\n      if (options.reverse) lyrs = lyrs.reverse();\n\n      for (let i = 0, l; i < lyrs.length; i++) {\n        l = lyrs[i];\n\n        if (l.get('title')) {\n          elm.appendChild(LayerSwitcher.renderLayer_(map, l, i, options, render));\n        }\n      }\n    }\n    /**\n     * **_[static]_** - Call the supplied function for each layer in the passed layer group\n     * recursing nested groups.\n     * @param lyr The layer group to start iterating from.\n     * @param fn Callback which will be called for each layer\n     * found under `lyr`.\n     */\n\n\n    static forEachRecursive(lyr, fn) {\n      lyr.getLayers().forEach(function (lyr, idx, a) {\n        fn(lyr, idx, a);\n\n        if (lyr instanceof LayerGroup) {\n          LayerSwitcher.forEachRecursive(lyr, fn);\n        }\n      });\n    }\n    /**\n     * **_[static]_** - Generate a UUID\n     * Adapted from http://stackoverflow.com/a/2117523/526860\n     * @returns {String} UUID\n     */\n\n\n    static uuid() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        const r = Math.random() * 16 | 0,\n              v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n      });\n    }\n    /**\n     * Apply workaround to enable scrolling of overflowing content within an\n     * element. Adapted from https://gist.github.com/chrismbarr/4107472\n     * @param elm Element on which to enable touch scrolling\n     * @protected\n     */\n\n\n    static enableTouchScroll_(elm) {\n      if (LayerSwitcher.isTouchDevice_()) {\n        let scrollStartPos = 0;\n        elm.addEventListener('touchstart', function (event) {\n          scrollStartPos = this.scrollTop + event.touches[0].pageY;\n        }, false);\n        elm.addEventListener('touchmove', function (event) {\n          this.scrollTop = scrollStartPos - event.touches[0].pageY;\n        }, false);\n      }\n    }\n    /**\n     * Determine if the current browser supports touch events. Adapted from\n     * https://gist.github.com/chrismbarr/4107472\n     * @returns {Boolean} True if client can have 'TouchEvent' event\n     * @protected\n     */\n\n\n    static isTouchDevice_() {\n      try {\n        document.createEvent('TouchEvent');\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n    /**\n     * Fold/unfold layer group\n     * @param lyr Layer group to fold/unfold\n     * @param li List item containing layer group\n     * @protected\n     */\n\n\n    static toggleFold_(lyr, li) {\n      li.classList.remove(CSS_PREFIX + lyr.get('fold'));\n      lyr.set('fold', lyr.get('fold') === 'open' ? 'close' : 'open');\n      li.classList.add(CSS_PREFIX + lyr.get('fold'));\n    }\n    /**\n     * If a valid groupSelectStyle value is not provided then return the default\n     * @param groupSelectStyle The string to check for validity\n     * @returns The value groupSelectStyle, if valid, the default otherwise\n     * @protected\n     */\n\n\n    static getGroupSelectStyle(groupSelectStyle) {\n      return ['none', 'children', 'group'].indexOf(groupSelectStyle) >= 0 ? groupSelectStyle : 'children';\n    }\n\n  } // Expose LayerSwitcher as ol.control.LayerSwitcher if using a full build of\n  // OpenLayers\n\n\n  if (window['ol'] && window['ol']['control']) {\n    window['ol']['control']['LayerSwitcher'] = LayerSwitcher;\n  }\n\n  return LayerSwitcher;\n});","map":{"version":3,"names":["global","factory","exports","module","require","define","amd","LayerSwitcher","ol","control","Control","Observable","layer","Group","ol_Observable","LayerGroup","CSS_PREFIX","constructor","opt_options","options","Object","assign","element","document","createElement","target","activationMode","startActive","label","undefined","collapseLabel","tipLabel","collapseTipLabel","groupSelectStyle","getGroupSelectStyle","reverse","mapListeners","hiddenClassName","isTouchDevice_","shownClassName","className","button","appendChild","panel","enableTouchScroll_","classList","add","onclick","e","evt","window","event","contains","hidePanel","showPanel","preventDefault","onmouseover","onmouseout","relatedTarget","updateButton","setMap","map","i","length","unByKey","renderPanel","push","on","dispatchEvent","remove","textContent","setAttribute","getMap","render_event","Event","ensureTopVisibleBaseLayerShown","firstChild","removeChild","forEachRecursive","l","_idx","_a","set","setGroupVisibility","setChildVisibility","ul","renderLayers_","render","_changedLyr","rendercomplete_event","isBaseGroup","grp","lyrs","getLayers","getArray","get","groups","getGroupsAndLayers","forEach","descendantVisibility","getLayersArray","state","getVisible","every","v","setVisible","group","groupVisible","groupIndeterminate","lastVisibleBaseLyr","lyr","_arr","setVisible_","filterFn","layers","_lyr","idx","arr","visible","renderLayer_","li","lyrTitle","checkboxId","uuid","btn","toggleFold_","input","type","id","checked","indeterminate","onchange","htmlFor","innerHTML","rsl","getView","getResolution","getMaxResolution","getMinResolution","getMinZoom","getMaxZoom","zoom","getZoom","elm","slice","fn","a","replace","c","r","Math","random","toString","scrollStartPos","addEventListener","scrollTop","touches","pageY","createEvent","indexOf"],"sources":["D:/Work/Learning/demo/node_modules/ol-layerswitcher/dist/ol-layerswitcher.js"],"sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('ol/control/Control'), require('ol/Observable'), require('ol/layer/Group')) :\n\ttypeof define === 'function' && define.amd ? define(['ol/control/Control', 'ol/Observable', 'ol/layer/Group'], factory) :\n\t(global.LayerSwitcher = factory(global.ol.control.Control,global.ol.Observable,global.ol.layer.Group));\n}(this, (function (Control,ol_Observable,LayerGroup) { 'use strict';\n\nControl = 'default' in Control ? Control['default'] : Control;\nLayerGroup = 'default' in LayerGroup ? LayerGroup['default'] : LayerGroup;\n\n/**\n * @protected\n */\nconst CSS_PREFIX = 'layer-switcher-';\n/**\n * OpenLayers LayerSwitcher Control, displays a list of layers and groups\n * associated with a map which have a `title` property.\n *\n * To be shown in the LayerSwitcher panel layers must have a `title` property;\n * base map layers should have a `type` property set to `base`. Group layers\n * (`LayerGroup`) can be used to visually group layers together; a group\n * with a `fold` property set to either `'open'` or `'close'` will be displayed\n * with a toggle.\n *\n * See [BaseLayerOptions](#baselayeroptions) for a full list of LayerSwitcher\n * properties for layers (`TileLayer`, `ImageLayer`, `VectorTile` etc.) and\n * [GroupLayerOptions](#grouplayeroptions) for group layer (`LayerGroup`)\n * LayerSwitcher properties.\n *\n * Layer and group properties can either be set by adding extra properties\n * to their options when they are created or via their set method.\n *\n * Specify a `title` for a Layer by adding a `title` property to it's options object:\n * ```javascript\n * var lyr = new ol.layer.Tile({\n *   // Specify a title property which will be displayed by the layer switcher\n *   title: 'OpenStreetMap',\n *   visible: true,\n *   source: new ol.source.OSM()\n * })\n * ```\n *\n * Alternatively the properties can be set via the `set` method after a layer has been created:\n * ```javascript\n * var lyr = new ol.layer.Tile({\n *   visible: true,\n *   source: new ol.source.OSM()\n * })\n * // Specify a title property which will be displayed by the layer switcher\n * lyr.set('title', 'OpenStreetMap');\n * ```\n *\n * To create a LayerSwitcher and add it to a map, create a new instance then pass it to the map's [`addControl` method](https://openlayers.org/en/latest/apidoc/module-ol_PluggableMap-PluggableMap.html#addControl).\n * ```javascript\n * var layerSwitcher = new LayerSwitcher({\n *   reverse: true,\n *   groupSelectStyle: 'group'\n * });\n * map.addControl(layerSwitcher);\n * ```\n *\n * @constructor\n * @extends {ol/control/Control~Control}\n * @param opt_options LayerSwitcher options, see  [LayerSwitcher Options](#options) and [RenderOptions](#renderoptions) which LayerSwitcher `Options` extends for more details.\n */\nclass LayerSwitcher extends Control {\n    constructor(opt_options) {\n        const options = Object.assign({}, opt_options);\n        const element = document.createElement('div');\n        super({ element: element, target: options.target });\n        this.activationMode = options.activationMode || 'mouseover';\n        this.startActive = options.startActive === true;\n        // TODO Next: Rename to showButtonContent\n        this.label = options.label !== undefined ? options.label : '';\n        // TODO Next: Rename to hideButtonContent\n        this.collapseLabel =\n            options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB';\n        // TODO Next: Rename to showButtonTitle\n        this.tipLabel = options.tipLabel ? options.tipLabel : 'Legend';\n        // TODO Next: Rename to hideButtonTitle\n        this.collapseTipLabel = options.collapseTipLabel\n            ? options.collapseTipLabel\n            : 'Collapse legend';\n        this.groupSelectStyle = LayerSwitcher.getGroupSelectStyle(options.groupSelectStyle);\n        this.reverse = options.reverse !== false;\n        this.mapListeners = [];\n        this.hiddenClassName = 'ol-unselectable ol-control layer-switcher';\n        if (LayerSwitcher.isTouchDevice_()) {\n            this.hiddenClassName += ' touch';\n        }\n        this.shownClassName = 'shown';\n        element.className = this.hiddenClassName;\n        this.button = document.createElement('button');\n        element.appendChild(this.button);\n        this.panel = document.createElement('div');\n        this.panel.className = 'panel';\n        element.appendChild(this.panel);\n        LayerSwitcher.enableTouchScroll_(this.panel);\n        element.classList.add(CSS_PREFIX + 'group-select-style-' + this.groupSelectStyle);\n        element.classList.add(CSS_PREFIX + 'activation-mode-' + this.activationMode);\n        if (this.activationMode === 'click') {\n            // TODO Next: Remove in favour of layer-switcher-activation-mode-click\n            element.classList.add('activationModeClick');\n            this.button.onclick = (e) => {\n                const evt = e || window.event;\n                if (this.element.classList.contains(this.shownClassName)) {\n                    this.hidePanel();\n                }\n                else {\n                    this.showPanel();\n                }\n                evt.preventDefault();\n            };\n        }\n        else {\n            this.button.onmouseover = () => {\n                this.showPanel();\n            };\n            this.button.onclick = (e) => {\n                const evt = e || window.event;\n                this.showPanel();\n                evt.preventDefault();\n            };\n            this.panel.onmouseout = (evt) => {\n                if (!this.panel.contains(evt.relatedTarget)) {\n                    this.hidePanel();\n                }\n            };\n        }\n        this.updateButton();\n    }\n    /**\n     * Set the map instance the control is associated with.\n     * @param map The map instance.\n     */\n    setMap(map) {\n        // Clean up listeners associated with the previous map\n        for (let i = 0; i < this.mapListeners.length; i++) {\n            ol_Observable.unByKey(this.mapListeners[i]);\n        }\n        this.mapListeners.length = 0;\n        // Wire up listeners etc. and store reference to new map\n        super.setMap(map);\n        if (map) {\n            if (this.startActive) {\n                this.showPanel();\n            }\n            else {\n                this.renderPanel();\n            }\n            if (this.activationMode !== 'click') {\n                this.mapListeners.push(map.on('pointerdown', () => {\n                    this.hidePanel();\n                }));\n            }\n        }\n    }\n    /**\n     * Show the layer panel. Fires `'show'` event.\n     * @fires LayerSwitcher#show\n     */\n    showPanel() {\n        if (!this.element.classList.contains(this.shownClassName)) {\n            this.element.classList.add(this.shownClassName);\n            this.updateButton();\n            this.renderPanel();\n        }\n        /**\n         * Event triggered after the panel has been shown.\n         * Listen to the event via the `on` or `once` methods; for example:\n         * ```js\n         * var layerSwitcher = new LayerSwitcher();\n         * map.addControl(layerSwitcher);\n         *\n         * layerSwitcher.on('show', evt => {\n         *   console.log('show', evt);\n         * });\n         * @event LayerSwitcher#show\n         */\n        this.dispatchEvent('show');\n    }\n    /**\n     * Hide the layer panel. Fires `'hide'` event.\n     * @fires LayerSwitcher#hide\n     */\n    hidePanel() {\n        if (this.element.classList.contains(this.shownClassName)) {\n            this.element.classList.remove(this.shownClassName);\n            this.updateButton();\n        }\n        /**\n         * Event triggered after the panel has been hidden.\n         * @event LayerSwitcher#hide\n         */\n        this.dispatchEvent('hide');\n    }\n    /**\n     * Update button text content and attributes based on current\n     * state\n     */\n    updateButton() {\n        if (this.element.classList.contains(this.shownClassName)) {\n            this.button.textContent = this.collapseLabel;\n            this.button.setAttribute('title', this.collapseTipLabel);\n            this.button.setAttribute('aria-label', this.collapseTipLabel);\n        }\n        else {\n            this.button.textContent = this.label;\n            this.button.setAttribute('title', this.tipLabel);\n            this.button.setAttribute('aria-label', this.tipLabel);\n        }\n    }\n    /**\n     * Re-draw the layer panel to represent the current state of the layers.\n     */\n    renderPanel() {\n        this.dispatchEvent('render');\n        LayerSwitcher.renderPanel(this.getMap(), this.panel, {\n            groupSelectStyle: this.groupSelectStyle,\n            reverse: this.reverse\n        });\n        this.dispatchEvent('rendercomplete');\n    }\n    /**\n     * **_[static]_** - Re-draw the layer panel to represent the current state of the layers.\n     * @param map The OpenLayers Map instance to render layers for\n     * @param panel The DOM Element into which the layer tree will be rendered\n     * @param options Options for panel, group, and layers\n     */\n    static renderPanel(map, panel, options) {\n        // Create the event.\n        const render_event = new Event('render');\n        // Dispatch the event.\n        panel.dispatchEvent(render_event);\n        options = options || {};\n        options.groupSelectStyle = LayerSwitcher.getGroupSelectStyle(options.groupSelectStyle);\n        LayerSwitcher.ensureTopVisibleBaseLayerShown(map, options.groupSelectStyle);\n        while (panel.firstChild) {\n            panel.removeChild(panel.firstChild);\n        }\n        // Reset indeterminate state for all layers and groups before\n        // applying based on groupSelectStyle\n        LayerSwitcher.forEachRecursive(map, function (l, _idx, _a) {\n            l.set('indeterminate', false);\n        });\n        if (options.groupSelectStyle === 'children' ||\n            options.groupSelectStyle === 'none') {\n            // Set visibile and indeterminate state of groups based on\n            // their children's visibility\n            LayerSwitcher.setGroupVisibility(map);\n        }\n        else if (options.groupSelectStyle === 'group') {\n            // Set child indetermiate state based on their parent's visibility\n            LayerSwitcher.setChildVisibility(map);\n        }\n        const ul = document.createElement('ul');\n        panel.appendChild(ul);\n        // passing two map arguments instead of lyr as we're passing the map as the root of the layers tree\n        LayerSwitcher.renderLayers_(map, map, ul, options, function render(_changedLyr) {\n            LayerSwitcher.renderPanel(map, panel, options);\n        });\n        // Create the event.\n        const rendercomplete_event = new Event('rendercomplete');\n        // Dispatch the event.\n        panel.dispatchEvent(rendercomplete_event);\n    }\n    /**\n     * **_[static]_** - Determine if a given layer group contains base layers\n     * @param grp Group to test\n     */\n    static isBaseGroup(grp) {\n        if (grp instanceof LayerGroup) {\n            const lyrs = grp.getLayers().getArray();\n            return lyrs.length && lyrs[0].get('type') === 'base';\n        }\n        else {\n            return false;\n        }\n    }\n    static setGroupVisibility(map) {\n        // Get a list of groups, with the deepest first\n        const groups = LayerSwitcher.getGroupsAndLayers(map, function (l) {\n            return (l instanceof LayerGroup &&\n                !l.get('combine') &&\n                !LayerSwitcher.isBaseGroup(l));\n        }).reverse();\n        // console.log(groups.map(g => g.get('title')));\n        groups.forEach(function (grp) {\n            // TODO Can we use getLayersArray, is it public in the esm build?\n            const descendantVisibility = grp.getLayersArray().map(function (l) {\n                const state = l.getVisible();\n                // console.log('>', l.get('title'), state);\n                return state;\n            });\n            // console.log(descendantVisibility);\n            if (descendantVisibility.every(function (v) {\n                return v === true;\n            })) {\n                grp.setVisible(true);\n                grp.set('indeterminate', false);\n            }\n            else if (descendantVisibility.every(function (v) {\n                return v === false;\n            })) {\n                grp.setVisible(false);\n                grp.set('indeterminate', false);\n            }\n            else {\n                grp.setVisible(true);\n                grp.set('indeterminate', true);\n            }\n        });\n    }\n    static setChildVisibility(map) {\n        // console.log('setChildVisibility');\n        const groups = LayerSwitcher.getGroupsAndLayers(map, function (l) {\n            return (l instanceof LayerGroup &&\n                !l.get('combine') &&\n                !LayerSwitcher.isBaseGroup(l));\n        });\n        groups.forEach(function (grp) {\n            const group = grp;\n            // console.log(group.get('title'));\n            const groupVisible = group.getVisible();\n            const groupIndeterminate = group.get('indeterminate');\n            group\n                .getLayers()\n                .getArray()\n                .forEach(function (l) {\n                l.set('indeterminate', false);\n                if ((!groupVisible || groupIndeterminate) && l.getVisible()) {\n                    l.set('indeterminate', true);\n                }\n            });\n        });\n    }\n    /**\n     * Ensure only the top-most base layer is visible if more than one is visible.\n     * @param map The map instance.\n     * @param groupSelectStyle\n     * @protected\n     */\n    static ensureTopVisibleBaseLayerShown(map, groupSelectStyle) {\n        let lastVisibleBaseLyr;\n        LayerSwitcher.forEachRecursive(map, function (lyr, _idx, _arr) {\n            if (lyr.get('type') === 'base' && lyr.getVisible()) {\n                lastVisibleBaseLyr = lyr;\n            }\n        });\n        if (lastVisibleBaseLyr)\n            LayerSwitcher.setVisible_(map, lastVisibleBaseLyr, true, groupSelectStyle);\n    }\n    /**\n     * **_[static]_** - Get an Array of all layers and groups displayed by the LayerSwitcher (has a `'title'` property)\n     * contained by the specified map or layer group; optionally filtering via `filterFn`\n     * @param grp The map or layer group for which layers are found.\n     * @param filterFn Optional function used to filter the returned layers\n     */\n    static getGroupsAndLayers(grp, filterFn) {\n        const layers = [];\n        filterFn =\n            filterFn ||\n                function (_lyr, _idx, _arr) {\n                    return true;\n                };\n        LayerSwitcher.forEachRecursive(grp, function (lyr, idx, arr) {\n            if (lyr.get('title')) {\n                if (filterFn(lyr, idx, arr)) {\n                    layers.push(lyr);\n                }\n            }\n        });\n        return layers;\n    }\n    /**\n     * Toggle the visible state of a layer.\n     * Takes care of hiding other layers in the same exclusive group if the layer\n     * is toggle to visible.\n     * @protected\n     * @param map The map instance.\n     * @param lyr layer whose visibility will be toggled.\n     * @param visible Set whether the layer is shown\n     * @param groupSelectStyle\n     * @protected\n     */\n    static setVisible_(map, lyr, visible, groupSelectStyle) {\n        // console.log(lyr.get('title'), visible, groupSelectStyle);\n        lyr.setVisible(visible);\n        if (visible && lyr.get('type') === 'base') {\n            // Hide all other base layers regardless of grouping\n            LayerSwitcher.forEachRecursive(map, function (l, _idx, _arr) {\n                if (l != lyr && l.get('type') === 'base') {\n                    l.setVisible(false);\n                }\n            });\n        }\n        if (lyr instanceof LayerGroup &&\n            !lyr.get('combine') &&\n            groupSelectStyle === 'children') {\n            lyr.getLayers().forEach((l) => {\n                LayerSwitcher.setVisible_(map, l, lyr.getVisible(), groupSelectStyle);\n            });\n        }\n    }\n    /**\n     * Render all layers that are children of a group.\n     * @param map The map instance.\n     * @param lyr Layer to be rendered (should have a title property).\n     * @param idx Position in parent group list.\n     * @param options Options for groups and layers\n     * @protected\n     */\n    static renderLayer_(map, lyr, idx, options, render) {\n        const li = document.createElement('li');\n        const lyrTitle = lyr.get('title');\n        const checkboxId = LayerSwitcher.uuid();\n        const label = document.createElement('label');\n        if (lyr instanceof LayerGroup && !lyr.get('combine')) {\n            const isBaseGroup = LayerSwitcher.isBaseGroup(lyr);\n            li.classList.add('group');\n            if (isBaseGroup) {\n                li.classList.add(CSS_PREFIX + 'base-group');\n            }\n            // Group folding\n            if (lyr.get('fold')) {\n                li.classList.add(CSS_PREFIX + 'fold');\n                li.classList.add(CSS_PREFIX + lyr.get('fold'));\n                const btn = document.createElement('button');\n                btn.onclick = function (e) {\n                    const evt = e || window.event;\n                    LayerSwitcher.toggleFold_(lyr, li);\n                    evt.preventDefault();\n                };\n                li.appendChild(btn);\n            }\n            if (!isBaseGroup && options.groupSelectStyle != 'none') {\n                const input = document.createElement('input');\n                input.type = 'checkbox';\n                input.id = checkboxId;\n                input.checked = lyr.getVisible();\n                input.indeterminate = lyr.get('indeterminate');\n                input.onchange = function (e) {\n                    const target = e.target;\n                    LayerSwitcher.setVisible_(map, lyr, target.checked, options.groupSelectStyle);\n                    render(lyr);\n                };\n                li.appendChild(input);\n                label.htmlFor = checkboxId;\n            }\n            label.innerHTML = lyrTitle;\n            li.appendChild(label);\n            const ul = document.createElement('ul');\n            li.appendChild(ul);\n            LayerSwitcher.renderLayers_(map, lyr, ul, options, render);\n        }\n        else {\n            li.className = 'layer';\n            const input = document.createElement('input');\n            if (lyr.get('type') === 'base') {\n                input.type = 'radio';\n            }\n            else {\n                input.type = 'checkbox';\n            }\n            input.id = checkboxId;\n            input.checked = lyr.get('visible');\n            input.indeterminate = lyr.get('indeterminate');\n            input.onchange = function (e) {\n                const target = e.target;\n                LayerSwitcher.setVisible_(map, lyr, target.checked, options.groupSelectStyle);\n                render(lyr);\n            };\n            li.appendChild(input);\n            label.htmlFor = checkboxId;\n            label.innerHTML = lyrTitle;\n            const rsl = map.getView().getResolution();\n            if (rsl >= lyr.getMaxResolution() || rsl < lyr.getMinResolution()) {\n                label.className += ' disabled';\n            }\n            else if (lyr.getMinZoom && lyr.getMaxZoom) {\n                const zoom = map.getView().getZoom();\n                if (zoom <= lyr.getMinZoom() || zoom > lyr.getMaxZoom()) {\n                    label.className += ' disabled';\n                }\n            }\n            li.appendChild(label);\n        }\n        return li;\n    }\n    /**\n     * Render all layers that are children of a group.\n     * @param map The map instance.\n     * @param lyr Group layer whose children will be rendered.\n     * @param elm DOM element that children will be appended to.\n     * @param options Options for groups and layers\n     * @protected\n     */\n    static renderLayers_(map, lyr, elm, options, render) {\n        let lyrs = lyr.getLayers().getArray().slice();\n        if (options.reverse)\n            lyrs = lyrs.reverse();\n        for (let i = 0, l; i < lyrs.length; i++) {\n            l = lyrs[i];\n            if (l.get('title')) {\n                elm.appendChild(LayerSwitcher.renderLayer_(map, l, i, options, render));\n            }\n        }\n    }\n    /**\n     * **_[static]_** - Call the supplied function for each layer in the passed layer group\n     * recursing nested groups.\n     * @param lyr The layer group to start iterating from.\n     * @param fn Callback which will be called for each layer\n     * found under `lyr`.\n     */\n    static forEachRecursive(lyr, fn) {\n        lyr.getLayers().forEach(function (lyr, idx, a) {\n            fn(lyr, idx, a);\n            if (lyr instanceof LayerGroup) {\n                LayerSwitcher.forEachRecursive(lyr, fn);\n            }\n        });\n    }\n    /**\n     * **_[static]_** - Generate a UUID\n     * Adapted from http://stackoverflow.com/a/2117523/526860\n     * @returns {String} UUID\n     */\n    static uuid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }\n    /**\n     * Apply workaround to enable scrolling of overflowing content within an\n     * element. Adapted from https://gist.github.com/chrismbarr/4107472\n     * @param elm Element on which to enable touch scrolling\n     * @protected\n     */\n    static enableTouchScroll_(elm) {\n        if (LayerSwitcher.isTouchDevice_()) {\n            let scrollStartPos = 0;\n            elm.addEventListener('touchstart', function (event) {\n                scrollStartPos = this.scrollTop + event.touches[0].pageY;\n            }, false);\n            elm.addEventListener('touchmove', function (event) {\n                this.scrollTop = scrollStartPos - event.touches[0].pageY;\n            }, false);\n        }\n    }\n    /**\n     * Determine if the current browser supports touch events. Adapted from\n     * https://gist.github.com/chrismbarr/4107472\n     * @returns {Boolean} True if client can have 'TouchEvent' event\n     * @protected\n     */\n    static isTouchDevice_() {\n        try {\n            document.createEvent('TouchEvent');\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    /**\n     * Fold/unfold layer group\n     * @param lyr Layer group to fold/unfold\n     * @param li List item containing layer group\n     * @protected\n     */\n    static toggleFold_(lyr, li) {\n        li.classList.remove(CSS_PREFIX + lyr.get('fold'));\n        lyr.set('fold', lyr.get('fold') === 'open' ? 'close' : 'open');\n        li.classList.add(CSS_PREFIX + lyr.get('fold'));\n    }\n    /**\n     * If a valid groupSelectStyle value is not provided then return the default\n     * @param groupSelectStyle The string to check for validity\n     * @returns The value groupSelectStyle, if valid, the default otherwise\n     * @protected\n     */\n    static getGroupSelectStyle(groupSelectStyle) {\n        return ['none', 'children', 'group'].indexOf(groupSelectStyle) >= 0\n            ? groupSelectStyle\n            : 'children';\n    }\n}\n// Expose LayerSwitcher as ol.control.LayerSwitcher if using a full build of\n// OpenLayers\nif (window['ol'] && window['ol']['control']) {\n    window['ol']['control']['LayerSwitcher'] = LayerSwitcher;\n}\n\nreturn LayerSwitcher;\n\n})));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}