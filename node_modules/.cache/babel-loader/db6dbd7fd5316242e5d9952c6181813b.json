{"ast":null,"code":"/**\n * @module ol/reproj\n */\nimport { containsCoordinate, createEmpty, extend, forEachCorner, getCenter, getHeight, getTopLeft, getWidth } from './extent.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { getPointResolution, transform } from './proj.js';\nimport { solveLinearSystem } from './math.js';\nlet brokenDiagonalRendering_;\n/**\n * @type {Array<HTMLCanvasElement>}\n */\n\nexport const canvasPool = [];\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\n\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\n\n\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return Math.abs(data[offset * 4] - 210) > 2 || Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2;\n}\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\n\n\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    const ctx = document.createElement('canvas').getContext('2d');\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    const data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ = verifyBrokenDiagonalRendering(data, 0) || verifyBrokenDiagonalRendering(data, 4) || verifyBrokenDiagonalRendering(data, 8);\n  }\n\n  return brokenDiagonalRendering_;\n}\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\n\n\nexport function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj); // calculate the ideal resolution of the source data\n\n  let sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\n\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  } // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n\n  const sourceExtent = sourceProj.getExtent();\n\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    const compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) / sourceResolution;\n\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n\n  return sourceResolution;\n}\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\n\nexport function calculateSourceExtentResolution(sourceProj, targetProj, targetExtent, targetResolution) {\n  const targetCenter = getCenter(targetExtent);\n  let sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(sourceProj, targetProj, corner, targetResolution);\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n\n  return sourceResolution;\n}\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"./extent.js\").Extent} extent Extent.\n * @property {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n */\n\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean} [renderEdges] Render reprojection edges.\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\n\nexport function render(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, renderEdges, interpolate) {\n  const context = createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height), canvasPool);\n\n  if (!interpolate) {\n    context.imageSmoothingEnabled = false;\n  }\n\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n\n  context.scale(pixelRatio, pixelRatio);\n\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n\n  context.globalCompositeOperation = 'lighter';\n  const sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n  const canvasWidthInUnits = getWidth(sourceDataExtent);\n  const canvasHeightInUnits = getHeight(sourceDataExtent);\n  const stitchContext = createCanvasContext2D(Math.round(pixelRatio * canvasWidthInUnits / sourceResolution), Math.round(pixelRatio * canvasHeightInUnits / sourceResolution));\n\n  if (!interpolate) {\n    stitchContext.imageSmoothingEnabled = false;\n  }\n\n  const stitchScale = pixelRatio / sourceResolution;\n  sources.forEach(function (src, i, arr) {\n    const xPos = src.extent[0] - sourceDataExtent[0];\n    const yPos = -(src.extent[3] - sourceDataExtent[3]);\n    const srcWidth = getWidth(src.extent);\n    const srcHeight = getHeight(src.extent); // This test should never fail -- but it does. Need to find a fix the upstream condition\n\n    if (src.image.width > 0 && src.image.height > 0) {\n      stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);\n    }\n  });\n  const targetTopLeft = getTopLeft(targetExtent);\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */\n    const source = triangle.source;\n    const target = triangle.target;\n    let x0 = source[0][0],\n        y0 = source[0][1];\n    let x1 = source[1][0],\n        y1 = source[1][1];\n    let x2 = source[2][0],\n        y2 = source[2][1]; // Make sure that everything is on pixel boundaries\n\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    const v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    const v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    const v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution); // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n\n    const sourceNumericalShiftX = x0;\n    const sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n    const augmentedMatrix = [[x1, y1, 0, 0, u1 - u0], [x2, y2, 0, 0, u2 - u0], [0, 0, x1, y1, v1 - v0], [0, 0, x2, y2, v2 - v0]];\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\n\n    if (!affineCoefs) {\n      return;\n    }\n\n    context.save();\n    context.beginPath();\n\n    if (isBrokenDiagonalRendering() || !interpolate) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1); // This is the diagonal line. Do it in 4 steps\n\n      const steps = 4;\n      const ud = u0 - u1;\n      const vd = v0 - v1;\n\n      for (let step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound(step * vd / (steps - 1))); // Go vertically\n\n        if (step != steps - 1) {\n          context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound((step + 1) * vd / (steps - 1)));\n        }\n      } // We are almost at u0r, v0r\n\n\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n\n    context.clip();\n    context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);\n    context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);\n    context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);\n    context.drawImage(stitchContext.canvas, 0, 0);\n    context.restore();\n  });\n\n  if (renderEdges) {\n    context.save();\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      const target = triangle.target;\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n    context.restore();\n  }\n\n  return context.canvas;\n}","map":{"version":3,"names":["containsCoordinate","createEmpty","extend","forEachCorner","getCenter","getHeight","getTopLeft","getWidth","createCanvasContext2D","getPointResolution","transform","solveLinearSystem","brokenDiagonalRendering_","canvasPool","drawTestTriangle","ctx","u1","v1","u2","v2","beginPath","moveTo","lineTo","closePath","save","clip","fillRect","Math","max","restore","verifyBrokenDiagonalRendering","data","offset","abs","isBrokenDiagonalRendering","undefined","document","createElement","getContext","globalCompositeOperation","fillStyle","getImageData","calculateSourceResolution","sourceProj","targetProj","targetCenter","targetResolution","sourceCenter","sourceResolution","targetMetersPerUnit","getMetersPerUnit","sourceMetersPerUnit","sourceExtent","getExtent","compensationFactor","isFinite","calculateSourceExtentResolution","targetExtent","corner","render","width","height","pixelRatio","triangulation","sources","gutter","renderEdges","interpolate","context","round","imageSmoothingEnabled","length","canvas","scale","pixelRound","value","sourceDataExtent","forEach","src","i","arr","extent","canvasWidthInUnits","canvasHeightInUnits","stitchContext","stitchScale","xPos","yPos","srcWidth","srcHeight","image","drawImage","targetTopLeft","getTriangles","triangle","source","target","x0","y0","x1","y1","x2","y2","u0","v0","sourceNumericalShiftX","sourceNumericalShiftY","augmentedMatrix","affineCoefs","steps","ud","vd","step","translate","strokeStyle","lineWidth","stroke"],"sources":["D:/Work/Learning/demo/node_modules/ol/reproj.js"],"sourcesContent":["/**\n * @module ol/reproj\n */\nimport {\n  containsCoordinate,\n  createEmpty,\n  extend,\n  forEachCorner,\n  getCenter,\n  getHeight,\n  getTopLeft,\n  getWidth,\n} from './extent.js';\nimport {createCanvasContext2D} from './dom.js';\nimport {getPointResolution, transform} from './proj.js';\nimport {solveLinearSystem} from './math.js';\n\nlet brokenDiagonalRendering_;\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return (\n    Math.abs(data[offset * 4] - 210) > 2 ||\n    Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2\n  );\n}\n\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    const ctx = document.createElement('canvas').getContext('2d');\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    const data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ =\n      verifyBrokenDiagonalRendering(data, 0) ||\n      verifyBrokenDiagonalRendering(data, 4) ||\n      verifyBrokenDiagonalRendering(data, 8);\n  }\n\n  return brokenDiagonalRendering_;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceResolution(\n  sourceProj,\n  targetProj,\n  targetCenter,\n  targetResolution\n) {\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\n\n  // calculate the ideal resolution of the source data\n  let sourceResolution = getPointResolution(\n    targetProj,\n    targetResolution,\n    targetCenter\n  );\n\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  }\n\n  // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n  const sourceExtent = sourceProj.getExtent();\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    const compensationFactor =\n      getPointResolution(sourceProj, sourceResolution, sourceCenter) /\n      sourceResolution;\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n\n  return sourceResolution;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceExtentResolution(\n  sourceProj,\n  targetProj,\n  targetExtent,\n  targetResolution\n) {\n  const targetCenter = getCenter(targetExtent);\n  let sourceResolution = calculateSourceResolution(\n    sourceProj,\n    targetProj,\n    targetCenter,\n    targetResolution\n  );\n\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(\n        sourceProj,\n        targetProj,\n        corner,\n        targetResolution\n      );\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n\n  return sourceResolution;\n}\n\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"./extent.js\").Extent} extent Extent.\n * @property {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n */\n\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean} [renderEdges] Render reprojection edges.\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\nexport function render(\n  width,\n  height,\n  pixelRatio,\n  sourceResolution,\n  sourceExtent,\n  targetResolution,\n  targetExtent,\n  triangulation,\n  sources,\n  gutter,\n  renderEdges,\n  interpolate\n) {\n  const context = createCanvasContext2D(\n    Math.round(pixelRatio * width),\n    Math.round(pixelRatio * height),\n    canvasPool\n  );\n\n  if (!interpolate) {\n    context.imageSmoothingEnabled = false;\n  }\n\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n\n  context.scale(pixelRatio, pixelRatio);\n\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n\n  context.globalCompositeOperation = 'lighter';\n\n  const sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n\n  const canvasWidthInUnits = getWidth(sourceDataExtent);\n  const canvasHeightInUnits = getHeight(sourceDataExtent);\n  const stitchContext = createCanvasContext2D(\n    Math.round((pixelRatio * canvasWidthInUnits) / sourceResolution),\n    Math.round((pixelRatio * canvasHeightInUnits) / sourceResolution)\n  );\n\n  if (!interpolate) {\n    stitchContext.imageSmoothingEnabled = false;\n  }\n\n  const stitchScale = pixelRatio / sourceResolution;\n\n  sources.forEach(function (src, i, arr) {\n    const xPos = src.extent[0] - sourceDataExtent[0];\n    const yPos = -(src.extent[3] - sourceDataExtent[3]);\n    const srcWidth = getWidth(src.extent);\n    const srcHeight = getHeight(src.extent);\n\n    // This test should never fail -- but it does. Need to find a fix the upstream condition\n    if (src.image.width > 0 && src.image.height > 0) {\n      stitchContext.drawImage(\n        src.image,\n        gutter,\n        gutter,\n        src.image.width - 2 * gutter,\n        src.image.height - 2 * gutter,\n        xPos * stitchScale,\n        yPos * stitchScale,\n        srcWidth * stitchScale,\n        srcHeight * stitchScale\n      );\n    }\n  });\n\n  const targetTopLeft = getTopLeft(targetExtent);\n\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */\n    const source = triangle.source;\n    const target = triangle.target;\n    let x0 = source[0][0],\n      y0 = source[0][1];\n    let x1 = source[1][0],\n      y1 = source[1][1];\n    let x2 = source[2][0],\n      y2 = source[2][1];\n    // Make sure that everything is on pixel boundaries\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    const v0 = pixelRound(\n      -(target[0][1] - targetTopLeft[1]) / targetResolution\n    );\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    const v1 = pixelRound(\n      -(target[1][1] - targetTopLeft[1]) / targetResolution\n    );\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    const v2 = pixelRound(\n      -(target[2][1] - targetTopLeft[1]) / targetResolution\n    );\n\n    // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n    const sourceNumericalShiftX = x0;\n    const sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n\n    const augmentedMatrix = [\n      [x1, y1, 0, 0, u1 - u0],\n      [x2, y2, 0, 0, u2 - u0],\n      [0, 0, x1, y1, v1 - v0],\n      [0, 0, x2, y2, v2 - v0],\n    ];\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\n    if (!affineCoefs) {\n      return;\n    }\n\n    context.save();\n    context.beginPath();\n\n    if (isBrokenDiagonalRendering() || !interpolate) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1);\n      // This is the diagonal line. Do it in 4 steps\n      const steps = 4;\n      const ud = u0 - u1;\n      const vd = v0 - v1;\n      for (let step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(\n          u1 + pixelRound(((step + 1) * ud) / steps),\n          v1 + pixelRound((step * vd) / (steps - 1))\n        );\n        // Go vertically\n        if (step != steps - 1) {\n          context.lineTo(\n            u1 + pixelRound(((step + 1) * ud) / steps),\n            v1 + pixelRound(((step + 1) * vd) / (steps - 1))\n          );\n        }\n      }\n      // We are almost at u0r, v0r\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n\n    context.clip();\n\n    context.transform(\n      affineCoefs[0],\n      affineCoefs[2],\n      affineCoefs[1],\n      affineCoefs[3],\n      u0,\n      v0\n    );\n\n    context.translate(\n      sourceDataExtent[0] - sourceNumericalShiftX,\n      sourceDataExtent[3] - sourceNumericalShiftY\n    );\n\n    context.scale(\n      sourceResolution / pixelRatio,\n      -sourceResolution / pixelRatio\n    );\n\n    context.drawImage(stitchContext.canvas, 0, 0);\n    context.restore();\n  });\n\n  if (renderEdges) {\n    context.save();\n\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      const target = triangle.target;\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n\n    context.restore();\n  }\n  return context.canvas;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}