{"ast":null,"code":"/**\n * @module ol/source/UrlTile\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileState from '../TileState.js';\nimport { createFromTemplates, expandUrl } from '../tileurlfunction.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Cache size.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\n\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    });\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.generateTileUrlFunction_ = this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n\n\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n\n\n    this.tileLoadingKeys_ = {};\n  }\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n\n\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n\n\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;\n  }\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n\n\n  getUrls() {\n    return this.urls;\n  }\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n\n\n  handleTileChange(event) {\n    const tile =\n    /** @type {import(\"../Tile.js\").default} */\n    event.target;\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED ? TileEventType.TILELOADEND : undefined;\n    }\n\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n\n\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n\n\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n\n\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n\n\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n\n\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n\n\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n\n}\n\nexport default UrlTile;","map":{"version":3,"names":["TileEventType","TileSource","TileSourceEvent","TileState","createFromTemplates","expandUrl","getKeyZXY","getUid","UrlTile","constructor","options","attributions","cacheSize","opaque","projection","state","tileGrid","tilePixelRatio","wrapX","transition","interpolate","key","attributionsCollapsible","zDirection","generateTileUrlFunction_","tileUrlFunction","prototype","tileLoadFunction","urls","setUrls","url","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","Object","getPrototypeOf","bind","getUrls","handleTileChange","event","tile","target","uid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","TILELOADEND","undefined","dispatchEvent","setTileLoadFunction","tileCache","clear","changed","setTileUrlFunction","pruneExceptNewestZ","setKey","join","tileCoord","pixelRatio","useTile","z","x","y","tileCoordKey","containsKey","get"],"sources":["D:/Work/Learning/demo/node_modules/ol/source/UrlTile.js"],"sourcesContent":["/**\n * @module ol/source/UrlTile\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileState from '../TileState.js';\nimport {createFromTemplates, expandUrl} from '../tileurlfunction.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Cache size.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n          ? TileEventType.TILELOADEND\n          : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\nexport default UrlTile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}