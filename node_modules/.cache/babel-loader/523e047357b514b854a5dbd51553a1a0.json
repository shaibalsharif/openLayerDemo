{"ast":null,"code":"/**\n * @module ol/control/defaults\n */\nimport Attribution from './Attribution.js';\nimport Collection from '../Collection.js';\nimport Rotate from './Rotate.js';\nimport Zoom from './Zoom.js';\n/**\n * @typedef {Object} DefaultsOptions\n * @property {boolean} [attribution=true] Include\n * {@link module:ol/control/Attribution~Attribution}.\n * @property {import(\"./Attribution.js\").Options} [attributionOptions]\n * Options for {@link module:ol/control/Attribution~Attribution}.\n * @property {boolean} [rotate=true] Include\n * {@link module:ol/control/Rotate~Rotate}.\n * @property {import(\"./Rotate.js\").Options} [rotateOptions] Options\n * for {@link module:ol/control/Rotate~Rotate}.\n * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.\n * @property {import(\"./Zoom.js\").Options} [zoomOptions] Options for\n * {@link module:ol/control/Zoom~Zoom}.\n */\n\n/**\n * Set of controls included in maps by default. Unless configured otherwise,\n * this returns a collection containing an instance of each of the following\n * controls:\n * * {@link module:ol/control/Zoom~Zoom}\n * * {@link module:ol/control/Rotate~Rotate}\n * * {@link module:ol/control/Attribution~Attribution}\n *\n * @param {DefaultsOptions} [options] Options for the default controls.\n * @return {Collection<import(\"./Control.js\").default>} A collection of controls\n * to be used with the {@link module:ol/Map~Map} constructor's `controls` option.\n * @api\n */\n\nexport function defaults(options) {\n  options = options ? options : {};\n  /** @type {Collection<import(\"./Control.js\").default>} */\n\n  const controls = new Collection();\n  const zoomControl = options.zoom !== undefined ? options.zoom : true;\n\n  if (zoomControl) {\n    controls.push(new Zoom(options.zoomOptions));\n  }\n\n  const rotateControl = options.rotate !== undefined ? options.rotate : true;\n\n  if (rotateControl) {\n    controls.push(new Rotate(options.rotateOptions));\n  }\n\n  const attributionControl = options.attribution !== undefined ? options.attribution : true;\n\n  if (attributionControl) {\n    controls.push(new Attribution(options.attributionOptions));\n  }\n\n  return controls;\n}","map":{"version":3,"names":["Attribution","Collection","Rotate","Zoom","defaults","options","controls","zoomControl","zoom","undefined","push","zoomOptions","rotateControl","rotate","rotateOptions","attributionControl","attribution","attributionOptions"],"sources":["D:/Work/Learning/demo/node_modules/ol/control/defaults.js"],"sourcesContent":["/**\n * @module ol/control/defaults\n */\nimport Attribution from './Attribution.js';\nimport Collection from '../Collection.js';\nimport Rotate from './Rotate.js';\nimport Zoom from './Zoom.js';\n\n/**\n * @typedef {Object} DefaultsOptions\n * @property {boolean} [attribution=true] Include\n * {@link module:ol/control/Attribution~Attribution}.\n * @property {import(\"./Attribution.js\").Options} [attributionOptions]\n * Options for {@link module:ol/control/Attribution~Attribution}.\n * @property {boolean} [rotate=true] Include\n * {@link module:ol/control/Rotate~Rotate}.\n * @property {import(\"./Rotate.js\").Options} [rotateOptions] Options\n * for {@link module:ol/control/Rotate~Rotate}.\n * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.\n * @property {import(\"./Zoom.js\").Options} [zoomOptions] Options for\n * {@link module:ol/control/Zoom~Zoom}.\n */\n\n/**\n * Set of controls included in maps by default. Unless configured otherwise,\n * this returns a collection containing an instance of each of the following\n * controls:\n * * {@link module:ol/control/Zoom~Zoom}\n * * {@link module:ol/control/Rotate~Rotate}\n * * {@link module:ol/control/Attribution~Attribution}\n *\n * @param {DefaultsOptions} [options] Options for the default controls.\n * @return {Collection<import(\"./Control.js\").default>} A collection of controls\n * to be used with the {@link module:ol/Map~Map} constructor's `controls` option.\n * @api\n */\nexport function defaults(options) {\n  options = options ? options : {};\n\n  /** @type {Collection<import(\"./Control.js\").default>} */\n  const controls = new Collection();\n\n  const zoomControl = options.zoom !== undefined ? options.zoom : true;\n  if (zoomControl) {\n    controls.push(new Zoom(options.zoomOptions));\n  }\n\n  const rotateControl = options.rotate !== undefined ? options.rotate : true;\n  if (rotateControl) {\n    controls.push(new Rotate(options.rotateOptions));\n  }\n\n  const attributionControl =\n    options.attribution !== undefined ? options.attribution : true;\n  if (attributionControl) {\n    controls.push(new Attribution(options.attributionOptions));\n  }\n\n  return controls;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;EAChCA,OAAO,GAAGA,OAAO,GAAGA,OAAH,GAAa,EAA9B;EAEA;;EACA,MAAMC,QAAQ,GAAG,IAAIL,UAAJ,EAAjB;EAEA,MAAMM,WAAW,GAAGF,OAAO,CAACG,IAAR,KAAiBC,SAAjB,GAA6BJ,OAAO,CAACG,IAArC,GAA4C,IAAhE;;EACA,IAAID,WAAJ,EAAiB;IACfD,QAAQ,CAACI,IAAT,CAAc,IAAIP,IAAJ,CAASE,OAAO,CAACM,WAAjB,CAAd;EACD;;EAED,MAAMC,aAAa,GAAGP,OAAO,CAACQ,MAAR,KAAmBJ,SAAnB,GAA+BJ,OAAO,CAACQ,MAAvC,GAAgD,IAAtE;;EACA,IAAID,aAAJ,EAAmB;IACjBN,QAAQ,CAACI,IAAT,CAAc,IAAIR,MAAJ,CAAWG,OAAO,CAACS,aAAnB,CAAd;EACD;;EAED,MAAMC,kBAAkB,GACtBV,OAAO,CAACW,WAAR,KAAwBP,SAAxB,GAAoCJ,OAAO,CAACW,WAA5C,GAA0D,IAD5D;;EAEA,IAAID,kBAAJ,EAAwB;IACtBT,QAAQ,CAACI,IAAT,CAAc,IAAIV,WAAJ,CAAgBK,OAAO,CAACY,kBAAxB,CAAd;EACD;;EAED,OAAOX,QAAP;AACD"},"metadata":{},"sourceType":"module"}